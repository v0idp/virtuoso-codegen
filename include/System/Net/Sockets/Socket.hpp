// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Net.Sockets.AddressFamily
#include "System/Net/Sockets/AddressFamily.hpp"
// Including type: System.Net.Sockets.SocketType
#include "System/Net/Sockets/SocketType.hpp"
// Including type: System.Net.Sockets.ProtocolType
#include "System/Net/Sockets/ProtocolType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.ArraySegment`1
#include "System/ArraySegment_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SafeSocketHandle
  class SafeSocketHandle;
  // Forward declaring type: SocketFlags
  struct SocketFlags;
  // Forward declaring type: IOControlCode
  struct IOControlCode;
  // Forward declaring type: IPProtectionLevel
  struct IPProtectionLevel;
  // Forward declaring type: SocketShutdown
  struct SocketShutdown;
  // Forward declaring type: SocketOptionLevel
  struct SocketOptionLevel;
  // Forward declaring type: SocketOptionName
  struct SocketOptionName;
  // Forward declaring type: SelectMode
  struct SelectMode;
  // Forward declaring type: SocketAsyncResult
  class SocketAsyncResult;
  // Forward declaring type: SocketError
  struct SocketError;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: EndPoint
  class EndPoint;
  // Forward declaring type: SocketAddress
  class SocketAddress;
  // Forward declaring type: IPAddress
  class IPAddress;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SemaphoreSlim
  class SemaphoreSlim;
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: IOAsyncCallback
  class IOAsyncCallback;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: IOSelectorJob
  class IOSelectorJob;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IList`1 because it is already included!
}
// Forward declaring namespace: System::Net::NetworkInformation
namespace System::Net::NetworkInformation {
  // Forward declaring type: NetworkInterfaceComponent
  struct NetworkInterfaceComponent;
}
// Completed forward declares
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Net::Sockets::Socket);
DEFINE_IL2CPP_ARG_TYPE(::System::Net::Sockets::Socket*, "System.Net.Sockets", "Socket");
// Type namespace: System.Net.Sockets
namespace System::Net::Sockets {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Sockets.Socket
  // [TokenAttribute] Offset: FFFFFFFF
  class Socket : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::System::Net::Sockets::Socket::WSABUF
    struct WSABUF;
    // Nested type: ::System::Net::Sockets::Socket::$$c
    class $$c;
    // Nested type: ::System::Net::Sockets::Socket::$$c__DisplayClass243_0
    class $$c__DisplayClass243_0;
    // Nested type: ::System::Net::Sockets::Socket::$$c__DisplayClass299_0
    class $$c__DisplayClass299_0;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Boolean is_closed
    // Size: 0x1
    // Offset: 0x10
    bool is_closed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean is_listening
    // Size: 0x1
    // Offset: 0x11
    bool is_listening;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useOverlappedIO
    // Size: 0x1
    // Offset: 0x12
    bool useOverlappedIO;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useOverlappedIO and: linger_timeout
    char __padding2[0x1] = {};
    // private System.Int32 linger_timeout
    // Size: 0x4
    // Offset: 0x14
    int linger_timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Net.Sockets.AddressFamily addressFamily
    // Size: 0x4
    // Offset: 0x18
    ::System::Net::Sockets::AddressFamily addressFamily;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::AddressFamily) == 0x4);
    // private System.Net.Sockets.SocketType socketType
    // Size: 0x4
    // Offset: 0x1C
    ::System::Net::Sockets::SocketType socketType;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::SocketType) == 0x4);
    // private System.Net.Sockets.ProtocolType protocolType
    // Size: 0x4
    // Offset: 0x20
    ::System::Net::Sockets::ProtocolType protocolType;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::ProtocolType) == 0x4);
    // Padding between fields: protocolType and: m_Handle
    char __padding6[0x4] = {};
    // System.Net.Sockets.SafeSocketHandle m_Handle
    // Size: 0x8
    // Offset: 0x28
    ::System::Net::Sockets::SafeSocketHandle* m_Handle;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::SafeSocketHandle*) == 0x8);
    // System.Net.EndPoint seed_endpoint
    // Size: 0x8
    // Offset: 0x30
    ::System::Net::EndPoint* seed_endpoint;
    // Field size check
    static_assert(sizeof(::System::Net::EndPoint*) == 0x8);
    // System.Threading.SemaphoreSlim ReadSem
    // Size: 0x8
    // Offset: 0x38
    ::System::Threading::SemaphoreSlim* ReadSem;
    // Field size check
    static_assert(sizeof(::System::Threading::SemaphoreSlim*) == 0x8);
    // System.Threading.SemaphoreSlim WriteSem
    // Size: 0x8
    // Offset: 0x40
    ::System::Threading::SemaphoreSlim* WriteSem;
    // Field size check
    static_assert(sizeof(::System::Threading::SemaphoreSlim*) == 0x8);
    // System.Boolean is_blocking
    // Size: 0x1
    // Offset: 0x48
    bool is_blocking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean is_bound
    // Size: 0x1
    // Offset: 0x49
    bool is_bound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean is_connected
    // Size: 0x1
    // Offset: 0x4A
    bool is_connected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: is_connected and: m_IntCleanedUp
    char __padding13[0x1] = {};
    // private System.Int32 m_IntCleanedUp
    // Size: 0x4
    // Offset: 0x4C
    int m_IntCleanedUp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean connect_in_progress
    // Size: 0x1
    // Offset: 0x50
    bool connect_in_progress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: connect_in_progress and: _ID
    char __padding15[0x3] = {};
    // readonly System.Int32 ID
    // Size: 0x4
    // Offset: 0x54
    int _ID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Object s_InternalSyncObject
    static ::Il2CppObject* _get_s_InternalSyncObject();
    // Set static field: static private System.Object s_InternalSyncObject
    static void _set_s_InternalSyncObject(::Il2CppObject* value);
    // Get static field: static System.Boolean s_SupportsIPv4
    static bool _get_s_SupportsIPv4();
    // Set static field: static System.Boolean s_SupportsIPv4
    static void _set_s_SupportsIPv4(bool value);
    // Get static field: static System.Boolean s_SupportsIPv6
    static bool _get_s_SupportsIPv6();
    // Set static field: static System.Boolean s_SupportsIPv6
    static void _set_s_SupportsIPv6(bool value);
    // Get static field: static System.Boolean s_OSSupportsIPv6
    static bool _get_s_OSSupportsIPv6();
    // Set static field: static System.Boolean s_OSSupportsIPv6
    static void _set_s_OSSupportsIPv6(bool value);
    // Get static field: static System.Boolean s_Initialized
    static bool _get_s_Initialized();
    // Set static field: static System.Boolean s_Initialized
    static void _set_s_Initialized(bool value);
    // Get static field: static private System.Boolean s_LoggingEnabled
    static bool _get_s_LoggingEnabled();
    // Set static field: static private System.Boolean s_LoggingEnabled
    static void _set_s_LoggingEnabled(bool value);
    // Get static field: static System.Boolean s_PerfCountersEnabled
    static bool _get_s_PerfCountersEnabled();
    // Set static field: static System.Boolean s_PerfCountersEnabled
    static void _set_s_PerfCountersEnabled(bool value);
    // static field const value: static System.Int32 DefaultCloseTimeout
    static constexpr const int DefaultCloseTimeout = -1;
    // Get static field: static System.Int32 DefaultCloseTimeout
    static int _get_DefaultCloseTimeout();
    // Set static field: static System.Int32 DefaultCloseTimeout
    static void _set_DefaultCloseTimeout(int value);
    // static field const value: static private System.Int32 SOCKET_CLOSED_CODE
    static constexpr const int SOCKET_CLOSED_CODE = 10004;
    // Get static field: static private System.Int32 SOCKET_CLOSED_CODE
    static int _get_SOCKET_CLOSED_CODE();
    // Set static field: static private System.Int32 SOCKET_CLOSED_CODE
    static void _set_SOCKET_CLOSED_CODE(int value);
    // static field const value: static private System.String TIMEOUT_EXCEPTION_MSG
    static constexpr const char* TIMEOUT_EXCEPTION_MSG = "A connection attempt failed because the connected party did not properly respondafter a period of time, or established connection failed because connected host has failed to respond";
    // Get static field: static private System.String TIMEOUT_EXCEPTION_MSG
    static ::StringW _get_TIMEOUT_EXCEPTION_MSG();
    // Set static field: static private System.String TIMEOUT_EXCEPTION_MSG
    static void _set_TIMEOUT_EXCEPTION_MSG(::StringW value);
    // Get static field: static private System.AsyncCallback AcceptAsyncCallback
    static ::System::AsyncCallback* _get_AcceptAsyncCallback();
    // Set static field: static private System.AsyncCallback AcceptAsyncCallback
    static void _set_AcceptAsyncCallback(::System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginAcceptCallback
    static ::System::IOAsyncCallback* _get_BeginAcceptCallback();
    // Set static field: static private System.IOAsyncCallback BeginAcceptCallback
    static void _set_BeginAcceptCallback(::System::IOAsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginAcceptReceiveCallback
    static ::System::IOAsyncCallback* _get_BeginAcceptReceiveCallback();
    // Set static field: static private System.IOAsyncCallback BeginAcceptReceiveCallback
    static void _set_BeginAcceptReceiveCallback(::System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ConnectAsyncCallback
    static ::System::AsyncCallback* _get_ConnectAsyncCallback();
    // Set static field: static private System.AsyncCallback ConnectAsyncCallback
    static void _set_ConnectAsyncCallback(::System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginConnectCallback
    static ::System::IOAsyncCallback* _get_BeginConnectCallback();
    // Set static field: static private System.IOAsyncCallback BeginConnectCallback
    static void _set_BeginConnectCallback(::System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback DisconnectAsyncCallback
    static ::System::AsyncCallback* _get_DisconnectAsyncCallback();
    // Set static field: static private System.AsyncCallback DisconnectAsyncCallback
    static void _set_DisconnectAsyncCallback(::System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginDisconnectCallback
    static ::System::IOAsyncCallback* _get_BeginDisconnectCallback();
    // Set static field: static private System.IOAsyncCallback BeginDisconnectCallback
    static void _set_BeginDisconnectCallback(::System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ReceiveAsyncCallback
    static ::System::AsyncCallback* _get_ReceiveAsyncCallback();
    // Set static field: static private System.AsyncCallback ReceiveAsyncCallback
    static void _set_ReceiveAsyncCallback(::System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveCallback
    static ::System::IOAsyncCallback* _get_BeginReceiveCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveCallback
    static void _set_BeginReceiveCallback(::System::IOAsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveGenericCallback
    static ::System::IOAsyncCallback* _get_BeginReceiveGenericCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveGenericCallback
    static void _set_BeginReceiveGenericCallback(::System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback ReceiveFromAsyncCallback
    static ::System::AsyncCallback* _get_ReceiveFromAsyncCallback();
    // Set static field: static private System.AsyncCallback ReceiveFromAsyncCallback
    static void _set_ReceiveFromAsyncCallback(::System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginReceiveFromCallback
    static ::System::IOAsyncCallback* _get_BeginReceiveFromCallback();
    // Set static field: static private System.IOAsyncCallback BeginReceiveFromCallback
    static void _set_BeginReceiveFromCallback(::System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback SendAsyncCallback
    static ::System::AsyncCallback* _get_SendAsyncCallback();
    // Set static field: static private System.AsyncCallback SendAsyncCallback
    static void _set_SendAsyncCallback(::System::AsyncCallback* value);
    // Get static field: static private System.IOAsyncCallback BeginSendGenericCallback
    static ::System::IOAsyncCallback* _get_BeginSendGenericCallback();
    // Set static field: static private System.IOAsyncCallback BeginSendGenericCallback
    static void _set_BeginSendGenericCallback(::System::IOAsyncCallback* value);
    // Get static field: static private System.AsyncCallback SendToAsyncCallback
    static ::System::AsyncCallback* _get_SendToAsyncCallback();
    // Set static field: static private System.AsyncCallback SendToAsyncCallback
    static void _set_SendToAsyncCallback(::System::AsyncCallback* value);
    // Get instance field reference: private System.Boolean is_closed
    bool& dyn_is_closed();
    // Get instance field reference: private System.Boolean is_listening
    bool& dyn_is_listening();
    // Get instance field reference: private System.Boolean useOverlappedIO
    bool& dyn_useOverlappedIO();
    // Get instance field reference: private System.Int32 linger_timeout
    int& dyn_linger_timeout();
    // Get instance field reference: private System.Net.Sockets.AddressFamily addressFamily
    ::System::Net::Sockets::AddressFamily& dyn_addressFamily();
    // Get instance field reference: private System.Net.Sockets.SocketType socketType
    ::System::Net::Sockets::SocketType& dyn_socketType();
    // Get instance field reference: private System.Net.Sockets.ProtocolType protocolType
    ::System::Net::Sockets::ProtocolType& dyn_protocolType();
    // Get instance field reference: System.Net.Sockets.SafeSocketHandle m_Handle
    ::System::Net::Sockets::SafeSocketHandle*& dyn_m_Handle();
    // Get instance field reference: System.Net.EndPoint seed_endpoint
    ::System::Net::EndPoint*& dyn_seed_endpoint();
    // Get instance field reference: System.Threading.SemaphoreSlim ReadSem
    ::System::Threading::SemaphoreSlim*& dyn_ReadSem();
    // Get instance field reference: System.Threading.SemaphoreSlim WriteSem
    ::System::Threading::SemaphoreSlim*& dyn_WriteSem();
    // Get instance field reference: System.Boolean is_blocking
    bool& dyn_is_blocking();
    // Get instance field reference: System.Boolean is_bound
    bool& dyn_is_bound();
    // Get instance field reference: System.Boolean is_connected
    bool& dyn_is_connected();
    // Get instance field reference: private System.Int32 m_IntCleanedUp
    int& dyn_m_IntCleanedUp();
    // Get instance field reference: System.Boolean connect_in_progress
    bool& dyn_connect_in_progress();
    // Get instance field reference: readonly System.Int32 ID
    int& dyn_ID();
    // static public System.Boolean get_SupportsIPv4()
    // Offset: 0x9491A8
    static bool get_SupportsIPv4();
    // static public System.Boolean get_OSSupportsIPv4()
    // Offset: 0x949218
    static bool get_OSSupportsIPv4();
    // static public System.Boolean get_SupportsIPv6()
    // Offset: 0x949288
    static bool get_SupportsIPv6();
    // static public System.Boolean get_OSSupportsIPv6()
    // Offset: 0x9492F8
    static bool get_OSSupportsIPv6();
    // public System.IntPtr get_Handle()
    // Offset: 0x949368
    ::System::IntPtr get_Handle();
    // public System.Net.Sockets.AddressFamily get_AddressFamily()
    // Offset: 0x949384
    ::System::Net::Sockets::AddressFamily get_AddressFamily();
    // public System.Net.Sockets.SocketType get_SocketType()
    // Offset: 0x94938C
    ::System::Net::Sockets::SocketType get_SocketType();
    // public System.Net.Sockets.ProtocolType get_ProtocolType()
    // Offset: 0x949394
    ::System::Net::Sockets::ProtocolType get_ProtocolType();
    // public System.Void set_ExclusiveAddressUse(System.Boolean value)
    // Offset: 0x94939C
    void set_ExclusiveAddressUse(bool value);
    // public System.Void set_DontFragment(System.Boolean value)
    // Offset: 0x94952C
    void set_DontFragment(bool value);
    // public System.Boolean get_DualMode()
    // Offset: 0x94959C
    bool get_DualMode();
    // public System.Void set_DualMode(System.Boolean value)
    // Offset: 0x94981C
    void set_DualMode(bool value);
    // private System.Boolean get_IsDualMode()
    // Offset: 0x949890
    bool get_IsDualMode();
    // static private System.Object get_InternalSyncObject()
    // Offset: 0x94B2A8
    static ::Il2CppObject* get_InternalSyncObject();
    // System.Boolean get_CleanedUp()
    // Offset: 0x94B38C
    bool get_CleanedUp();
    // public System.Int32 get_Available()
    // Offset: 0x94BA8C
    int get_Available();
    // public System.Boolean get_IsBound()
    // Offset: 0x94BCFC
    bool get_IsBound();
    // public System.Net.EndPoint get_LocalEndPoint()
    // Offset: 0x94BD04
    ::System::Net::EndPoint* get_LocalEndPoint();
    // public System.Boolean get_Blocking()
    // Offset: 0x94BF30
    bool get_Blocking();
    // public System.Void set_Blocking(System.Boolean value)
    // Offset: 0x94BF38
    void set_Blocking(bool value);
    // public System.Boolean get_Connected()
    // Offset: 0x94C134
    bool get_Connected();
    // public System.Void set_NoDelay(System.Boolean value)
    // Offset: 0x94BA48
    void set_NoDelay(bool value);
    // static System.Int32 get_FamilyHint()
    // Offset: 0x94F74C
    static int get_FamilyHint();
    // public System.Void .ctor(System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType)
    // Offset: 0x948A60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Socket* New_ctor(::System::Net::Sockets::AddressFamily addressFamily, ::System::Net::Sockets::SocketType socketType, ::System::Net::Sockets::ProtocolType protocolType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Sockets::Socket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Socket*, creationType>(addressFamily, socketType, protocolType)));
    }
    // System.Void .ctor(System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, System.Net.Sockets.SafeSocketHandle safe_handle)
    // Offset: 0x94B94C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Socket* New_ctor(::System::Net::Sockets::AddressFamily family, ::System::Net::Sockets::SocketType type, ::System::Net::Sockets::ProtocolType proto, ::System::Net::Sockets::SafeSocketHandle* safe_handle) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Net::Sockets::Socket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Socket*, creationType>(family, type, proto, safe_handle)));
    }
    // static private System.Void .cctor()
    // Offset: 0x94F7EC
    static void _cctor();
    // public System.Int32 Send(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x9498A8
    int Send(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>* buffers, ::System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x949F84
    int Send(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x94A144
    int Receive(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 Receive(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags)
    // Offset: 0x94A2CC
    int Receive(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>* buffers, ::System::Net::Sockets::SocketFlags socketFlags);
    // public System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
    // Offset: 0x94A8EC
    int ReceiveFrom(::ArrayW<uint8_t> buffer, int size, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::EndPoint*> remoteEP);
    // public System.Int32 IOControl(System.Net.Sockets.IOControlCode ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
    // Offset: 0x94635C
    int IOControl(::System::Net::Sockets::IOControlCode ioControlCode, ::ArrayW<uint8_t> optionInValue, ::ArrayW<uint8_t> optionOutValue);
    // public System.Void SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel level)
    // Offset: 0x948FF4
    void SetIPProtectionLevel(::System::Net::Sockets::IPProtectionLevel level);
    // public System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
    // Offset: 0x94AB98
    ::System::IAsyncResult* BeginSend(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndSend(System.IAsyncResult asyncResult)
    // Offset: 0x94AE18
    int EndSend(::System::IAsyncResult* asyncResult);
    // public System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
    // Offset: 0x94AF68
    ::System::IAsyncResult* BeginReceive(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndReceive(System.IAsyncResult asyncResult)
    // Offset: 0x94B158
    int EndReceive(::System::IAsyncResult* asyncResult);
    // static System.Void InitializeSockets()
    // Offset: 0x948CD4
    static void InitializeSockets();
    // public System.Void Dispose()
    // Offset: 0x94B3FC
    void Dispose();
    // System.Void InternalShutdown(System.Net.Sockets.SocketShutdown how)
    // Offset: 0x94B4E8
    void InternalShutdown(::System::Net::Sockets::SocketShutdown how);
    // System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionValue, System.Boolean silent)
    // Offset: 0x94B6A4
    void SetSocketOption(::System::Net::Sockets::SocketOptionLevel optionLevel, ::System::Net::Sockets::SocketOptionName optionName, int optionValue, bool silent);
    // private System.Void SocketDefaults()
    // Offset: 0x9490D0
    void SocketDefaults();
    // private System.IntPtr Socket_internal(System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, out System.Int32 error)
    // Offset: 0x948F7C
    ::System::IntPtr Socket_internal(::System::Net::Sockets::AddressFamily family, ::System::Net::Sockets::SocketType type, ::System::Net::Sockets::ProtocolType proto, ByRef<int> error);
    // static private System.Int32 Available_internal(System.Net.Sockets.SafeSocketHandle safeHandle, out System.Int32 error)
    // Offset: 0x94BBC8
    static int Available_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ByRef<int> error);
    // static private System.Int32 Available_internal(System.IntPtr socket, out System.Int32 error)
    // Offset: 0x94BCF8
    static int Available_internal(::System::IntPtr socket, ByRef<int> error);
    // static private System.Net.SocketAddress LocalEndPoint_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 family, out System.Int32 error)
    // Offset: 0x94BDF4
    static ::System::Net::SocketAddress* LocalEndPoint_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, int family, ByRef<int> error);
    // static private System.Net.SocketAddress LocalEndPoint_internal(System.IntPtr socket, System.Int32 family, out System.Int32 error)
    // Offset: 0x94BF2C
    static ::System::Net::SocketAddress* LocalEndPoint_internal(::System::IntPtr socket, int family, ByRef<int> error);
    // static private System.Void Blocking_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Boolean block, out System.Int32 error)
    // Offset: 0x94C00C
    static void Blocking_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, bool block, ByRef<int> error);
    // static System.Void Blocking_internal(System.IntPtr socket, System.Boolean block, out System.Int32 error)
    // Offset: 0x944F30
    static void Blocking_internal(::System::IntPtr socket, bool block, ByRef<int> error);
    // public System.Boolean Poll(System.Int32 microSeconds, System.Net.Sockets.SelectMode mode)
    // Offset: 0x94C18C
    bool Poll(int microSeconds, ::System::Net::Sockets::SelectMode mode);
    // static private System.Boolean Poll_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SelectMode mode, System.Int32 timeout, out System.Int32 error)
    // Offset: 0x94C318
    static bool Poll_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ::System::Net::Sockets::SelectMode mode, int timeout, ByRef<int> error);
    // static private System.Boolean Poll_internal(System.IntPtr socket, System.Net.Sockets.SelectMode mode, System.Int32 timeout, out System.Int32 error)
    // Offset: 0x94C460
    static bool Poll_internal(::System::IntPtr socket, ::System::Net::Sockets::SelectMode mode, int timeout, ByRef<int> error);
    // public System.Net.Sockets.Socket Accept()
    // Offset: 0x94C464
    ::System::Net::Sockets::Socket* Accept();
    // System.Void Accept(System.Net.Sockets.Socket acceptSocket)
    // Offset: 0x94C6B0
    void Accept(::System::Net::Sockets::Socket* acceptSocket);
    // public System.IAsyncResult BeginAccept(System.AsyncCallback callback, System.Object state)
    // Offset: 0x94C7DC
    ::System::IAsyncResult* BeginAccept(::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Net.Sockets.Socket EndAccept(System.IAsyncResult asyncResult)
    // Offset: 0x94CB3C
    ::System::Net::Sockets::Socket* EndAccept(::System::IAsyncResult* asyncResult);
    // public System.Net.Sockets.Socket EndAccept(out System.Byte[] buffer, out System.Int32 bytesTransferred, System.IAsyncResult asyncResult)
    // Offset: 0x94CB6C
    ::System::Net::Sockets::Socket* EndAccept(ByRef<::ArrayW<uint8_t>> buffer, ByRef<int> bytesTransferred, ::System::IAsyncResult* asyncResult);
    // static private System.Net.Sockets.SafeSocketHandle Accept_internal(System.Net.Sockets.SafeSocketHandle safeHandle, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94C5A0
    static ::System::Net::Sockets::SafeSocketHandle* Accept_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ByRef<int> error, bool blocking);
    // static private System.IntPtr Accept_internal(System.IntPtr sock, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94CE28
    static ::System::IntPtr Accept_internal(::System::IntPtr sock, ByRef<int> error, bool blocking);
    // public System.Void Bind(System.Net.EndPoint localEP)
    // Offset: 0x946E3C
    void Bind(::System::Net::EndPoint* localEP);
    // static private System.Void Bind_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.SocketAddress sa, out System.Int32 error)
    // Offset: 0x94CEF4
    static void Bind_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ::System::Net::SocketAddress* sa, ByRef<int> error);
    // static private System.Void Bind_internal(System.IntPtr sock, System.Net.SocketAddress sa, out System.Int32 error)
    // Offset: 0x94D01C
    static void Bind_internal(::System::IntPtr sock, ::System::Net::SocketAddress* sa, ByRef<int> error);
    // public System.Void Listen(System.Int32 backlog)
    // Offset: 0x94D020
    void Listen(int backlog);
    // static private System.Void Listen_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 backlog, out System.Int32 error)
    // Offset: 0x94D110
    static void Listen_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, int backlog, ByRef<int> error);
    // static private System.Void Listen_internal(System.IntPtr sock, System.Int32 backlog, out System.Int32 error)
    // Offset: 0x94D238
    static void Listen_internal(::System::IntPtr sock, int backlog, ByRef<int> error);
    // public System.Void Connect(System.Net.EndPoint remoteEP)
    // Offset: 0x94D23C
    void Connect(::System::Net::EndPoint* remoteEP);
    // public System.IAsyncResult BeginConnect(System.String host, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
    // Offset: 0x94D6A8
    ::System::IAsyncResult* BeginConnect(::StringW host, int port, ::System::AsyncCallback* requestCallback, ::Il2CppObject* state);
    // public System.IAsyncResult BeginConnect(System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)
    // Offset: 0x94DA4C
    ::System::IAsyncResult* BeginConnect(::System::Net::EndPoint* remoteEP, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.IAsyncResult BeginConnect(System.Net.IPAddress[] addresses, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
    // Offset: 0x94D81C
    ::System::IAsyncResult* BeginConnect(::ArrayW<::System::Net::IPAddress*> addresses, int port, ::System::AsyncCallback* requestCallback, ::Il2CppObject* state);
    // static private System.Void BeginMConnect(System.Net.Sockets.SocketAsyncResult sockares)
    // Offset: 0x94DF78
    static void BeginMConnect(::System::Net::Sockets::SocketAsyncResult* sockares);
    // static private System.Void BeginSConnect(System.Net.Sockets.SocketAsyncResult sockares)
    // Offset: 0x94DB94
    static void BeginSConnect(::System::Net::Sockets::SocketAsyncResult* sockares);
    // public System.Void EndConnect(System.IAsyncResult asyncResult)
    // Offset: 0x94E188
    void EndConnect(::System::IAsyncResult* asyncResult);
    // static private System.Void Connect_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94D5B4
    static void Connect_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ::System::Net::SocketAddress* sa, ByRef<int> error, bool blocking);
    // static private System.Void Connect_internal(System.IntPtr sock, System.Net.SocketAddress sa, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94E238
    static void Connect_internal(::System::IntPtr sock, ::System::Net::SocketAddress* sa, ByRef<int> error, bool blocking);
    // public System.Void Disconnect(System.Boolean reuseSocket)
    // Offset: 0x94E240
    void Disconnect(bool reuseSocket);
    // public System.Void EndDisconnect(System.IAsyncResult asyncResult)
    // Offset: 0x94E458
    void EndDisconnect(::System::IAsyncResult* asyncResult);
    // static private System.Void Disconnect_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Boolean reuse, out System.Int32 error)
    // Offset: 0x94E330
    static void Disconnect_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, bool reuse, ByRef<int> error);
    // static private System.Void Disconnect_internal(System.IntPtr sock, System.Boolean reuse, out System.Int32 error)
    // Offset: 0x94E508
    static void Disconnect_internal(::System::IntPtr sock, bool reuse, ByRef<int> error);
    // public System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x94A1AC
    int Receive(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::Sockets::SocketError> errorCode);
    // public System.Int32 Receive(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x94A334
    int Receive(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>* buffers, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::Sockets::SocketError> errorCode);
    // public System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
    // Offset: 0x94AFE0
    ::System::IAsyncResult* BeginReceive(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::Sockets::SocketError> errorCode, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Int32 EndReceive(System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x94B1C0
    int EndReceive(::System::IAsyncResult* asyncResult, ByRef<::System::Net::Sockets::SocketError> errorCode);
    // static private System.Int32 Receive_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.Socket/System.Net.Sockets.WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94E79C
    static int Receive_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ::System::Net::Sockets::Socket::WSABUF* bufarray, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<int> error, bool blocking);
    // static private System.Int32 Receive_internal(System.IntPtr sock, System.Net.Sockets.Socket/System.Net.Sockets.WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94E928
    static int Receive_internal(::System::IntPtr sock, ::System::Net::Sockets::Socket::WSABUF* bufarray, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<int> error, bool blocking);
    // static private System.Int32 Receive_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94E694
    static int Receive_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<int> error, bool blocking);
    // static private System.Int32 Receive_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94E930
    static int Receive_internal(::System::IntPtr sock, uint8_t* buffer, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<int> error, bool blocking);
    // public System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
    // Offset: 0x94A900
    int ReceiveFrom(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::EndPoint*> remoteEP);
    // System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x94E938
    int ReceiveFrom(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::EndPoint*> remoteEP, ByRef<::System::Net::Sockets::SocketError> errorCode);
    // public System.Int32 EndReceiveFrom(System.IAsyncResult asyncResult, ref System.Net.EndPoint endPoint)
    // Offset: 0x94EBD8
    int EndReceiveFrom(::System::IAsyncResult* asyncResult, ByRef<::System::Net::EndPoint*> endPoint);
    // static private System.Int32 ReceiveFrom_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, ref System.Net.SocketAddress sockaddr, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94EAC8
    static int ReceiveFrom_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<::System::Net::SocketAddress*> sockaddr, ByRef<int> error, bool blocking);
    // static private System.Int32 ReceiveFrom_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, ref System.Net.SocketAddress sockaddr, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94ECEC
    static int ReceiveFrom_internal(::System::IntPtr sock, uint8_t* buffer, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<::System::Net::SocketAddress*> sockaddr, ByRef<int> error, bool blocking);
    // public System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x949FEC
    int Send(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::Sockets::SocketError> errorCode);
    // public System.Int32 Send(System.Collections.Generic.IList`1<System.ArraySegment`1<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x949910
    int Send(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>* buffers, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::Sockets::SocketError> errorCode);
    // public System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
    // Offset: 0x94AC10
    ::System::IAsyncResult* BeginSend(::ArrayW<uint8_t> buffer, int offset, int size, ::System::Net::Sockets::SocketFlags socketFlags, ByRef<::System::Net::Sockets::SocketError> errorCode, ::System::AsyncCallback* callback, ::Il2CppObject* state);
    // static private System.Void BeginSendCallback(System.Net.Sockets.SocketAsyncResult sockares, System.Int32 sent_so_far)
    // Offset: 0x94EF04
    static void BeginSendCallback(::System::Net::Sockets::SocketAsyncResult* sockares, int sent_so_far);
    // public System.Int32 EndSend(System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode)
    // Offset: 0x94AE80
    int EndSend(::System::IAsyncResult* asyncResult, ByRef<::System::Net::Sockets::SocketError> errorCode);
    // static private System.Int32 Send_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.Socket/System.Net.Sockets.WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94EDFC
    static int Send_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ::System::Net::Sockets::Socket::WSABUF* bufarray, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<int> error, bool blocking);
    // static private System.Int32 Send_internal(System.IntPtr sock, System.Net.Sockets.Socket/System.Net.Sockets.WSABUF* bufarray, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94F1E8
    static int Send_internal(::System::IntPtr sock, ::System::Net::Sockets::Socket::WSABUF* bufarray, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<int> error, bool blocking);
    // static private System.Int32 Send_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94ECF4
    static int Send_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, uint8_t* buffer, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<int> error, bool blocking);
    // static private System.Int32 Send_internal(System.IntPtr sock, System.Byte* buffer, System.Int32 count, System.Net.Sockets.SocketFlags flags, out System.Int32 error, System.Boolean blocking)
    // Offset: 0x94F1F0
    static int Send_internal(::System::IntPtr sock, uint8_t* buffer, int count, ::System::Net::Sockets::SocketFlags flags, ByRef<int> error, bool blocking);
    // public System.Int32 EndSendTo(System.IAsyncResult asyncResult)
    // Offset: 0x94F1F8
    int EndSendTo(::System::IAsyncResult* asyncResult);
    // public System.Object GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName)
    // Offset: 0x949678
    ::Il2CppObject* GetSocketOption(::System::Net::Sockets::SocketOptionLevel optionLevel, ::System::Net::Sockets::SocketOptionName optionName);
    // static private System.Void GetSocketOption_obj_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, out System.Object obj_val, out System.Int32 error)
    // Offset: 0x94F2B0
    static void GetSocketOption_obj_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ::System::Net::Sockets::SocketOptionLevel level, ::System::Net::Sockets::SocketOptionName name, ByRef<::Il2CppObject*> obj_val, ByRef<int> error);
    // static private System.Void GetSocketOption_obj_internal(System.IntPtr socket, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, out System.Object obj_val, out System.Int32 error)
    // Offset: 0x94F3F0
    static void GetSocketOption_obj_internal(::System::IntPtr socket, ::System::Net::Sockets::SocketOptionLevel level, ::System::Net::Sockets::SocketOptionName name, ByRef<::Il2CppObject*> obj_val, ByRef<int> error);
    // public System.Void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionValue)
    // Offset: 0x949408
    void SetSocketOption(::System::Net::Sockets::SocketOptionLevel optionLevel, ::System::Net::Sockets::SocketOptionName optionName, int optionValue);
    // static private System.Void SetSocketOption_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, System.Object obj_val, System.Byte[] byte_val, System.Int32 int_val, out System.Int32 error)
    // Offset: 0x94B7F4
    static void SetSocketOption_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ::System::Net::Sockets::SocketOptionLevel level, ::System::Net::Sockets::SocketOptionName name, ::Il2CppObject* obj_val, ::ArrayW<uint8_t> byte_val, int int_val, ByRef<int> error);
    // static private System.Void SetSocketOption_internal(System.IntPtr socket, System.Net.Sockets.SocketOptionLevel level, System.Net.Sockets.SocketOptionName name, System.Object obj_val, System.Byte[] byte_val, System.Int32 int_val, out System.Int32 error)
    // Offset: 0x94F3F4
    static void SetSocketOption_internal(::System::IntPtr socket, ::System::Net::Sockets::SocketOptionLevel level, ::System::Net::Sockets::SocketOptionName name, ::Il2CppObject* obj_val, ::ArrayW<uint8_t> byte_val, int int_val, ByRef<int> error);
    // public System.Int32 IOControl(System.Int32 ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
    // Offset: 0x94AA14
    int IOControl(int ioControlCode, ::ArrayW<uint8_t> optionInValue, ::ArrayW<uint8_t> optionOutValue);
    // static private System.Int32 IOControl_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Int32 ioctl_code, System.Byte[] input, System.Byte[] output, out System.Int32 error)
    // Offset: 0x94F3F8
    static int IOControl_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, int ioctl_code, ::ArrayW<uint8_t> input, ::ArrayW<uint8_t> output, ByRef<int> error);
    // static private System.Int32 IOControl_internal(System.IntPtr sock, System.Int32 ioctl_code, System.Byte[] input, System.Byte[] output, out System.Int32 error)
    // Offset: 0x94F548
    static int IOControl_internal(::System::IntPtr sock, int ioctl_code, ::ArrayW<uint8_t> input, ::ArrayW<uint8_t> output, ByRef<int> error);
    // public System.Void Close()
    // Offset: 0x94F54C
    void Close();
    // public System.Void Close(System.Int32 timeout)
    // Offset: 0x94F554
    void Close(int timeout);
    // static System.Void Close_internal(System.IntPtr socket, out System.Int32 error)
    // Offset: 0x944F40
    static void Close_internal(::System::IntPtr socket, ByRef<int> error);
    // static private System.Void Shutdown_internal(System.Net.Sockets.SafeSocketHandle safeHandle, System.Net.Sockets.SocketShutdown how, out System.Int32 error)
    // Offset: 0x94B57C
    static void Shutdown_internal(::System::Net::Sockets::SafeSocketHandle* safeHandle, ::System::Net::Sockets::SocketShutdown how, ByRef<int> error);
    // static System.Void Shutdown_internal(System.IntPtr socket, System.Net.Sockets.SocketShutdown how, out System.Int32 error)
    // Offset: 0x944F38
    static void Shutdown_internal(::System::IntPtr socket, ::System::Net::Sockets::SocketShutdown how, ByRef<int> error);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x94F55C
    void Dispose(bool disposing);
    // private System.Void Linger(System.IntPtr handle)
    // Offset: 0x94F5CC
    void Linger(::System::IntPtr handle);
    // private System.Void ThrowIfDisposedAndClosed()
    // Offset: 0x94BB48
    void ThrowIfDisposedAndClosed();
    // private System.Void ThrowIfBufferNull(System.Byte[] buffer)
    // Offset: 0x94E510
    void ThrowIfBufferNull(::ArrayW<uint8_t> buffer);
    // private System.Void ThrowIfBufferOutOfRange(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x94E56C
    void ThrowIfBufferOutOfRange(::ArrayW<uint8_t> buffer, int offset, int size);
    // private System.Void ThrowIfUdp()
    // Offset: 0x94C13C
    void ThrowIfUdp();
    // private System.Net.Sockets.SocketAsyncResult ValidateEndIAsyncResult(System.IAsyncResult ares, System.String methodName, System.String argName)
    // Offset: 0x94CC44
    ::System::Net::Sockets::SocketAsyncResult* ValidateEndIAsyncResult(::System::IAsyncResult* ares, ::StringW methodName, ::StringW argName);
    // private System.Void QueueIOSelectorJob(System.Threading.SemaphoreSlim sem, System.IntPtr handle, System.IOSelectorJob job)
    // Offset: 0x94C9E8
    void QueueIOSelectorJob(::System::Threading::SemaphoreSlim* sem, ::System::IntPtr handle, ::System::IOSelectorJob* job);
    // private System.Net.IPEndPoint RemapIPEndPoint(System.Net.IPEndPoint input)
    // Offset: 0x94CE30
    ::System::Net::IPEndPoint* RemapIPEndPoint(::System::Net::IPEndPoint* input);
    // static System.Void cancel_blocking_socket_operation(System.Threading.Thread thread)
    // Offset: 0x944F3C
    static void cancel_blocking_socket_operation(::System::Threading::Thread* thread);
    // static private System.Boolean IsProtocolSupported_internal(System.Net.NetworkInformation.NetworkInterfaceComponent networkInterface)
    // Offset: 0x94F7E8
    static bool IsProtocolSupported_internal(::System::Net::NetworkInformation::NetworkInterfaceComponent networkInterface);
    // static private System.Boolean IsProtocolSupported(System.Net.NetworkInformation.NetworkInterfaceComponent networkInterface)
    // Offset: 0x94B39C
    static bool IsProtocolSupported(::System::Net::NetworkInformation::NetworkInterfaceComponent networkInterface);
    // protected override System.Void Finalize()
    // Offset: 0x94B474
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Net.Sockets.Socket
  #pragma pack(pop)
  static check_size<sizeof(Socket), 84 + sizeof(int)> __System_Net_Sockets_SocketSizeCheck;
  static_assert(sizeof(Socket) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_SupportsIPv4
// Il2CppName: get_SupportsIPv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::Sockets::Socket::get_SupportsIPv4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_SupportsIPv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_OSSupportsIPv4
// Il2CppName: get_OSSupportsIPv4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::Sockets::Socket::get_OSSupportsIPv4)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_OSSupportsIPv4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_SupportsIPv6
// Il2CppName: get_SupportsIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::Sockets::Socket::get_SupportsIPv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_SupportsIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_OSSupportsIPv6
// Il2CppName: get_OSSupportsIPv6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&System::Net::Sockets::Socket::get_OSSupportsIPv6)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_OSSupportsIPv6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_Handle
// Il2CppName: get_Handle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_Handle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_Handle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_AddressFamily
// Il2CppName: get_AddressFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::AddressFamily (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_AddressFamily)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_AddressFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_SocketType
// Il2CppName: get_SocketType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::SocketType (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_SocketType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_SocketType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_ProtocolType
// Il2CppName: get_ProtocolType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::ProtocolType (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_ProtocolType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_ProtocolType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::set_ExclusiveAddressUse
// Il2CppName: set_ExclusiveAddressUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(bool)>(&System::Net::Sockets::Socket::set_ExclusiveAddressUse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "set_ExclusiveAddressUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::set_DontFragment
// Il2CppName: set_DontFragment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(bool)>(&System::Net::Sockets::Socket::set_DontFragment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "set_DontFragment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_DualMode
// Il2CppName: get_DualMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_DualMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_DualMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::set_DualMode
// Il2CppName: set_DualMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(bool)>(&System::Net::Sockets::Socket::set_DualMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "set_DualMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_IsDualMode
// Il2CppName: get_IsDualMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_IsDualMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_IsDualMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_InternalSyncObject
// Il2CppName: get_InternalSyncObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)()>(&System::Net::Sockets::Socket::get_InternalSyncObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_InternalSyncObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_CleanedUp
// Il2CppName: get_CleanedUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_CleanedUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_CleanedUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_Available
// Il2CppName: get_Available
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_Available)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_Available", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_IsBound
// Il2CppName: get_IsBound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_IsBound)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_IsBound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_LocalEndPoint
// Il2CppName: get_LocalEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::EndPoint* (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_LocalEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_LocalEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_Blocking
// Il2CppName: get_Blocking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_Blocking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_Blocking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::set_Blocking
// Il2CppName: set_Blocking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(bool)>(&System::Net::Sockets::Socket::set_Blocking)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "set_Blocking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_Connected
// Il2CppName: get_Connected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::get_Connected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_Connected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::set_NoDelay
// Il2CppName: set_NoDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(bool)>(&System::Net::Sockets::Socket::set_NoDelay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "set_NoDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::get_FamilyHint
// Il2CppName: get_FamilyHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::Net::Sockets::Socket::get_FamilyHint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "get_FamilyHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Sockets::Socket::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Net::Sockets::Socket::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::Sockets::Socket::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>*, ::System::Net::Sockets::SocketFlags)>(&System::Net::Sockets::Socket::Send)> {
  static const MethodInfo* get() {
    static auto* buffers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})})->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffers, socketFlags});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags)>(&System::Net::Sockets::Socket::Send)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags)>(&System::Net::Sockets::Socket::Receive)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>*, ::System::Net::Sockets::SocketFlags)>(&System::Net::Sockets::Socket::Receive)> {
  static const MethodInfo* get() {
    static auto* buffers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})})->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffers, socketFlags});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ReceiveFrom
// Il2CppName: ReceiveFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::EndPoint*>)>(&System::Net::Sockets::Socket::ReceiveFrom)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* remoteEP = &::il2cpp_utils::GetClassFromName("System.Net", "EndPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ReceiveFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, size, socketFlags, remoteEP});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::IOControl
// Il2CppName: IOControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::Net::Sockets::IOControlCode, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&System::Net::Sockets::Socket::IOControl)> {
  static const MethodInfo* get() {
    static auto* ioControlCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "IOControlCode")->byval_arg;
    static auto* optionInValue = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* optionOutValue = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "IOControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ioControlCode, optionInValue, optionOutValue});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::SetIPProtectionLevel
// Il2CppName: SetIPProtectionLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::Net::Sockets::IPProtectionLevel)>(&System::Net::Sockets::Socket::SetIPProtectionLevel)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "IPProtectionLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "SetIPProtectionLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginSend
// Il2CppName: BeginSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Sockets::Socket::BeginSend)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndSend
// Il2CppName: EndSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::IAsyncResult*)>(&System::Net::Sockets::Socket::EndSend)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginReceive
// Il2CppName: BeginReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Sockets::Socket::BeginReceive)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndReceive
// Il2CppName: EndReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::IAsyncResult*)>(&System::Net::Sockets::Socket::EndReceive)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::InitializeSockets
// Il2CppName: InitializeSockets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Net::Sockets::Socket::InitializeSockets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "InitializeSockets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::InternalShutdown
// Il2CppName: InternalShutdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::Net::Sockets::SocketShutdown)>(&System::Net::Sockets::Socket::InternalShutdown)> {
  static const MethodInfo* get() {
    static auto* how = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketShutdown")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "InternalShutdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{how});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::SetSocketOption
// Il2CppName: SetSocketOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::Net::Sockets::SocketOptionLevel, ::System::Net::Sockets::SocketOptionName, int, bool)>(&System::Net::Sockets::Socket::SetSocketOption)> {
  static const MethodInfo* get() {
    static auto* optionLevel = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionLevel")->byval_arg;
    static auto* optionName = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionName")->byval_arg;
    static auto* optionValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* silent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "SetSocketOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{optionLevel, optionName, optionValue, silent});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::SocketDefaults
// Il2CppName: SocketDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::SocketDefaults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "SocketDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Socket_internal
// Il2CppName: Socket_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (System::Net::Sockets::Socket::*)(::System::Net::Sockets::AddressFamily, ::System::Net::Sockets::SocketType, ::System::Net::Sockets::ProtocolType, ByRef<int>)>(&System::Net::Sockets::Socket::Socket_internal)> {
  static const MethodInfo* get() {
    static auto* family = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "AddressFamily")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketType")->byval_arg;
    static auto* proto = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "ProtocolType")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Socket_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{family, type, proto, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Available_internal
// Il2CppName: Available_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Net::Sockets::SafeSocketHandle*, ByRef<int>)>(&System::Net::Sockets::Socket::Available_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Available_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Available_internal
// Il2CppName: Available_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ByRef<int>)>(&System::Net::Sockets::Socket::Available_internal)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Available_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::LocalEndPoint_internal
// Il2CppName: LocalEndPoint_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::SocketAddress* (*)(::System::Net::Sockets::SafeSocketHandle*, int, ByRef<int>)>(&System::Net::Sockets::Socket::LocalEndPoint_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* family = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "LocalEndPoint_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, family, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::LocalEndPoint_internal
// Il2CppName: LocalEndPoint_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::SocketAddress* (*)(::System::IntPtr, int, ByRef<int>)>(&System::Net::Sockets::Socket::LocalEndPoint_internal)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* family = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "LocalEndPoint_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, family, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Blocking_internal
// Il2CppName: Blocking_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SafeSocketHandle*, bool, ByRef<int>)>(&System::Net::Sockets::Socket::Blocking_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Blocking_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, block, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Blocking_internal
// Il2CppName: Blocking_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, bool, ByRef<int>)>(&System::Net::Sockets::Socket::Blocking_internal)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* block = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Blocking_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, block, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Poll
// Il2CppName: Poll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Net::Sockets::Socket::*)(int, ::System::Net::Sockets::SelectMode)>(&System::Net::Sockets::Socket::Poll)> {
  static const MethodInfo* get() {
    static auto* microSeconds = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SelectMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Poll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{microSeconds, mode});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Poll_internal
// Il2CppName: Poll_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Net::Sockets::SafeSocketHandle*, ::System::Net::Sockets::SelectMode, int, ByRef<int>)>(&System::Net::Sockets::Socket::Poll_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SelectMode")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Poll_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, mode, timeout, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Poll_internal
// Il2CppName: Poll_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ::System::Net::Sockets::SelectMode, int, ByRef<int>)>(&System::Net::Sockets::Socket::Poll_internal)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SelectMode")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Poll_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, mode, timeout, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::Socket* (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::Accept)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Accept
// Il2CppName: Accept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::Net::Sockets::Socket*)>(&System::Net::Sockets::Socket::Accept)> {
  static const MethodInfo* get() {
    static auto* acceptSocket = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "Socket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Accept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{acceptSocket});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginAccept
// Il2CppName: BeginAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Sockets::Socket::*)(::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Sockets::Socket::BeginAccept)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndAccept
// Il2CppName: EndAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::Socket* (System::Net::Sockets::Socket::*)(::System::IAsyncResult*)>(&System::Net::Sockets::Socket::EndAccept)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndAccept
// Il2CppName: EndAccept
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::Socket* (System::Net::Sockets::Socket::*)(ByRef<::ArrayW<uint8_t>>, ByRef<int>, ::System::IAsyncResult*)>(&System::Net::Sockets::Socket::EndAccept)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* bytesTransferred = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndAccept", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bytesTransferred, asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Accept_internal
// Il2CppName: Accept_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::SafeSocketHandle* (*)(::System::Net::Sockets::SafeSocketHandle*, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Accept_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Accept_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Accept_internal
// Il2CppName: Accept_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::System::IntPtr, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Accept_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Accept_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::Net::EndPoint*)>(&System::Net::Sockets::Socket::Bind)> {
  static const MethodInfo* get() {
    static auto* localEP = &::il2cpp_utils::GetClassFromName("System.Net", "EndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localEP});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Bind_internal
// Il2CppName: Bind_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SafeSocketHandle*, ::System::Net::SocketAddress*, ByRef<int>)>(&System::Net::Sockets::Socket::Bind_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* sa = &::il2cpp_utils::GetClassFromName("System.Net", "SocketAddress")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Bind_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, sa, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Bind_internal
// Il2CppName: Bind_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::System::Net::SocketAddress*, ByRef<int>)>(&System::Net::Sockets::Socket::Bind_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* sa = &::il2cpp_utils::GetClassFromName("System.Net", "SocketAddress")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Bind_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, sa, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Listen
// Il2CppName: Listen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(int)>(&System::Net::Sockets::Socket::Listen)> {
  static const MethodInfo* get() {
    static auto* backlog = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Listen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backlog});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Listen_internal
// Il2CppName: Listen_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SafeSocketHandle*, int, ByRef<int>)>(&System::Net::Sockets::Socket::Listen_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* backlog = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Listen_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, backlog, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Listen_internal
// Il2CppName: Listen_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, int, ByRef<int>)>(&System::Net::Sockets::Socket::Listen_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* backlog = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Listen_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, backlog, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::Net::EndPoint*)>(&System::Net::Sockets::Socket::Connect)> {
  static const MethodInfo* get() {
    static auto* remoteEP = &::il2cpp_utils::GetClassFromName("System.Net", "EndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEP});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginConnect
// Il2CppName: BeginConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Sockets::Socket::*)(::StringW, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Sockets::Socket::BeginConnect)> {
  static const MethodInfo* get() {
    static auto* host = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* requestCallback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{host, port, requestCallback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginConnect
// Il2CppName: BeginConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Sockets::Socket::*)(::System::Net::EndPoint*, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Sockets::Socket::BeginConnect)> {
  static const MethodInfo* get() {
    static auto* remoteEP = &::il2cpp_utils::GetClassFromName("System.Net", "EndPoint")->byval_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEP, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginConnect
// Il2CppName: BeginConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Sockets::Socket::*)(::ArrayW<::System::Net::IPAddress*>, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Sockets::Socket::BeginConnect)> {
  static const MethodInfo* get() {
    static auto* addresses = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Net", "IPAddress"), 1)->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* requestCallback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{addresses, port, requestCallback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginMConnect
// Il2CppName: BeginMConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SocketAsyncResult*)>(&System::Net::Sockets::Socket::BeginMConnect)> {
  static const MethodInfo* get() {
    static auto* sockares = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginMConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sockares});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginSConnect
// Il2CppName: BeginSConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SocketAsyncResult*)>(&System::Net::Sockets::Socket::BeginSConnect)> {
  static const MethodInfo* get() {
    static auto* sockares = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginSConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sockares});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndConnect
// Il2CppName: EndConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::IAsyncResult*)>(&System::Net::Sockets::Socket::EndConnect)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Connect_internal
// Il2CppName: Connect_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SafeSocketHandle*, ::System::Net::SocketAddress*, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Connect_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* sa = &::il2cpp_utils::GetClassFromName("System.Net", "SocketAddress")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Connect_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, sa, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Connect_internal
// Il2CppName: Connect_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::System::Net::SocketAddress*, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Connect_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* sa = &::il2cpp_utils::GetClassFromName("System.Net", "SocketAddress")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Connect_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, sa, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(bool)>(&System::Net::Sockets::Socket::Disconnect)> {
  static const MethodInfo* get() {
    static auto* reuseSocket = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reuseSocket});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndDisconnect
// Il2CppName: EndDisconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::IAsyncResult*)>(&System::Net::Sockets::Socket::EndDisconnect)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndDisconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Disconnect_internal
// Il2CppName: Disconnect_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SafeSocketHandle*, bool, ByRef<int>)>(&System::Net::Sockets::Socket::Disconnect_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* reuse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Disconnect_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, reuse, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Disconnect_internal
// Il2CppName: Disconnect_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, bool, ByRef<int>)>(&System::Net::Sockets::Socket::Disconnect_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* reuse = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Disconnect_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, reuse, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::Sockets::SocketError>)>(&System::Net::Sockets::Socket::Receive)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags, errorCode});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Receive
// Il2CppName: Receive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>*, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::Sockets::SocketError>)>(&System::Net::Sockets::Socket::Receive)> {
  static const MethodInfo* get() {
    static auto* buffers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})})->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Receive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffers, socketFlags, errorCode});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginReceive
// Il2CppName: BeginReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::Sockets::SocketError>, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Sockets::Socket::BeginReceive)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags, errorCode, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndReceive
// Il2CppName: EndReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::IAsyncResult*, ByRef<::System::Net::Sockets::SocketError>)>(&System::Net::Sockets::Socket::EndReceive)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult, errorCode});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Receive_internal
// Il2CppName: Receive_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Net::Sockets::SafeSocketHandle*, ::System::Net::Sockets::Socket::WSABUF*, int, ::System::Net::Sockets::SocketFlags, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Receive_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* bufarray = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Net.Sockets", "Socket/WSABUF"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Receive_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, bufarray, count, flags, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Receive_internal
// Il2CppName: Receive_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::System::Net::Sockets::Socket::WSABUF*, int, ::System::Net::Sockets::SocketFlags, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Receive_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bufarray = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Net.Sockets", "Socket/WSABUF"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Receive_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, bufarray, count, flags, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Receive_internal
// Il2CppName: Receive_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Net::Sockets::SafeSocketHandle*, uint8_t*, int, ::System::Net::Sockets::SocketFlags, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Receive_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Receive_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, buffer, count, flags, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Receive_internal
// Il2CppName: Receive_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, uint8_t*, int, ::System::Net::Sockets::SocketFlags, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Receive_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Receive_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, buffer, count, flags, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ReceiveFrom
// Il2CppName: ReceiveFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::EndPoint*>)>(&System::Net::Sockets::Socket::ReceiveFrom)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* remoteEP = &::il2cpp_utils::GetClassFromName("System.Net", "EndPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ReceiveFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags, remoteEP});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ReceiveFrom
// Il2CppName: ReceiveFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::EndPoint*>, ByRef<::System::Net::Sockets::SocketError>)>(&System::Net::Sockets::Socket::ReceiveFrom)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* remoteEP = &::il2cpp_utils::GetClassFromName("System.Net", "EndPoint")->this_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ReceiveFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags, remoteEP, errorCode});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndReceiveFrom
// Il2CppName: EndReceiveFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::IAsyncResult*, ByRef<::System::Net::EndPoint*>)>(&System::Net::Sockets::Socket::EndReceiveFrom)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "EndPoint")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndReceiveFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult, endPoint});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ReceiveFrom_internal
// Il2CppName: ReceiveFrom_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Net::Sockets::SafeSocketHandle*, uint8_t*, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::SocketAddress*>, ByRef<int>, bool)>(&System::Net::Sockets::Socket::ReceiveFrom_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* sockaddr = &::il2cpp_utils::GetClassFromName("System.Net", "SocketAddress")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ReceiveFrom_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, buffer, count, flags, sockaddr, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ReceiveFrom_internal
// Il2CppName: ReceiveFrom_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, uint8_t*, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::SocketAddress*>, ByRef<int>, bool)>(&System::Net::Sockets::Socket::ReceiveFrom_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* sockaddr = &::il2cpp_utils::GetClassFromName("System.Net", "SocketAddress")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ReceiveFrom_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, buffer, count, flags, sockaddr, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::Sockets::SocketError>)>(&System::Net::Sockets::Socket::Send)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags, errorCode});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::Collections::Generic::IList_1<::System::ArraySegment_1<uint8_t>>*, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::Sockets::SocketError>)>(&System::Net::Sockets::Socket::Send)> {
  static const MethodInfo* get() {
    static auto* buffers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})})->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffers, socketFlags, errorCode});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginSend
// Il2CppName: BeginSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int, ::System::Net::Sockets::SocketFlags, ByRef<::System::Net::Sockets::SocketError>, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::Net::Sockets::Socket::BeginSend)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* socketFlags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    static auto* callback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size, socketFlags, errorCode, callback, state});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::BeginSendCallback
// Il2CppName: BeginSendCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SocketAsyncResult*, int)>(&System::Net::Sockets::Socket::BeginSendCallback)> {
  static const MethodInfo* get() {
    static auto* sockares = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketAsyncResult")->byval_arg;
    static auto* sent_so_far = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "BeginSendCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sockares, sent_so_far});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndSend
// Il2CppName: EndSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::IAsyncResult*, ByRef<::System::Net::Sockets::SocketError>)>(&System::Net::Sockets::Socket::EndSend)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult, errorCode});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Send_internal
// Il2CppName: Send_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Net::Sockets::SafeSocketHandle*, ::System::Net::Sockets::Socket::WSABUF*, int, ::System::Net::Sockets::SocketFlags, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Send_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* bufarray = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Net.Sockets", "Socket/WSABUF"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Send_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, bufarray, count, flags, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Send_internal
// Il2CppName: Send_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::System::Net::Sockets::Socket::WSABUF*, int, ::System::Net::Sockets::SocketFlags, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Send_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* bufarray = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System.Net.Sockets", "Socket/WSABUF"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Send_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, bufarray, count, flags, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Send_internal
// Il2CppName: Send_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Net::Sockets::SafeSocketHandle*, uint8_t*, int, ::System::Net::Sockets::SocketFlags, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Send_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Send_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, buffer, count, flags, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Send_internal
// Il2CppName: Send_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, uint8_t*, int, ::System::Net::Sockets::SocketFlags, ByRef<int>, bool)>(&System::Net::Sockets::Socket::Send_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* buffer = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Byte"))->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketFlags")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* blocking = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Send_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, buffer, count, flags, error, blocking});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::EndSendTo
// Il2CppName: EndSendTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(::System::IAsyncResult*)>(&System::Net::Sockets::Socket::EndSendTo)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "EndSendTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::GetSocketOption
// Il2CppName: GetSocketOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Net::Sockets::Socket::*)(::System::Net::Sockets::SocketOptionLevel, ::System::Net::Sockets::SocketOptionName)>(&System::Net::Sockets::Socket::GetSocketOption)> {
  static const MethodInfo* get() {
    static auto* optionLevel = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionLevel")->byval_arg;
    static auto* optionName = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "GetSocketOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{optionLevel, optionName});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::GetSocketOption_obj_internal
// Il2CppName: GetSocketOption_obj_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SafeSocketHandle*, ::System::Net::Sockets::SocketOptionLevel, ::System::Net::Sockets::SocketOptionName, ByRef<::Il2CppObject*>, ByRef<int>)>(&System::Net::Sockets::Socket::GetSocketOption_obj_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionLevel")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionName")->byval_arg;
    static auto* obj_val = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "GetSocketOption_obj_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, level, name, obj_val, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::GetSocketOption_obj_internal
// Il2CppName: GetSocketOption_obj_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::System::Net::Sockets::SocketOptionLevel, ::System::Net::Sockets::SocketOptionName, ByRef<::Il2CppObject*>, ByRef<int>)>(&System::Net::Sockets::Socket::GetSocketOption_obj_internal)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionLevel")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionName")->byval_arg;
    static auto* obj_val = &::il2cpp_utils::GetClassFromName("System", "Object")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "GetSocketOption_obj_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, level, name, obj_val, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::SetSocketOption
// Il2CppName: SetSocketOption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::Net::Sockets::SocketOptionLevel, ::System::Net::Sockets::SocketOptionName, int)>(&System::Net::Sockets::Socket::SetSocketOption)> {
  static const MethodInfo* get() {
    static auto* optionLevel = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionLevel")->byval_arg;
    static auto* optionName = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionName")->byval_arg;
    static auto* optionValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "SetSocketOption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{optionLevel, optionName, optionValue});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::SetSocketOption_internal
// Il2CppName: SetSocketOption_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SafeSocketHandle*, ::System::Net::Sockets::SocketOptionLevel, ::System::Net::Sockets::SocketOptionName, ::Il2CppObject*, ::ArrayW<uint8_t>, int, ByRef<int>)>(&System::Net::Sockets::Socket::SetSocketOption_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionLevel")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionName")->byval_arg;
    static auto* obj_val = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* byte_val = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* int_val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "SetSocketOption_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, level, name, obj_val, byte_val, int_val, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::SetSocketOption_internal
// Il2CppName: SetSocketOption_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::System::Net::Sockets::SocketOptionLevel, ::System::Net::Sockets::SocketOptionName, ::Il2CppObject*, ::ArrayW<uint8_t>, int, ByRef<int>)>(&System::Net::Sockets::Socket::SetSocketOption_internal)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* level = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionLevel")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketOptionName")->byval_arg;
    static auto* obj_val = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* byte_val = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* int_val = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "SetSocketOption_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, level, name, obj_val, byte_val, int_val, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::IOControl
// Il2CppName: IOControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Net::Sockets::Socket::*)(int, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&System::Net::Sockets::Socket::IOControl)> {
  static const MethodInfo* get() {
    static auto* ioControlCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* optionInValue = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* optionOutValue = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "IOControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ioControlCode, optionInValue, optionOutValue});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::IOControl_internal
// Il2CppName: IOControl_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Net::Sockets::SafeSocketHandle*, int, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ByRef<int>)>(&System::Net::Sockets::Socket::IOControl_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* ioctl_code = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* input = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* output = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "IOControl_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, ioctl_code, input, output, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::IOControl_internal
// Il2CppName: IOControl_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, int, ::ArrayW<uint8_t>, ::ArrayW<uint8_t>, ByRef<int>)>(&System::Net::Sockets::Socket::IOControl_internal)> {
  static const MethodInfo* get() {
    static auto* sock = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* ioctl_code = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* input = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* output = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "IOControl_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sock, ioctl_code, input, output, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(int)>(&System::Net::Sockets::Socket::Close)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Close_internal
// Il2CppName: Close_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ByRef<int>)>(&System::Net::Sockets::Socket::Close_internal)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Close_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Shutdown_internal
// Il2CppName: Shutdown_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Net::Sockets::SafeSocketHandle*, ::System::Net::Sockets::SocketShutdown, ByRef<int>)>(&System::Net::Sockets::Socket::Shutdown_internal)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SafeSocketHandle")->byval_arg;
    static auto* how = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketShutdown")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Shutdown_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, how, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Shutdown_internal
// Il2CppName: Shutdown_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr, ::System::Net::Sockets::SocketShutdown, ByRef<int>)>(&System::Net::Sockets::Socket::Shutdown_internal)> {
  static const MethodInfo* get() {
    static auto* socket = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* how = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketShutdown")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Shutdown_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{socket, how, error});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(bool)>(&System::Net::Sockets::Socket::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Linger
// Il2CppName: Linger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::IntPtr)>(&System::Net::Sockets::Socket::Linger)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Linger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ThrowIfDisposedAndClosed
// Il2CppName: ThrowIfDisposedAndClosed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::ThrowIfDisposedAndClosed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ThrowIfDisposedAndClosed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ThrowIfBufferNull
// Il2CppName: ThrowIfBufferNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>)>(&System::Net::Sockets::Socket::ThrowIfBufferNull)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ThrowIfBufferNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ThrowIfBufferOutOfRange
// Il2CppName: ThrowIfBufferOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::ArrayW<uint8_t>, int, int)>(&System::Net::Sockets::Socket::ThrowIfBufferOutOfRange)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ThrowIfBufferOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, size});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ThrowIfUdp
// Il2CppName: ThrowIfUdp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::ThrowIfUdp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ThrowIfUdp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::ValidateEndIAsyncResult
// Il2CppName: ValidateEndIAsyncResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::Sockets::SocketAsyncResult* (System::Net::Sockets::Socket::*)(::System::IAsyncResult*, ::StringW, ::StringW)>(&System::Net::Sockets::Socket::ValidateEndIAsyncResult)> {
  static const MethodInfo* get() {
    static auto* ares = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* argName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "ValidateEndIAsyncResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ares, methodName, argName});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::QueueIOSelectorJob
// Il2CppName: QueueIOSelectorJob
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)(::System::Threading::SemaphoreSlim*, ::System::IntPtr, ::System::IOSelectorJob*)>(&System::Net::Sockets::Socket::QueueIOSelectorJob)> {
  static const MethodInfo* get() {
    static auto* sem = &::il2cpp_utils::GetClassFromName("System.Threading", "SemaphoreSlim")->byval_arg;
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* job = &::il2cpp_utils::GetClassFromName("System", "IOSelectorJob")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "QueueIOSelectorJob", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sem, handle, job});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::RemapIPEndPoint
// Il2CppName: RemapIPEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPEndPoint* (System::Net::Sockets::Socket::*)(::System::Net::IPEndPoint*)>(&System::Net::Sockets::Socket::RemapIPEndPoint)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "RemapIPEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::cancel_blocking_socket_operation
// Il2CppName: cancel_blocking_socket_operation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Thread*)>(&System::Net::Sockets::Socket::cancel_blocking_socket_operation)> {
  static const MethodInfo* get() {
    static auto* thread = &::il2cpp_utils::GetClassFromName("System.Threading", "Thread")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "cancel_blocking_socket_operation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thread});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::IsProtocolSupported_internal
// Il2CppName: IsProtocolSupported_internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Net::NetworkInformation::NetworkInterfaceComponent)>(&System::Net::Sockets::Socket::IsProtocolSupported_internal)> {
  static const MethodInfo* get() {
    static auto* networkInterface = &::il2cpp_utils::GetClassFromName("System.Net.NetworkInformation", "NetworkInterfaceComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "IsProtocolSupported_internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkInterface});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::IsProtocolSupported
// Il2CppName: IsProtocolSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Net::NetworkInformation::NetworkInterfaceComponent)>(&System::Net::Sockets::Socket::IsProtocolSupported)> {
  static const MethodInfo* get() {
    static auto* networkInterface = &::il2cpp_utils::GetClassFromName("System.Net.NetworkInformation", "NetworkInterfaceComponent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "IsProtocolSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{networkInterface});
  }
};
// Writing MetadataGetter for method: System::Net::Sockets::Socket::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Net::Sockets::Socket::*)()>(&System::Net::Sockets::Socket::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Net::Sockets::Socket*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
