// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: InputBuffer
  class InputBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::InputBuffer);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::InputBuffer*, "System.IO.Compression", "InputBuffer");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.InputBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  class InputBuffer : public ::Il2CppObject {
    public:
    public:
    // private System.Byte[] _buffer
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _start
    // Size: 0x4
    // Offset: 0x18
    int start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _end
    // Size: 0x4
    // Offset: 0x1C
    int end;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 _bitBuffer
    // Size: 0x4
    // Offset: 0x20
    uint bitBuffer;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Int32 _bitsInBuffer
    // Size: 0x4
    // Offset: 0x24
    int bitsInBuffer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Byte[] _buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__buffer();
    // Get instance field reference: private System.Int32 _start
    [[deprecated("Use field access instead!")]] int& dyn__start();
    // Get instance field reference: private System.Int32 _end
    [[deprecated("Use field access instead!")]] int& dyn__end();
    // Get instance field reference: private System.UInt32 _bitBuffer
    [[deprecated("Use field access instead!")]] uint& dyn__bitBuffer();
    // Get instance field reference: private System.Int32 _bitsInBuffer
    [[deprecated("Use field access instead!")]] int& dyn__bitsInBuffer();
    // public System.Int32 get_AvailableBits()
    // Offset: 0x16987BC
    int get_AvailableBits();
    // public System.Int32 get_AvailableBytes()
    // Offset: 0x16987C4
    int get_AvailableBytes();
    // public System.Void .ctor()
    // Offset: 0x1696F90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputBuffer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Compression::InputBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputBuffer*, creationType>()));
    }
    // public System.Boolean EnsureBitsAvailable(System.Int32 count)
    // Offset: 0x16974AC
    bool EnsureBitsAvailable(int count);
    // public System.UInt32 TryLoad16Bits()
    // Offset: 0x1696D84
    uint TryLoad16Bits();
    // private System.UInt32 GetBitMask(System.Int32 count)
    // Offset: 0x16987F4
    uint GetBitMask(int count);
    // public System.Int32 GetBits(System.Int32 count)
    // Offset: 0x1697568
    int GetBits(int count);
    // public System.Int32 CopyTo(System.Byte[] output, System.Int32 offset, System.Int32 length)
    // Offset: 0x1698804
    int CopyTo(::ArrayW<uint8_t> output, int offset, int length);
    // public System.Boolean NeedsInput()
    // Offset: 0x16987E4
    bool NeedsInput();
    // public System.Void SetInput(System.Byte[] buffer, System.Int32 offset, System.Int32 length)
    // Offset: 0x1696FC0
    void SetInput(::ArrayW<uint8_t> buffer, int offset, int length);
    // public System.Void SkipBits(System.Int32 n)
    // Offset: 0x1696E80
    void SkipBits(int n);
    // public System.Void SkipToByteBoundary()
    // Offset: 0x1698330
    void SkipToByteBoundary();
  }; // System.IO.Compression.InputBuffer
  #pragma pack(pop)
  static check_size<sizeof(InputBuffer), 36 + sizeof(int)> __System_IO_Compression_InputBufferSizeCheck;
  static_assert(sizeof(InputBuffer) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::get_AvailableBits
// Il2CppName: get_AvailableBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::InputBuffer::*)()>(&System::IO::Compression::InputBuffer::get_AvailableBits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "get_AvailableBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::get_AvailableBytes
// Il2CppName: get_AvailableBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::InputBuffer::*)()>(&System::IO::Compression::InputBuffer::get_AvailableBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "get_AvailableBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::EnsureBitsAvailable
// Il2CppName: EnsureBitsAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::InputBuffer::*)(int)>(&System::IO::Compression::InputBuffer::EnsureBitsAvailable)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "EnsureBitsAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::TryLoad16Bits
// Il2CppName: TryLoad16Bits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::IO::Compression::InputBuffer::*)()>(&System::IO::Compression::InputBuffer::TryLoad16Bits)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "TryLoad16Bits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::GetBitMask
// Il2CppName: GetBitMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::IO::Compression::InputBuffer::*)(int)>(&System::IO::Compression::InputBuffer::GetBitMask)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "GetBitMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::GetBits
// Il2CppName: GetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::InputBuffer::*)(int)>(&System::IO::Compression::InputBuffer::GetBits)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "GetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::InputBuffer::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::InputBuffer::CopyTo)> {
  static const MethodInfo* get() {
    static auto* output = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output, offset, length});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::NeedsInput
// Il2CppName: NeedsInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::InputBuffer::*)()>(&System::IO::Compression::InputBuffer::NeedsInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "NeedsInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::SetInput
// Il2CppName: SetInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::InputBuffer::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::InputBuffer::SetInput)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "SetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, length});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::SkipBits
// Il2CppName: SkipBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::InputBuffer::*)(int)>(&System::IO::Compression::InputBuffer::SkipBits)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "SkipBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InputBuffer::SkipToByteBoundary
// Il2CppName: SkipToByteBoundary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::InputBuffer::*)()>(&System::IO::Compression::InputBuffer::SkipToByteBoundary)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InputBuffer*), "SkipToByteBoundary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
