// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: BinaryReader
  class BinaryReader;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: ZipEndOfCentralDirectoryBlock
  struct ZipEndOfCentralDirectoryBlock;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::ZipEndOfCentralDirectoryBlock, "System.IO.Compression", "ZipEndOfCentralDirectoryBlock");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x20
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IO.Compression.ZipEndOfCentralDirectoryBlock
  // [TokenAttribute] Offset: FFFFFFFF
  struct ZipEndOfCentralDirectoryBlock/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 Signature
    // Size: 0x4
    // Offset: 0x0
    uint Signature;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt16 NumberOfThisDisk
    // Size: 0x2
    // Offset: 0x4
    uint16_t NumberOfThisDisk;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 NumberOfTheDiskWithTheStartOfTheCentralDirectory
    // Size: 0x2
    // Offset: 0x6
    uint16_t NumberOfTheDiskWithTheStartOfTheCentralDirectory;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 NumberOfEntriesInTheCentralDirectoryOnThisDisk
    // Size: 0x2
    // Offset: 0x8
    uint16_t NumberOfEntriesInTheCentralDirectoryOnThisDisk;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 NumberOfEntriesInTheCentralDirectory
    // Size: 0x2
    // Offset: 0xA
    uint16_t NumberOfEntriesInTheCentralDirectory;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt32 SizeOfCentralDirectory
    // Size: 0x4
    // Offset: 0xC
    uint SizeOfCentralDirectory;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber
    // Size: 0x4
    // Offset: 0x10
    uint OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber and: ArchiveComment
    char __padding6[0x4] = {};
    // public System.Byte[] ArchiveComment
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<uint8_t> ArchiveComment;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    public:
    // Creating value type constructor for type: ZipEndOfCentralDirectoryBlock
    constexpr ZipEndOfCentralDirectoryBlock(uint Signature_ = {}, uint16_t NumberOfThisDisk_ = {}, uint16_t NumberOfTheDiskWithTheStartOfTheCentralDirectory_ = {}, uint16_t NumberOfEntriesInTheCentralDirectoryOnThisDisk_ = {}, uint16_t NumberOfEntriesInTheCentralDirectory_ = {}, uint SizeOfCentralDirectory_ = {}, uint OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber_ = {}, ::ArrayW<uint8_t> ArchiveComment_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr))) noexcept : Signature{Signature_}, NumberOfThisDisk{NumberOfThisDisk_}, NumberOfTheDiskWithTheStartOfTheCentralDirectory{NumberOfTheDiskWithTheStartOfTheCentralDirectory_}, NumberOfEntriesInTheCentralDirectoryOnThisDisk{NumberOfEntriesInTheCentralDirectoryOnThisDisk_}, NumberOfEntriesInTheCentralDirectory{NumberOfEntriesInTheCentralDirectory_}, SizeOfCentralDirectory{SizeOfCentralDirectory_}, OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber{OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber_}, ArchiveComment{ArchiveComment_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 Signature
    [[deprecated("Use field access instead!")]] uint& dyn_Signature();
    // Get instance field reference: public System.UInt16 NumberOfThisDisk
    [[deprecated("Use field access instead!")]] uint16_t& dyn_NumberOfThisDisk();
    // Get instance field reference: public System.UInt16 NumberOfTheDiskWithTheStartOfTheCentralDirectory
    [[deprecated("Use field access instead!")]] uint16_t& dyn_NumberOfTheDiskWithTheStartOfTheCentralDirectory();
    // Get instance field reference: public System.UInt16 NumberOfEntriesInTheCentralDirectoryOnThisDisk
    [[deprecated("Use field access instead!")]] uint16_t& dyn_NumberOfEntriesInTheCentralDirectoryOnThisDisk();
    // Get instance field reference: public System.UInt16 NumberOfEntriesInTheCentralDirectory
    [[deprecated("Use field access instead!")]] uint16_t& dyn_NumberOfEntriesInTheCentralDirectory();
    // Get instance field reference: public System.UInt32 SizeOfCentralDirectory
    [[deprecated("Use field access instead!")]] uint& dyn_SizeOfCentralDirectory();
    // Get instance field reference: public System.UInt32 OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber
    [[deprecated("Use field access instead!")]] uint& dyn_OffsetOfStartOfCentralDirectoryWithRespectToTheStartingDiskNumber();
    // Get instance field reference: public System.Byte[] ArchiveComment
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_ArchiveComment();
    // static public System.Void WriteBlock(System.IO.Stream stream, System.Int64 numberOfEntries, System.Int64 startOfCentralDirectory, System.Int64 sizeOfCentralDirectory, System.Byte[] archiveComment)
    // Offset: 0x169E1D4
    static void WriteBlock(::System::IO::Stream* stream, int64_t numberOfEntries, int64_t startOfCentralDirectory, int64_t sizeOfCentralDirectory, ::ArrayW<uint8_t> archiveComment);
    // static public System.Boolean TryReadBlock(System.IO.BinaryReader reader, out System.IO.Compression.ZipEndOfCentralDirectoryBlock eocdBlock)
    // Offset: 0x169D7AC
    static bool TryReadBlock(::System::IO::BinaryReader* reader, ByRef<::System::IO::Compression::ZipEndOfCentralDirectoryBlock> eocdBlock);
  }; // System.IO.Compression.ZipEndOfCentralDirectoryBlock
  #pragma pack(pop)
  static check_size<sizeof(ZipEndOfCentralDirectoryBlock), 24 + sizeof(::ArrayW<uint8_t>)> __System_IO_Compression_ZipEndOfCentralDirectoryBlockSizeCheck;
  static_assert(sizeof(ZipEndOfCentralDirectoryBlock) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::ZipEndOfCentralDirectoryBlock::WriteBlock
// Il2CppName: WriteBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, int64_t, int64_t, int64_t, ::ArrayW<uint8_t>)>(&System::IO::Compression::ZipEndOfCentralDirectoryBlock::WriteBlock)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* numberOfEntries = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* startOfCentralDirectory = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* sizeOfCentralDirectory = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* archiveComment = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipEndOfCentralDirectoryBlock), "WriteBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, numberOfEntries, startOfCentralDirectory, sizeOfCentralDirectory, archiveComment});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipEndOfCentralDirectoryBlock::TryReadBlock
// Il2CppName: TryReadBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IO::BinaryReader*, ByRef<::System::IO::Compression::ZipEndOfCentralDirectoryBlock>)>(&System::IO::Compression::ZipEndOfCentralDirectoryBlock::TryReadBlock)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryReader")->byval_arg;
    static auto* eocdBlock = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "ZipEndOfCentralDirectoryBlock")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipEndOfCentralDirectoryBlock), "TryReadBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, eocdBlock});
  }
};
