// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.IO.Compression.CompressionMode
#include "System/IO/Compression/CompressionMode.hpp"
// Including type: System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues
#include "System/IO/Compression/ZipArchiveEntry.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO::Compression
namespace System::IO::Compression {
  // Forward declaring type: InflaterManaged
  class InflaterManaged;
  // Forward declaring type: DeflaterManaged
  class DeflaterManaged;
  // Forward declaring type: IFileFormatWriter
  class IFileFormatWriter;
  // Forward declaring type: IFileFormatReader
  class IFileFormatReader;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: DeflateManagedStream
  class DeflateManagedStream;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::DeflateManagedStream);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::DeflateManagedStream*, "System.IO.Compression", "DeflateManagedStream");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x62
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.DeflateManagedStream
  // [TokenAttribute] Offset: FFFFFFFF
  class DeflateManagedStream : public ::System::IO::Stream {
    public:
    // Nested type: ::System::IO::Compression::DeflateManagedStream::$ReadAsyncCore$d__40
    struct $ReadAsyncCore$d__40;
    // Nested type: ::System::IO::Compression::DeflateManagedStream::$WriteAsyncCore$d__47
    struct $WriteAsyncCore$d__47;
    public:
    // private System.IO.Stream _stream
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.IO.Compression.CompressionMode _mode
    // Size: 0x4
    // Offset: 0x30
    ::System::IO::Compression::CompressionMode mode;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::CompressionMode) == 0x4);
    // private System.Boolean _leaveOpen
    // Size: 0x1
    // Offset: 0x34
    bool leaveOpen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: leaveOpen and: inflater
    char __padding2[0x3] = {};
    // private System.IO.Compression.InflaterManaged _inflater
    // Size: 0x8
    // Offset: 0x38
    ::System::IO::Compression::InflaterManaged* inflater;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::InflaterManaged*) == 0x8);
    // private System.IO.Compression.DeflaterManaged _deflater
    // Size: 0x8
    // Offset: 0x40
    ::System::IO::Compression::DeflaterManaged* deflater;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::DeflaterManaged*) == 0x8);
    // private System.Byte[] _buffer
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _asyncOperations
    // Size: 0x4
    // Offset: 0x50
    int asyncOperations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: asyncOperations and: formatWriter
    char __padding6[0x4] = {};
    // private System.IO.Compression.IFileFormatWriter _formatWriter
    // Size: 0x8
    // Offset: 0x58
    ::System::IO::Compression::IFileFormatWriter* formatWriter;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::IFileFormatWriter*) == 0x8);
    // private System.Boolean _wroteHeader
    // Size: 0x1
    // Offset: 0x60
    bool wroteHeader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _wroteBytes
    // Size: 0x1
    // Offset: 0x61
    bool wroteBytes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.IO.Stream _stream
    [[deprecated]] ::System::IO::Stream*& dyn__stream();
    // Get instance field reference: private System.IO.Compression.CompressionMode _mode
    [[deprecated]] ::System::IO::Compression::CompressionMode& dyn__mode();
    // Get instance field reference: private System.Boolean _leaveOpen
    [[deprecated]] bool& dyn__leaveOpen();
    // Get instance field reference: private System.IO.Compression.InflaterManaged _inflater
    [[deprecated]] ::System::IO::Compression::InflaterManaged*& dyn__inflater();
    // Get instance field reference: private System.IO.Compression.DeflaterManaged _deflater
    [[deprecated]] ::System::IO::Compression::DeflaterManaged*& dyn__deflater();
    // Get instance field reference: private System.Byte[] _buffer
    [[deprecated]] ::ArrayW<uint8_t>& dyn__buffer();
    // Get instance field reference: private System.Int32 _asyncOperations
    [[deprecated]] int& dyn__asyncOperations();
    // Get instance field reference: private System.IO.Compression.IFileFormatWriter _formatWriter
    [[deprecated]] ::System::IO::Compression::IFileFormatWriter*& dyn__formatWriter();
    // Get instance field reference: private System.Boolean _wroteHeader
    [[deprecated]] bool& dyn__wroteHeader();
    // Get instance field reference: private System.Boolean _wroteBytes
    [[deprecated]] bool& dyn__wroteBytes();
    // System.Void .ctor(System.IO.Stream stream, System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues method)
    // Offset: 0x1693124
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeflateManagedStream* New_ctor(::System::IO::Stream* stream, ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues method) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Compression::DeflateManagedStream::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeflateManagedStream*, creationType>(stream, method)));
    }
    // System.Void InitializeInflater(System.IO.Stream stream, System.Boolean leaveOpen, System.IO.Compression.IFileFormatReader reader, System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues method)
    // Offset: 0x1693270
    void InitializeInflater(::System::IO::Stream* stream, bool leaveOpen, ::System::IO::Compression::IFileFormatReader* reader, ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues method);
    // private System.Void ValidateParameters(System.Byte[] array, System.Int32 offset, System.Int32 count)
    // Offset: 0x1693918
    void ValidateParameters(::ArrayW<uint8_t> array, int offset, int count);
    // private System.Void EnsureNotDisposed()
    // Offset: 0x169363C
    void EnsureNotDisposed();
    // static private System.Void ThrowStreamClosedException()
    // Offset: 0x1693C20
    static void ThrowStreamClosedException();
    // private System.Void EnsureDecompressionMode()
    // Offset: 0x1693900
    void EnsureDecompressionMode();
    // static private System.Void ThrowCannotReadFromDeflateManagedStreamException()
    // Offset: 0x1693C78
    static void ThrowCannotReadFromDeflateManagedStreamException();
    // private System.Void EnsureCompressionMode()
    // Offset: 0x1693CCC
    void EnsureCompressionMode();
    // static private System.Void ThrowCannotWriteToDeflateManagedStreamException()
    // Offset: 0x1693CE8
    static void ThrowCannotWriteToDeflateManagedStreamException();
    // private System.Threading.Tasks.Task`1<System.Int32> ReadAsyncCore(System.Threading.Tasks.Task`1<System.Int32> readTask, System.Byte[] array, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x16942A0
    ::System::Threading::Tasks::Task_1<int>* ReadAsyncCore(::System::Threading::Tasks::Task_1<int>* readTask, ::ArrayW<uint8_t> array, int offset, int count, ::System::Threading::CancellationToken cancellationToken);
    // private System.Void WriteDeflaterOutput()
    // Offset: 0x1694638
    void WriteDeflaterOutput();
    // private System.Void DoMaintenance(System.Byte[] array, System.Int32 offset, System.Int32 count)
    // Offset: 0x1694494
    void DoMaintenance(::ArrayW<uint8_t> array, int offset, int count);
    // private System.Void PurgeBuffers(System.Boolean disposing)
    // Offset: 0x16949CC
    void PurgeBuffers(bool disposing);
    // private System.Threading.Tasks.Task WriteAsyncCore(System.Byte[] array, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1694E90
    ::System::Threading::Tasks::Task* WriteAsyncCore(::ArrayW<uint8_t> array, int offset, int count, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task <>n__0(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1695188
    ::System::Threading::Tasks::Task* $$n__0(::ArrayW<uint8_t> buffer, int offset, int count, ::System::Threading::CancellationToken cancellationToken);
    // public override System.Boolean get_CanRead()
    // Offset: 0x16934CC
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x16934F4
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x1693520
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Int64 get_Length()
    // Offset: 0x1693528
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x169357C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x16935D0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Void Flush()
    // Offset: 0x1693624
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1693654
    // Implemented from: System.IO.Stream
    // Base method: System.Threading.Tasks.Task Stream::FlushAsync(System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task* FlushAsync(::System::Threading::CancellationToken cancellationToken);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x169370C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, ::System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x1693760
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
    // public override System.Int32 Read(System.Byte[] array, System.Int32 offset, System.Int32 count)
    // Offset: 0x16937B4
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] array, System.Int32 offset, System.Int32 count)
    int Read(::ArrayW<uint8_t> array, int offset, int count);
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    // Offset: 0x1693D3C
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    ::System::IAsyncResult* BeginRead(::ArrayW<uint8_t> buffer, int offset, int count, ::System::AsyncCallback* asyncCallback, ::Il2CppObject* asyncState);
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x1693EF0
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::EndRead(System.IAsyncResult asyncResult)
    int EndRead(::System::IAsyncResult* asyncResult);
    // public override System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] array, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1693F3C
    // Implemented from: System.IO.Stream
    // Base method: System.Threading.Tasks.Task`1<System.Int32> Stream::ReadAsync(System.Byte[] array, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task_1<int>* ReadAsync(::ArrayW<uint8_t> array, int offset, int count, ::System::Threading::CancellationToken cancellationToken);
    // public override System.Void Write(System.Byte[] array, System.Int32 offset, System.Int32 count)
    // Offset: 0x1694408
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] array, System.Int32 offset, System.Int32 count)
    void Write(::ArrayW<uint8_t> array, int offset, int count);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1694BDC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Threading.Tasks.Task WriteAsync(System.Byte[] array, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1694D48
    // Implemented from: System.IO.Stream
    // Base method: System.Threading.Tasks.Task Stream::WriteAsync(System.Byte[] array, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    ::System::Threading::Tasks::Task* WriteAsync(::ArrayW<uint8_t> array, int offset, int count, ::System::Threading::CancellationToken cancellationToken);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    // Offset: 0x1694FC8
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    ::System::IAsyncResult* BeginWrite(::ArrayW<uint8_t> buffer, int offset, int count, ::System::AsyncCallback* asyncCallback, ::Il2CppObject* asyncState);
    // public override System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x1695084
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::EndWrite(System.IAsyncResult asyncResult)
    void EndWrite(::System::IAsyncResult* asyncResult);
  }; // System.IO.Compression.DeflateManagedStream
  #pragma pack(pop)
  static check_size<sizeof(DeflateManagedStream), 97 + sizeof(bool)> __System_IO_Compression_DeflateManagedStreamSizeCheck;
  static_assert(sizeof(DeflateManagedStream) == 0x62);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::InitializeInflater
// Il2CppName: InitializeInflater
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(::System::IO::Stream*, bool, ::System::IO::Compression::IFileFormatReader*, ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues)>(&System::IO::Compression::DeflateManagedStream::InitializeInflater)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* leaveOpen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "IFileFormatReader")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "ZipArchiveEntry/CompressionMethodValues")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "InitializeInflater", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, leaveOpen, reader, method});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::ValidateParameters
// Il2CppName: ValidateParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::DeflateManagedStream::ValidateParameters)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "ValidateParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::EnsureNotDisposed
// Il2CppName: EnsureNotDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::EnsureNotDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "EnsureNotDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::ThrowStreamClosedException
// Il2CppName: ThrowStreamClosedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::Compression::DeflateManagedStream::ThrowStreamClosedException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "ThrowStreamClosedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::EnsureDecompressionMode
// Il2CppName: EnsureDecompressionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::EnsureDecompressionMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "EnsureDecompressionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::ThrowCannotReadFromDeflateManagedStreamException
// Il2CppName: ThrowCannotReadFromDeflateManagedStreamException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::Compression::DeflateManagedStream::ThrowCannotReadFromDeflateManagedStreamException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "ThrowCannotReadFromDeflateManagedStreamException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::EnsureCompressionMode
// Il2CppName: EnsureCompressionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::EnsureCompressionMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "EnsureCompressionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::ThrowCannotWriteToDeflateManagedStreamException
// Il2CppName: ThrowCannotWriteToDeflateManagedStreamException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::Compression::DeflateManagedStream::ThrowCannotWriteToDeflateManagedStreamException)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "ThrowCannotWriteToDeflateManagedStreamException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::ReadAsyncCore
// Il2CppName: ReadAsyncCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<int>* (System::IO::Compression::DeflateManagedStream::*)(::System::Threading::Tasks::Task_1<int>*, ::ArrayW<uint8_t>, int, int, ::System::Threading::CancellationToken)>(&System::IO::Compression::DeflateManagedStream::ReadAsyncCore)> {
  static const MethodInfo* get() {
    static auto* readTask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "ReadAsyncCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{readTask, array, offset, count, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::WriteDeflaterOutput
// Il2CppName: WriteDeflaterOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::WriteDeflaterOutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "WriteDeflaterOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::DoMaintenance
// Il2CppName: DoMaintenance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::DeflateManagedStream::DoMaintenance)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "DoMaintenance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::PurgeBuffers
// Il2CppName: PurgeBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(bool)>(&System::IO::Compression::DeflateManagedStream::PurgeBuffers)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "PurgeBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::WriteAsyncCore
// Il2CppName: WriteAsyncCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int, ::System::Threading::CancellationToken)>(&System::IO::Compression::DeflateManagedStream::WriteAsyncCore)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "WriteAsyncCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, count, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::$$n__0
// Il2CppName: <>n__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int, ::System::Threading::CancellationToken)>(&System::IO::Compression::DeflateManagedStream::$$n__0)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "<>n__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::get_CanSeek
// Il2CppName: get_CanSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::get_CanSeek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "get_CanSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(int64_t)>(&System::IO::Compression::DeflateManagedStream::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)()>(&System::IO::Compression::DeflateManagedStream::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::FlushAsync
// Il2CppName: FlushAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::IO::Compression::DeflateManagedStream::*)(::System::Threading::CancellationToken)>(&System::IO::Compression::DeflateManagedStream::FlushAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "FlushAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::IO::Compression::DeflateManagedStream::*)(int64_t, ::System::IO::SeekOrigin)>(&System::IO::Compression::DeflateManagedStream::Seek)> {
  static const MethodInfo* get() {
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offset, origin});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(int64_t)>(&System::IO::Compression::DeflateManagedStream::SetLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::DeflateManagedStream::Read)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::BeginRead
// Il2CppName: BeginRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::IO::Compression::DeflateManagedStream::BeginRead)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* asyncCallback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* asyncState = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "BeginRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, asyncCallback, asyncState});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::EndRead
// Il2CppName: EndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::DeflateManagedStream::*)(::System::IAsyncResult*)>(&System::IO::Compression::DeflateManagedStream::EndRead)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "EndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::ReadAsync
// Il2CppName: ReadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<int>* (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int, ::System::Threading::CancellationToken)>(&System::IO::Compression::DeflateManagedStream::ReadAsync)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "ReadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, count, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::DeflateManagedStream::Write)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(bool)>(&System::IO::Compression::DeflateManagedStream::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::WriteAsync
// Il2CppName: WriteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int, ::System::Threading::CancellationToken)>(&System::IO::Compression::DeflateManagedStream::WriteAsync)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "WriteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, offset, count, cancellationToken});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::BeginWrite
// Il2CppName: BeginWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IAsyncResult* (System::IO::Compression::DeflateManagedStream::*)(::ArrayW<uint8_t>, int, int, ::System::AsyncCallback*, ::Il2CppObject*)>(&System::IO::Compression::DeflateManagedStream::BeginWrite)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* asyncCallback = &::il2cpp_utils::GetClassFromName("System", "AsyncCallback")->byval_arg;
    static auto* asyncState = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "BeginWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count, asyncCallback, asyncState});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflateManagedStream::EndWrite
// Il2CppName: EndWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflateManagedStream::*)(::System::IAsyncResult*)>(&System::IO::Compression::DeflateManagedStream::EndWrite)> {
  static const MethodInfo* get() {
    static auto* asyncResult = &::il2cpp_utils::GetClassFromName("System", "IAsyncResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflateManagedStream*), "EndWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncResult});
  }
};
