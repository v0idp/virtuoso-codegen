// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO::Compression
namespace System::IO::Compression {
  // Forward declaring type: FastEncoder
  class FastEncoder;
  // Forward declaring type: CopyEncoder
  class CopyEncoder;
  // Forward declaring type: DeflateInput
  class DeflateInput;
  // Forward declaring type: OutputBuffer
  class OutputBuffer;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: DeflaterManaged
  class DeflaterManaged;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::DeflaterManaged);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::DeflaterManaged*, "System.IO.Compression", "DeflaterManaged");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.DeflaterManaged
  // [TokenAttribute] Offset: FFFFFFFF
  class DeflaterManaged : public ::Il2CppObject {
    public:
    // Nested type: ::System::IO::Compression::DeflaterManaged::DeflaterState
    struct DeflaterState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState
    // [TokenAttribute] Offset: FFFFFFFF
    struct DeflaterState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DeflaterState
      constexpr DeflaterState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState NotStarted
      static constexpr const int NotStarted = 0;
      // Get static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState NotStarted
      static ::System::IO::Compression::DeflaterManaged::DeflaterState _get_NotStarted();
      // Set static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState NotStarted
      static void _set_NotStarted(::System::IO::Compression::DeflaterManaged::DeflaterState value);
      // static field const value: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState SlowDownForIncompressible1
      static constexpr const int SlowDownForIncompressible1 = 1;
      // Get static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState SlowDownForIncompressible1
      static ::System::IO::Compression::DeflaterManaged::DeflaterState _get_SlowDownForIncompressible1();
      // Set static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState SlowDownForIncompressible1
      static void _set_SlowDownForIncompressible1(::System::IO::Compression::DeflaterManaged::DeflaterState value);
      // static field const value: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState SlowDownForIncompressible2
      static constexpr const int SlowDownForIncompressible2 = 2;
      // Get static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState SlowDownForIncompressible2
      static ::System::IO::Compression::DeflaterManaged::DeflaterState _get_SlowDownForIncompressible2();
      // Set static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState SlowDownForIncompressible2
      static void _set_SlowDownForIncompressible2(::System::IO::Compression::DeflaterManaged::DeflaterState value);
      // static field const value: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState StartingSmallData
      static constexpr const int StartingSmallData = 3;
      // Get static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState StartingSmallData
      static ::System::IO::Compression::DeflaterManaged::DeflaterState _get_StartingSmallData();
      // Set static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState StartingSmallData
      static void _set_StartingSmallData(::System::IO::Compression::DeflaterManaged::DeflaterState value);
      // static field const value: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState CompressThenCheck
      static constexpr const int CompressThenCheck = 4;
      // Get static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState CompressThenCheck
      static ::System::IO::Compression::DeflaterManaged::DeflaterState _get_CompressThenCheck();
      // Set static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState CompressThenCheck
      static void _set_CompressThenCheck(::System::IO::Compression::DeflaterManaged::DeflaterState value);
      // static field const value: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState CheckingForIncompressible
      static constexpr const int CheckingForIncompressible = 5;
      // Get static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState CheckingForIncompressible
      static ::System::IO::Compression::DeflaterManaged::DeflaterState _get_CheckingForIncompressible();
      // Set static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState CheckingForIncompressible
      static void _set_CheckingForIncompressible(::System::IO::Compression::DeflaterManaged::DeflaterState value);
      // static field const value: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState HandlingSmallData
      static constexpr const int HandlingSmallData = 6;
      // Get static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState HandlingSmallData
      static ::System::IO::Compression::DeflaterManaged::DeflaterState _get_HandlingSmallData();
      // Set static field: static public System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState HandlingSmallData
      static void _set_HandlingSmallData(::System::IO::Compression::DeflaterManaged::DeflaterState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState
    #pragma pack(pop)
    static check_size<sizeof(DeflaterManaged::DeflaterState), 0 + sizeof(int)> __System_IO_Compression_DeflaterManaged_DeflaterStateSizeCheck;
    static_assert(sizeof(DeflaterManaged::DeflaterState) == 0x4);
    public:
    // private readonly System.IO.Compression.FastEncoder _deflateEncoder
    // Size: 0x8
    // Offset: 0x10
    ::System::IO::Compression::FastEncoder* deflateEncoder;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::FastEncoder*) == 0x8);
    // private readonly System.IO.Compression.CopyEncoder _copyEncoder
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Compression::CopyEncoder* copyEncoder;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::CopyEncoder*) == 0x8);
    // private readonly System.IO.Compression.DeflateInput _input
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::Compression::DeflateInput* input;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::DeflateInput*) == 0x8);
    // private readonly System.IO.Compression.OutputBuffer _output
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Compression::OutputBuffer* output;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::OutputBuffer*) == 0x8);
    // private System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState _processingState
    // Size: 0x4
    // Offset: 0x30
    ::System::IO::Compression::DeflaterManaged::DeflaterState processingState;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::DeflaterManaged::DeflaterState) == 0x4);
    // Padding between fields: processingState and: inputFromHistory
    char __padding4[0x4] = {};
    // private System.IO.Compression.DeflateInput _inputFromHistory
    // Size: 0x8
    // Offset: 0x38
    ::System::IO::Compression::DeflateInput* inputFromHistory;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::DeflateInput*) == 0x8);
    public:
    // Get instance field reference: private readonly System.IO.Compression.FastEncoder _deflateEncoder
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::FastEncoder*& dyn__deflateEncoder();
    // Get instance field reference: private readonly System.IO.Compression.CopyEncoder _copyEncoder
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::CopyEncoder*& dyn__copyEncoder();
    // Get instance field reference: private readonly System.IO.Compression.DeflateInput _input
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::DeflateInput*& dyn__input();
    // Get instance field reference: private readonly System.IO.Compression.OutputBuffer _output
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::OutputBuffer*& dyn__output();
    // Get instance field reference: private System.IO.Compression.DeflaterManaged/System.IO.Compression.DeflaterState _processingState
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::DeflaterManaged::DeflaterState& dyn__processingState();
    // Get instance field reference: private System.IO.Compression.DeflateInput _inputFromHistory
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::DeflateInput*& dyn__inputFromHistory();
    // System.Boolean NeedsInput()
    // Offset: 0x1694984
    bool NeedsInput();
    // System.Void SetInput(System.Byte[] inputBuffer, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x16946AC
    void SetInput(::ArrayW<uint8_t> inputBuffer, int startIndex, int count);
    // System.Int32 GetDeflateOutput(System.Byte[] outputBuffer)
    // Offset: 0x1694718
    int GetDeflateOutput(::ArrayW<uint8_t> outputBuffer);
    // System.Boolean Finish(System.Byte[] outputBuffer, out System.Int32 bytesRead)
    // Offset: 0x1694B54
    bool Finish(::ArrayW<uint8_t> outputBuffer, ByRef<int> bytesRead);
    // private System.Boolean UseCompressed(System.Double ratio)
    // Offset: 0x16951D8
    bool UseCompressed(double ratio);
    // private System.Void FlushInputWindows()
    // Offset: 0x16951F8
    void FlushInputWindows();
    // private System.Void WriteFinal()
    // Offset: 0x16952A0
    void WriteFinal();
    // public System.Void Dispose()
    // Offset: 0x1694D40
    void Dispose();
  }; // System.IO.Compression.DeflaterManaged
  #pragma pack(pop)
  static check_size<sizeof(DeflaterManaged), 56 + sizeof(::System::IO::Compression::DeflateInput*)> __System_IO_Compression_DeflaterManagedSizeCheck;
  static_assert(sizeof(DeflaterManaged) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::DeflaterManaged::DeflaterState, "System.IO.Compression", "DeflaterManaged/DeflaterState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::DeflaterManaged::NeedsInput
// Il2CppName: NeedsInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::DeflaterManaged::*)()>(&System::IO::Compression::DeflaterManaged::NeedsInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflaterManaged*), "NeedsInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflaterManaged::SetInput
// Il2CppName: SetInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflaterManaged::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::DeflaterManaged::SetInput)> {
  static const MethodInfo* get() {
    static auto* inputBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflaterManaged*), "SetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputBuffer, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflaterManaged::GetDeflateOutput
// Il2CppName: GetDeflateOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::DeflaterManaged::*)(::ArrayW<uint8_t>)>(&System::IO::Compression::DeflaterManaged::GetDeflateOutput)> {
  static const MethodInfo* get() {
    static auto* outputBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflaterManaged*), "GetDeflateOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputBuffer});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflaterManaged::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::DeflaterManaged::*)(::ArrayW<uint8_t>, ByRef<int>)>(&System::IO::Compression::DeflaterManaged::Finish)> {
  static const MethodInfo* get() {
    static auto* outputBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bytesRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflaterManaged*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputBuffer, bytesRead});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflaterManaged::UseCompressed
// Il2CppName: UseCompressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::DeflaterManaged::*)(double)>(&System::IO::Compression::DeflaterManaged::UseCompressed)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflaterManaged*), "UseCompressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflaterManaged::FlushInputWindows
// Il2CppName: FlushInputWindows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflaterManaged::*)()>(&System::IO::Compression::DeflaterManaged::FlushInputWindows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflaterManaged*), "FlushInputWindows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflaterManaged::WriteFinal
// Il2CppName: WriteFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflaterManaged::*)()>(&System::IO::Compression::DeflaterManaged::WriteFinal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflaterManaged*), "WriteFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::DeflaterManaged::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::DeflaterManaged::*)()>(&System::IO::Compression::DeflaterManaged::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::DeflaterManaged*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
