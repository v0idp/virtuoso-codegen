// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO::Compression
namespace System::IO::Compression {
  // Forward declaring type: FastEncoderWindow
  class FastEncoderWindow;
  // Forward declaring type: Match
  class Match;
  // Forward declaring type: DeflateInput
  class DeflateInput;
  // Forward declaring type: OutputBuffer
  class OutputBuffer;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: FastEncoder
  class FastEncoder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::FastEncoder);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::FastEncoder*, "System.IO.Compression", "FastEncoder");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.FastEncoder
  // [TokenAttribute] Offset: FFFFFFFF
  class FastEncoder : public ::Il2CppObject {
    public:
    public:
    // private readonly System.IO.Compression.FastEncoderWindow _inputWindow
    // Size: 0x8
    // Offset: 0x10
    ::System::IO::Compression::FastEncoderWindow* inputWindow;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::FastEncoderWindow*) == 0x8);
    // private readonly System.IO.Compression.Match _currentMatch
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Compression::Match* currentMatch;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::Match*) == 0x8);
    // private System.Double _lastCompressionRatio
    // Size: 0x8
    // Offset: 0x20
    double lastCompressionRatio;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Get instance field reference: private readonly System.IO.Compression.FastEncoderWindow _inputWindow
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::FastEncoderWindow*& dyn__inputWindow();
    // Get instance field reference: private readonly System.IO.Compression.Match _currentMatch
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::Match*& dyn__currentMatch();
    // Get instance field reference: private System.Double _lastCompressionRatio
    [[deprecated("Use field access instead!")]] double& dyn__lastCompressionRatio();
    // System.Int32 get_BytesInHistory()
    // Offset: 0x1695190
    int get_BytesInHistory();
    // System.IO.Compression.DeflateInput get_UnprocessedInput()
    // Offset: 0x169521C
    ::System::IO::Compression::DeflateInput* get_UnprocessedInput();
    // System.Double get_LastCompressionRatio()
    // Offset: 0x1695358
    double get_LastCompressionRatio();
    // System.Void FlushInput()
    // Offset: 0x1695238
    void FlushInput();
    // System.Void GetBlock(System.IO.Compression.DeflateInput input, System.IO.Compression.OutputBuffer output, System.Int32 maxBytesToCopy)
    // Offset: 0x1695250
    void GetBlock(::System::IO::Compression::DeflateInput* input, ::System::IO::Compression::OutputBuffer* output, int maxBytesToCopy);
    // System.Void GetCompressedData(System.IO.Compression.DeflateInput input, System.IO.Compression.OutputBuffer output)
    // Offset: 0x16951D0
    void GetCompressedData(::System::IO::Compression::DeflateInput* input, ::System::IO::Compression::OutputBuffer* output);
    // System.Void GetBlockHeader(System.IO.Compression.OutputBuffer output)
    // Offset: 0x16951C8
    void GetBlockHeader(::System::IO::Compression::OutputBuffer* output);
    // System.Void GetBlockFooter(System.IO.Compression.OutputBuffer output)
    // Offset: 0x1695234
    void GetBlockFooter(::System::IO::Compression::OutputBuffer* output);
    // private System.Void GetCompressedOutput(System.IO.Compression.DeflateInput input, System.IO.Compression.OutputBuffer output, System.Int32 maxBytesToCopy)
    // Offset: 0x16953F0
    void GetCompressedOutput(::System::IO::Compression::DeflateInput* input, ::System::IO::Compression::OutputBuffer* output, int maxBytesToCopy);
    // private System.Void GetCompressedOutput(System.IO.Compression.OutputBuffer output)
    // Offset: 0x16956B8
    void GetCompressedOutput(::System::IO::Compression::OutputBuffer* output);
    // private System.Boolean InputAvailable(System.IO.Compression.DeflateInput input)
    // Offset: 0x169579C
    bool InputAvailable(::System::IO::Compression::DeflateInput* input);
    // private System.Boolean SafeToWriteTo(System.IO.Compression.OutputBuffer output)
    // Offset: 0x1695768
    bool SafeToWriteTo(::System::IO::Compression::OutputBuffer* output);
    // private System.Void WriteEndOfBlock(System.IO.Compression.OutputBuffer output)
    // Offset: 0x16955C0
    void WriteEndOfBlock(::System::IO::Compression::OutputBuffer* output);
    // static System.Void WriteMatch(System.Int32 matchLen, System.Int32 matchPos, System.IO.Compression.OutputBuffer output)
    // Offset: 0x1695AC4
    static void WriteMatch(int matchLen, int matchPos, ::System::IO::Compression::OutputBuffer* output);
    // static System.Void WriteChar(System.Byte b, System.IO.Compression.OutputBuffer output)
    // Offset: 0x1695A14
    static void WriteChar(uint8_t b, ::System::IO::Compression::OutputBuffer* output);
    // static System.Void WriteDeflatePreamble(System.IO.Compression.OutputBuffer output)
    // Offset: 0x1695360
    static void WriteDeflatePreamble(::System::IO::Compression::OutputBuffer* output);
  }; // System.IO.Compression.FastEncoder
  #pragma pack(pop)
  static check_size<sizeof(FastEncoder), 32 + sizeof(double)> __System_IO_Compression_FastEncoderSizeCheck;
  static_assert(sizeof(FastEncoder) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::get_BytesInHistory
// Il2CppName: get_BytesInHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::FastEncoder::*)()>(&System::IO::Compression::FastEncoder::get_BytesInHistory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "get_BytesInHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::get_UnprocessedInput
// Il2CppName: get_UnprocessedInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Compression::DeflateInput* (System::IO::Compression::FastEncoder::*)()>(&System::IO::Compression::FastEncoder::get_UnprocessedInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "get_UnprocessedInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::get_LastCompressionRatio
// Il2CppName: get_LastCompressionRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::IO::Compression::FastEncoder::*)()>(&System::IO::Compression::FastEncoder::get_LastCompressionRatio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "get_LastCompressionRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::FlushInput
// Il2CppName: FlushInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoder::*)()>(&System::IO::Compression::FastEncoder::FlushInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "FlushInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::GetBlock
// Il2CppName: GetBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::DeflateInput*, ::System::IO::Compression::OutputBuffer*, int)>(&System::IO::Compression::FastEncoder::GetBlock)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "DeflateInput")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    static auto* maxBytesToCopy = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "GetBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output, maxBytesToCopy});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::GetCompressedData
// Il2CppName: GetCompressedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::DeflateInput*, ::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::GetCompressedData)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "DeflateInput")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "GetCompressedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::GetBlockHeader
// Il2CppName: GetBlockHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::GetBlockHeader)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "GetBlockHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::GetBlockFooter
// Il2CppName: GetBlockFooter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::GetBlockFooter)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "GetBlockFooter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::GetCompressedOutput
// Il2CppName: GetCompressedOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::DeflateInput*, ::System::IO::Compression::OutputBuffer*, int)>(&System::IO::Compression::FastEncoder::GetCompressedOutput)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "DeflateInput")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    static auto* maxBytesToCopy = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "GetCompressedOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input, output, maxBytesToCopy});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::GetCompressedOutput
// Il2CppName: GetCompressedOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::GetCompressedOutput)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "GetCompressedOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::InputAvailable
// Il2CppName: InputAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::DeflateInput*)>(&System::IO::Compression::FastEncoder::InputAvailable)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "DeflateInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "InputAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::SafeToWriteTo
// Il2CppName: SafeToWriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::SafeToWriteTo)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "SafeToWriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::WriteEndOfBlock
// Il2CppName: WriteEndOfBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoder::*)(::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::WriteEndOfBlock)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "WriteEndOfBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::WriteMatch
// Il2CppName: WriteMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int, ::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::WriteMatch)> {
  static const MethodInfo* get() {
    static auto* matchLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* matchPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "WriteMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matchLen, matchPos, output});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::WriteChar
// Il2CppName: WriteChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, ::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::WriteChar)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "WriteChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b, output});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoder::WriteDeflatePreamble
// Il2CppName: WriteDeflatePreamble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Compression::OutputBuffer*)>(&System::IO::Compression::FastEncoder::WriteDeflatePreamble)> {
  static const MethodInfo* get() {
    static auto* output = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "OutputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoder*), "WriteDeflatePreamble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{output});
  }
};
