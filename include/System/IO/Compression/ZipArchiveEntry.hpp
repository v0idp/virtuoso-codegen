// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Compression.ZipVersionMadeByPlatform
#include "System/IO/Compression/ZipVersionMadeByPlatform.hpp"
// Including type: System.IO.Compression.ZipVersionNeededValues
#include "System/IO/Compression/ZipVersionNeededValues.hpp"
// Including type: System.DateTimeOffset
#include "System/DateTimeOffset.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.IO.Compression.ZipGenericExtraField
#include "System/IO/Compression/ZipGenericExtraField.hpp"
// Including type: System.IO.Compression.CompressionLevel
#include "System/IO/Compression/CompressionLevel.hpp"
// Including type: System.IO.Compression.ZipCentralDirectoryFileHeader
#include "System/IO/Compression/ZipCentralDirectoryFileHeader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO::Compression
namespace System::IO::Compression {
  // Forward declaring type: ZipArchive
  class ZipArchive;
  // Skipping declaration: CompressionMethodValues because it is already included!
  // Forward declaring type: CheckSumAndSizeWriteStream
  class CheckSumAndSizeWriteStream;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: MemoryStream
  class MemoryStream;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler
  class EventHandler;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: ZipArchiveEntry
  class ZipArchiveEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::ZipArchiveEntry);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::ZipArchiveEntry*, "System.IO.Compression", "ZipArchiveEntry");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // WARNING Size may be invalid!
  // Autogenerated type: System.IO.Compression.ZipArchiveEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class ZipArchiveEntry : public ::Il2CppObject {
    public:
    // Nested type: ::System::IO::Compression::ZipArchiveEntry::DirectToArchiveWriterStream
    class DirectToArchiveWriterStream;
    // Nested type: ::System::IO::Compression::ZipArchiveEntry::BitFlagValues
    struct BitFlagValues;
    // Nested type: ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues
    struct CompressionMethodValues;
    // Nested type: ::System::IO::Compression::ZipArchiveEntry::$$c
    class $$c;
    // Size: 0x2
    #pragma pack(push, 1)
    // Autogenerated type: System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct BitFlagValues/*, public ::System::Enum*/ {
      public:
      public:
      // public System.UInt16 value__
      // Size: 0x2
      // Offset: 0x0
      uint16_t value;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      public:
      // Creating value type constructor for type: BitFlagValues
      constexpr BitFlagValues(uint16_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint16_t
      constexpr operator uint16_t() const noexcept {
        return value;
      }
      // static field const value: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues DataDescriptor
      static constexpr const uint16_t DataDescriptor = 8u;
      // Get static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues DataDescriptor
      static ::System::IO::Compression::ZipArchiveEntry::BitFlagValues _get_DataDescriptor();
      // Set static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues DataDescriptor
      static void _set_DataDescriptor(::System::IO::Compression::ZipArchiveEntry::BitFlagValues value);
      // static field const value: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues UnicodeFileName
      static constexpr const uint16_t UnicodeFileName = 2048u;
      // Get static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues UnicodeFileName
      static ::System::IO::Compression::ZipArchiveEntry::BitFlagValues _get_UnicodeFileName();
      // Set static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues UnicodeFileName
      static void _set_UnicodeFileName(::System::IO::Compression::ZipArchiveEntry::BitFlagValues value);
      // Get instance field reference: public System.UInt16 value__
      [[deprecated("Use field access instead!")]] uint16_t& dyn_value__();
    }; // System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues
    #pragma pack(pop)
    static check_size<sizeof(ZipArchiveEntry::BitFlagValues), 0 + sizeof(uint16_t)> __System_IO_Compression_ZipArchiveEntry_BitFlagValuesSizeCheck;
    static_assert(sizeof(ZipArchiveEntry::BitFlagValues) == 0x2);
    // Size: 0x2
    #pragma pack(push, 1)
    // Autogenerated type: System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues
    // [TokenAttribute] Offset: FFFFFFFF
    struct CompressionMethodValues/*, public ::System::Enum*/ {
      public:
      public:
      // public System.UInt16 value__
      // Size: 0x2
      // Offset: 0x0
      uint16_t value;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      public:
      // Creating value type constructor for type: CompressionMethodValues
      constexpr CompressionMethodValues(uint16_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator uint16_t
      constexpr operator uint16_t() const noexcept {
        return value;
      }
      // static field const value: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Stored
      static constexpr const uint16_t Stored = 0u;
      // Get static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Stored
      static ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues _get_Stored();
      // Set static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Stored
      static void _set_Stored(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues value);
      // static field const value: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Deflate
      static constexpr const uint16_t Deflate = 8u;
      // Get static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Deflate
      static ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues _get_Deflate();
      // Set static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Deflate
      static void _set_Deflate(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues value);
      // static field const value: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Deflate64
      static constexpr const uint16_t Deflate64 = 9u;
      // Get static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Deflate64
      static ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues _get_Deflate64();
      // Set static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues Deflate64
      static void _set_Deflate64(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues value);
      // static field const value: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues BZip2
      static constexpr const uint16_t BZip2 = 12u;
      // Get static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues BZip2
      static ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues _get_BZip2();
      // Set static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues BZip2
      static void _set_BZip2(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues value);
      // static field const value: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues LZMA
      static constexpr const uint16_t LZMA = 14u;
      // Get static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues LZMA
      static ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues _get_LZMA();
      // Set static field: static public System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues LZMA
      static void _set_LZMA(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues value);
      // Get instance field reference: public System.UInt16 value__
      [[deprecated("Use field access instead!")]] uint16_t& dyn_value__();
    }; // System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues
    #pragma pack(pop)
    static check_size<sizeof(ZipArchiveEntry::CompressionMethodValues), 0 + sizeof(uint16_t)> __System_IO_Compression_ZipArchiveEntry_CompressionMethodValuesSizeCheck;
    static_assert(sizeof(ZipArchiveEntry::CompressionMethodValues) == 0x2);
    public:
    // private System.IO.Compression.ZipArchive _archive
    // Size: 0x8
    // Offset: 0x10
    ::System::IO::Compression::ZipArchive* archive;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::ZipArchive*) == 0x8);
    // private readonly System.Boolean _originallyInArchive
    // Size: 0x1
    // Offset: 0x18
    bool originallyInArchive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Int32 _diskNumberStart
    // Size: 0x4
    // Offset: 0x1C
    int diskNumberStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.IO.Compression.ZipVersionMadeByPlatform _versionMadeByPlatform
    // Size: 0x1
    // Offset: 0x20
    ::System::IO::Compression::ZipVersionMadeByPlatform versionMadeByPlatform;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::ZipVersionMadeByPlatform) == 0x1);
    // private System.IO.Compression.ZipVersionNeededValues _versionMadeBySpecification
    // Size: 0x2
    // Offset: 0x22
    ::System::IO::Compression::ZipVersionNeededValues versionMadeBySpecification;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::ZipVersionNeededValues) == 0x2);
    // private System.IO.Compression.ZipVersionNeededValues _versionToExtract
    // Size: 0x2
    // Offset: 0x24
    ::System::IO::Compression::ZipVersionNeededValues versionToExtract;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::ZipVersionNeededValues) == 0x2);
    // private System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues _generalPurposeBitFlag
    // Size: 0x2
    // Offset: 0x26
    ::System::IO::Compression::ZipArchiveEntry::BitFlagValues generalPurposeBitFlag;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::ZipArchiveEntry::BitFlagValues) == 0x2);
    // private System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues _storedCompressionMethod
    // Size: 0x2
    // Offset: 0x28
    ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues storedCompressionMethod;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues) == 0x2);
    // private System.DateTimeOffset _lastModified
    // Size: 0xA
    // Offset: 0x30
    ::System::DateTimeOffset lastModified;
    // Field size check
    static_assert(sizeof(::System::DateTimeOffset) == 0xA);
    // private System.Int64 _compressedSize
    // Size: 0x8
    // Offset: 0x40
    int64_t compressedSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _uncompressedSize
    // Size: 0x8
    // Offset: 0x48
    int64_t uncompressedSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _offsetOfLocalHeader
    // Size: 0x8
    // Offset: 0x50
    int64_t offsetOfLocalHeader;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Nullable`1<System.Int64> _storedOffsetOfCompressedData
    // Size: 0xFFFFFFFF
    // Offset: 0x58
    ::System::Nullable_1<int64_t> storedOffsetOfCompressedData;
    // private System.UInt32 _crc32
    // Size: 0x4
    // Offset: 0x68
    uint crc32;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Byte[][] _compressedBytes
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::ArrayW<uint8_t>> compressedBytes;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<uint8_t>>) == 0x8);
    // private System.IO.MemoryStream _storedUncompressedData
    // Size: 0x8
    // Offset: 0x78
    ::System::IO::MemoryStream* storedUncompressedData;
    // Field size check
    static_assert(sizeof(::System::IO::MemoryStream*) == 0x8);
    // private System.Boolean _currentlyOpenForWrite
    // Size: 0x1
    // Offset: 0x80
    bool currentlyOpenForWrite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _everOpenedForWrite
    // Size: 0x1
    // Offset: 0x81
    bool everOpenedForWrite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.IO.Stream _outstandingWriteStream
    // Size: 0x8
    // Offset: 0x88
    ::System::IO::Stream* outstandingWriteStream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.UInt32 _externalFileAttr
    // Size: 0x4
    // Offset: 0x90
    uint externalFileAttr;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.String _storedEntryName
    // Size: 0x8
    // Offset: 0x98
    ::StringW storedEntryName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Byte[] _storedEntryNameBytes
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<uint8_t> storedEntryNameBytes;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Collections.Generic.List`1<System.IO.Compression.ZipGenericExtraField> _cdUnknownExtraFields
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>* cdUnknownExtraFields;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>*) == 0x8);
    // private System.Collections.Generic.List`1<System.IO.Compression.ZipGenericExtraField> _lhUnknownExtraFields
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>* lhUnknownExtraFields;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>*) == 0x8);
    // private System.Byte[] _fileComment
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<uint8_t> fileComment;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Nullable`1<System.IO.Compression.CompressionLevel> _compressionLevel
    // Size: 0xFFFFFFFF
    // Offset: 0xC0
    ::System::Nullable_1<::System::IO::Compression::CompressionLevel> compressionLevel;
    public:
    // Get static field: static private readonly System.Boolean s_allowLargeZipArchiveEntriesInUpdateMode
    static bool _get_s_allowLargeZipArchiveEntriesInUpdateMode();
    // Set static field: static private readonly System.Boolean s_allowLargeZipArchiveEntriesInUpdateMode
    static void _set_s_allowLargeZipArchiveEntriesInUpdateMode(bool value);
    // Get static field: static readonly System.IO.Compression.ZipVersionMadeByPlatform CurrentZipPlatform
    static ::System::IO::Compression::ZipVersionMadeByPlatform _get_CurrentZipPlatform();
    // Set static field: static readonly System.IO.Compression.ZipVersionMadeByPlatform CurrentZipPlatform
    static void _set_CurrentZipPlatform(::System::IO::Compression::ZipVersionMadeByPlatform value);
    // Get instance field reference: private System.IO.Compression.ZipArchive _archive
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::ZipArchive*& dyn__archive();
    // Get instance field reference: private readonly System.Boolean _originallyInArchive
    [[deprecated("Use field access instead!")]] bool& dyn__originallyInArchive();
    // Get instance field reference: private readonly System.Int32 _diskNumberStart
    [[deprecated("Use field access instead!")]] int& dyn__diskNumberStart();
    // Get instance field reference: private readonly System.IO.Compression.ZipVersionMadeByPlatform _versionMadeByPlatform
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::ZipVersionMadeByPlatform& dyn__versionMadeByPlatform();
    // Get instance field reference: private System.IO.Compression.ZipVersionNeededValues _versionMadeBySpecification
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::ZipVersionNeededValues& dyn__versionMadeBySpecification();
    // Get instance field reference: private System.IO.Compression.ZipVersionNeededValues _versionToExtract
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::ZipVersionNeededValues& dyn__versionToExtract();
    // Get instance field reference: private System.IO.Compression.ZipArchiveEntry/System.IO.Compression.BitFlagValues _generalPurposeBitFlag
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::ZipArchiveEntry::BitFlagValues& dyn__generalPurposeBitFlag();
    // Get instance field reference: private System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues _storedCompressionMethod
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues& dyn__storedCompressionMethod();
    // Get instance field reference: private System.DateTimeOffset _lastModified
    [[deprecated("Use field access instead!")]] ::System::DateTimeOffset& dyn__lastModified();
    // Get instance field reference: private System.Int64 _compressedSize
    [[deprecated("Use field access instead!")]] int64_t& dyn__compressedSize();
    // Get instance field reference: private System.Int64 _uncompressedSize
    [[deprecated("Use field access instead!")]] int64_t& dyn__uncompressedSize();
    // Get instance field reference: private System.Int64 _offsetOfLocalHeader
    [[deprecated("Use field access instead!")]] int64_t& dyn__offsetOfLocalHeader();
    // Get instance field reference: private System.Nullable`1<System.Int64> _storedOffsetOfCompressedData
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int64_t>& dyn__storedOffsetOfCompressedData();
    // Get instance field reference: private System.UInt32 _crc32
    [[deprecated("Use field access instead!")]] uint& dyn__crc32();
    // Get instance field reference: private System.Byte[][] _compressedBytes
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<uint8_t>>& dyn__compressedBytes();
    // Get instance field reference: private System.IO.MemoryStream _storedUncompressedData
    [[deprecated("Use field access instead!")]] ::System::IO::MemoryStream*& dyn__storedUncompressedData();
    // Get instance field reference: private System.Boolean _currentlyOpenForWrite
    [[deprecated("Use field access instead!")]] bool& dyn__currentlyOpenForWrite();
    // Get instance field reference: private System.Boolean _everOpenedForWrite
    [[deprecated("Use field access instead!")]] bool& dyn__everOpenedForWrite();
    // Get instance field reference: private System.IO.Stream _outstandingWriteStream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__outstandingWriteStream();
    // Get instance field reference: private System.UInt32 _externalFileAttr
    [[deprecated("Use field access instead!")]] uint& dyn__externalFileAttr();
    // Get instance field reference: private System.String _storedEntryName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__storedEntryName();
    // Get instance field reference: private System.Byte[] _storedEntryNameBytes
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__storedEntryNameBytes();
    // Get instance field reference: private System.Collections.Generic.List`1<System.IO.Compression.ZipGenericExtraField> _cdUnknownExtraFields
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>*& dyn__cdUnknownExtraFields();
    // Get instance field reference: private System.Collections.Generic.List`1<System.IO.Compression.ZipGenericExtraField> _lhUnknownExtraFields
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>*& dyn__lhUnknownExtraFields();
    // Get instance field reference: private System.Byte[] _fileComment
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__fileComment();
    // Get instance field reference: private System.Nullable`1<System.IO.Compression.CompressionLevel> _compressionLevel
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::System::IO::Compression::CompressionLevel>& dyn__compressionLevel();
    // public System.String get_FullName()
    // Offset: 0x169E6B4
    ::StringW get_FullName();
    // private System.Void set_FullName(System.String value)
    // Offset: 0x169E570
    void set_FullName(::StringW value);
    // public System.DateTimeOffset get_LastWriteTime()
    // Offset: 0x169E8A0
    ::System::DateTimeOffset get_LastWriteTime();
    // public System.Void set_LastWriteTime(System.DateTimeOffset value)
    // Offset: 0x169E8AC
    void set_LastWriteTime(::System::DateTimeOffset value);
    // public System.Int64 get_Length()
    // Offset: 0x169EA74
    int64_t get_Length();
    // public System.String get_Name()
    // Offset: 0x169EAD8
    ::StringW get_Name();
    // System.Boolean get_EverOpenedForWrite()
    // Offset: 0x169F04C
    bool get_EverOpenedForWrite();
    // private System.Int64 get_OffsetOfCompressedData()
    // Offset: 0x169F054
    int64_t get_OffsetOfCompressedData();
    // private System.IO.MemoryStream get_UncompressedData()
    // Offset: 0x169F320
    ::System::IO::MemoryStream* get_UncompressedData();
    // private System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues get_CompressionMethod()
    // Offset: 0x169F59C
    ::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues get_CompressionMethod();
    // private System.Void set_CompressionMethod(System.IO.Compression.ZipArchiveEntry/System.IO.Compression.CompressionMethodValues value)
    // Offset: 0x169E378
    void set_CompressionMethod(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues value);
    // System.Void .ctor(System.IO.Compression.ZipArchive archive, System.IO.Compression.ZipCentralDirectoryFileHeader cd)
    // Offset: 0x169CEE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipArchiveEntry* New_ctor(::System::IO::Compression::ZipArchive* archive, ::System::IO::Compression::ZipCentralDirectoryFileHeader cd) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Compression::ZipArchiveEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipArchiveEntry*, creationType>(archive, cd)));
    }
    // System.Void .ctor(System.IO.Compression.ZipArchive archive, System.String entryName, System.IO.Compression.CompressionLevel compressionLevel)
    // Offset: 0x169C384
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipArchiveEntry* New_ctor(::System::IO::Compression::ZipArchive* archive, ::StringW entryName, ::System::IO::Compression::CompressionLevel compressionLevel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Compression::ZipArchiveEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipArchiveEntry*, creationType>(archive, entryName, compressionLevel)));
    }
    // System.Void .ctor(System.IO.Compression.ZipArchive archive, System.String entryName)
    // Offset: 0x169C1E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ZipArchiveEntry* New_ctor(::System::IO::Compression::ZipArchive* archive, ::StringW entryName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Compression::ZipArchiveEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ZipArchiveEntry*, creationType>(archive, entryName)));
    }
    // static private System.Void .cctor()
    // Offset: 0x16A0DC4
    static void _cctor();
    // public System.Void Delete()
    // Offset: 0x169DB98
    void Delete();
    // public System.IO.Stream Open()
    // Offset: 0x169EB78
    ::System::IO::Stream* Open();
    // private System.String DecodeEntryName(System.Byte[] entryNameBytes)
    // Offset: 0x169E51C
    ::StringW DecodeEntryName(::ArrayW<uint8_t> entryNameBytes);
    // private System.Byte[] EncodeEntryName(System.String entryName, out System.Boolean isUTF8)
    // Offset: 0x169E6BC
    ::ArrayW<uint8_t> EncodeEntryName(::StringW entryName, ByRef<bool> isUTF8);
    // System.Void WriteAndFinishLocalEntry()
    // Offset: 0x169C564
    void WriteAndFinishLocalEntry();
    // System.Void WriteCentralDirectoryFileHeader()
    // Offset: 0x169DC80
    void WriteCentralDirectoryFileHeader();
    // System.Boolean LoadLocalHeaderExtraFieldAndCompressedBytesIfNeeded()
    // Offset: 0x169D8D4
    bool LoadLocalHeaderExtraFieldAndCompressedBytesIfNeeded();
    // System.Void ThrowIfNotOpenable(System.Boolean needToUncompress, System.Boolean needToLoadIntoMemory)
    // Offset: 0x169CE6C
    void ThrowIfNotOpenable(bool needToUncompress, bool needToLoadIntoMemory);
    // private System.IO.Compression.CheckSumAndSizeWriteStream GetDataCompressor(System.IO.Stream backingStream, System.Boolean leaveBackingStreamOpen, System.EventHandler onClose)
    // Offset: 0x16A0178
    ::System::IO::Compression::CheckSumAndSizeWriteStream* GetDataCompressor(::System::IO::Stream* backingStream, bool leaveBackingStreamOpen, ::System::EventHandler* onClose);
    // private System.IO.Stream GetDataDecompressor(System.IO.Stream compressedStreamToRead)
    // Offset: 0x16A0368
    ::System::IO::Stream* GetDataDecompressor(::System::IO::Stream* compressedStreamToRead);
    // private System.IO.Stream OpenInReadMode(System.Boolean checkOpenable)
    // Offset: 0x169EBDC
    ::System::IO::Stream* OpenInReadMode(bool checkOpenable);
    // private System.IO.Stream OpenInWriteMode()
    // Offset: 0x169EC90
    ::System::IO::Stream* OpenInWriteMode();
    // private System.IO.Stream OpenInUpdateMode()
    // Offset: 0x169EE68
    ::System::IO::Stream* OpenInUpdateMode();
    // private System.Boolean IsOpenable(System.Boolean needToUncompress, System.Boolean needToLoadIntoMemory, out System.String message)
    // Offset: 0x169FF00
    bool IsOpenable(bool needToUncompress, bool needToLoadIntoMemory, ByRef<::StringW> message);
    // private System.Boolean SizesTooLarge()
    // Offset: 0x169F8E8
    bool SizesTooLarge();
    // private System.Boolean WriteLocalFileHeader(System.Boolean isEmptyFile)
    // Offset: 0x16A04AC
    bool WriteLocalFileHeader(bool isEmptyFile);
    // private System.Void WriteLocalFileHeaderAndDataIfNeeded()
    // Offset: 0x169F628
    void WriteLocalFileHeaderAndDataIfNeeded();
    // private System.Void WriteCrcAndSizesInLocalHeader(System.Boolean zip64HeaderUsed)
    // Offset: 0x16A0878
    void WriteCrcAndSizesInLocalHeader(bool zip64HeaderUsed);
    // private System.Void WriteDataDescriptor()
    // Offset: 0x16A0B98
    void WriteDataDescriptor();
    // private System.Void UnloadStreams()
    // Offset: 0x169EB44
    void UnloadStreams();
    // private System.Void CloseStreams()
    // Offset: 0x169F614
    void CloseStreams();
    // private System.Void VersionToExtractAtLeast(System.IO.Compression.ZipVersionNeededValues value)
    // Offset: 0x169E87C
    void VersionToExtractAtLeast(::System::IO::Compression::ZipVersionNeededValues value);
    // private System.Void ThrowIfInvalidArchive()
    // Offset: 0x169EA14
    void ThrowIfInvalidArchive();
    // static private System.String GetFileName_Windows(System.String path)
    // Offset: 0x16A0CC4
    static ::StringW GetFileName_Windows(::StringW path);
    // static private System.String GetFileName_Unix(System.String path)
    // Offset: 0x16A0D58
    static ::StringW GetFileName_Unix(::StringW path);
    // static System.String ParseFileName(System.String path, System.IO.Compression.ZipVersionMadeByPlatform madeByPlatform)
    // Offset: 0x169E7A8
    static ::StringW ParseFileName(::StringW path, ::System::IO::Compression::ZipVersionMadeByPlatform madeByPlatform);
    // public override System.String ToString()
    // Offset: 0x169F044
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // System.IO.Compression.ZipArchiveEntry
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues, "System.IO.Compression", "ZipArchiveEntry/CompressionMethodValues");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::ZipArchiveEntry::BitFlagValues, "System.IO.Compression", "ZipArchiveEntry/BitFlagValues");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::get_FullName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::set_FullName
// Il2CppName: set_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)(::StringW)>(&System::IO::Compression::ZipArchiveEntry::set_FullName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "set_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::get_LastWriteTime
// Il2CppName: get_LastWriteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::get_LastWriteTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "get_LastWriteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::set_LastWriteTime
// Il2CppName: set_LastWriteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)(::System::DateTimeOffset)>(&System::IO::Compression::ZipArchiveEntry::set_LastWriteTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "set_LastWriteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::get_EverOpenedForWrite
// Il2CppName: get_EverOpenedForWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::get_EverOpenedForWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "get_EverOpenedForWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::get_OffsetOfCompressedData
// Il2CppName: get_OffsetOfCompressedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::get_OffsetOfCompressedData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "get_OffsetOfCompressedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::get_UncompressedData
// Il2CppName: get_UncompressedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::MemoryStream* (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::get_UncompressedData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "get_UncompressedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::get_CompressionMethod
// Il2CppName: get_CompressionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::get_CompressionMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "get_CompressionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::set_CompressionMethod
// Il2CppName: set_CompressionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)(::System::IO::Compression::ZipArchiveEntry::CompressionMethodValues)>(&System::IO::Compression::ZipArchiveEntry::set_CompressionMethod)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "ZipArchiveEntry/CompressionMethodValues")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "set_CompressionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::Compression::ZipArchiveEntry::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::Delete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::Open)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::DecodeEntryName
// Il2CppName: DecodeEntryName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::IO::Compression::ZipArchiveEntry::*)(::ArrayW<uint8_t>)>(&System::IO::Compression::ZipArchiveEntry::DecodeEntryName)> {
  static const MethodInfo* get() {
    static auto* entryNameBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "DecodeEntryName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entryNameBytes});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::EncodeEntryName
// Il2CppName: EncodeEntryName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::IO::Compression::ZipArchiveEntry::*)(::StringW, ByRef<bool>)>(&System::IO::Compression::ZipArchiveEntry::EncodeEntryName)> {
  static const MethodInfo* get() {
    static auto* entryName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isUTF8 = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "EncodeEntryName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{entryName, isUTF8});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::WriteAndFinishLocalEntry
// Il2CppName: WriteAndFinishLocalEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::WriteAndFinishLocalEntry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "WriteAndFinishLocalEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::WriteCentralDirectoryFileHeader
// Il2CppName: WriteCentralDirectoryFileHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::WriteCentralDirectoryFileHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "WriteCentralDirectoryFileHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::LoadLocalHeaderExtraFieldAndCompressedBytesIfNeeded
// Il2CppName: LoadLocalHeaderExtraFieldAndCompressedBytesIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::LoadLocalHeaderExtraFieldAndCompressedBytesIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "LoadLocalHeaderExtraFieldAndCompressedBytesIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::ThrowIfNotOpenable
// Il2CppName: ThrowIfNotOpenable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)(bool, bool)>(&System::IO::Compression::ZipArchiveEntry::ThrowIfNotOpenable)> {
  static const MethodInfo* get() {
    static auto* needToUncompress = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* needToLoadIntoMemory = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "ThrowIfNotOpenable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{needToUncompress, needToLoadIntoMemory});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::GetDataCompressor
// Il2CppName: GetDataCompressor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Compression::CheckSumAndSizeWriteStream* (System::IO::Compression::ZipArchiveEntry::*)(::System::IO::Stream*, bool, ::System::EventHandler*)>(&System::IO::Compression::ZipArchiveEntry::GetDataCompressor)> {
  static const MethodInfo* get() {
    static auto* backingStream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* leaveBackingStreamOpen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* onClose = &::il2cpp_utils::GetClassFromName("System", "EventHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "GetDataCompressor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{backingStream, leaveBackingStreamOpen, onClose});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::GetDataDecompressor
// Il2CppName: GetDataDecompressor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::IO::Compression::ZipArchiveEntry::*)(::System::IO::Stream*)>(&System::IO::Compression::ZipArchiveEntry::GetDataDecompressor)> {
  static const MethodInfo* get() {
    static auto* compressedStreamToRead = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "GetDataDecompressor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{compressedStreamToRead});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::OpenInReadMode
// Il2CppName: OpenInReadMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::IO::Compression::ZipArchiveEntry::*)(bool)>(&System::IO::Compression::ZipArchiveEntry::OpenInReadMode)> {
  static const MethodInfo* get() {
    static auto* checkOpenable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "OpenInReadMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{checkOpenable});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::OpenInWriteMode
// Il2CppName: OpenInWriteMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::OpenInWriteMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "OpenInWriteMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::OpenInUpdateMode
// Il2CppName: OpenInUpdateMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::OpenInUpdateMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "OpenInUpdateMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::IsOpenable
// Il2CppName: IsOpenable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::ZipArchiveEntry::*)(bool, bool, ByRef<::StringW>)>(&System::IO::Compression::ZipArchiveEntry::IsOpenable)> {
  static const MethodInfo* get() {
    static auto* needToUncompress = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* needToLoadIntoMemory = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "IsOpenable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{needToUncompress, needToLoadIntoMemory, message});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::SizesTooLarge
// Il2CppName: SizesTooLarge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::SizesTooLarge)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "SizesTooLarge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::WriteLocalFileHeader
// Il2CppName: WriteLocalFileHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::ZipArchiveEntry::*)(bool)>(&System::IO::Compression::ZipArchiveEntry::WriteLocalFileHeader)> {
  static const MethodInfo* get() {
    static auto* isEmptyFile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "WriteLocalFileHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isEmptyFile});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::WriteLocalFileHeaderAndDataIfNeeded
// Il2CppName: WriteLocalFileHeaderAndDataIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::WriteLocalFileHeaderAndDataIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "WriteLocalFileHeaderAndDataIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::WriteCrcAndSizesInLocalHeader
// Il2CppName: WriteCrcAndSizesInLocalHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)(bool)>(&System::IO::Compression::ZipArchiveEntry::WriteCrcAndSizesInLocalHeader)> {
  static const MethodInfo* get() {
    static auto* zip64HeaderUsed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "WriteCrcAndSizesInLocalHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{zip64HeaderUsed});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::WriteDataDescriptor
// Il2CppName: WriteDataDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::WriteDataDescriptor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "WriteDataDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::UnloadStreams
// Il2CppName: UnloadStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::UnloadStreams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "UnloadStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::CloseStreams
// Il2CppName: CloseStreams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::CloseStreams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "CloseStreams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::VersionToExtractAtLeast
// Il2CppName: VersionToExtractAtLeast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)(::System::IO::Compression::ZipVersionNeededValues)>(&System::IO::Compression::ZipArchiveEntry::VersionToExtractAtLeast)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "ZipVersionNeededValues")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "VersionToExtractAtLeast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::ThrowIfInvalidArchive
// Il2CppName: ThrowIfInvalidArchive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::ThrowIfInvalidArchive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "ThrowIfInvalidArchive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::GetFileName_Windows
// Il2CppName: GetFileName_Windows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::IO::Compression::ZipArchiveEntry::GetFileName_Windows)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "GetFileName_Windows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::GetFileName_Unix
// Il2CppName: GetFileName_Unix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::IO::Compression::ZipArchiveEntry::GetFileName_Unix)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "GetFileName_Unix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::ParseFileName
// Il2CppName: ParseFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::System::IO::Compression::ZipVersionMadeByPlatform)>(&System::IO::Compression::ZipArchiveEntry::ParseFileName)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* madeByPlatform = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "ZipVersionMadeByPlatform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "ParseFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, madeByPlatform});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipArchiveEntry::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::IO::Compression::ZipArchiveEntry::*)()>(&System::IO::Compression::ZipArchiveEntry::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipArchiveEntry*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
