// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: ZipHelper
  class ZipHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::ZipHelper);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::ZipHelper*, "System.IO.Compression", "ZipHelper");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.ZipHelper
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ZipHelper : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.DateTime s_invalidDateIndicator
    static ::System::DateTime _get_s_invalidDateIndicator();
    // Set static field: static private readonly System.DateTime s_invalidDateIndicator
    static void _set_s_invalidDateIndicator(::System::DateTime value);
    // static private System.Void .cctor()
    // Offset: 0x16A13B8
    static void _cctor();
    // static System.Boolean RequiresUnicode(System.String test)
    // Offset: 0x169F5A4
    static bool RequiresUnicode(::StringW test);
    // static System.Void ReadBytes(System.IO.Stream stream, System.Byte[] buffer, System.Int32 bytesToRead)
    // Offset: 0x169FE44
    static void ReadBytes(::System::IO::Stream* stream, ::ArrayW<uint8_t> buffer, int bytesToRead);
    // static System.DateTime DosTimeToDateTime(System.UInt32 dateTime)
    // Offset: 0x169E3E4
    static ::System::DateTime DosTimeToDateTime(uint dateTime);
    // static System.UInt32 DateTimeToDosTime(System.DateTime dateTime)
    // Offset: 0x169FA2C
    static uint DateTimeToDosTime(::System::DateTime dateTime);
    // static System.Boolean SeekBackwardsToSignature(System.IO.Stream stream, System.UInt32 signatureToFind)
    // Offset: 0x169D67C
    static bool SeekBackwardsToSignature(::System::IO::Stream* stream, uint signatureToFind);
    // static System.Void AdvanceToPosition(System.IO.Stream stream, System.Int64 position)
    // Offset: 0x16A106C
    static void AdvanceToPosition(::System::IO::Stream* stream, int64_t position);
    // static private System.Boolean SeekBackwardsAndRead(System.IO.Stream stream, System.Byte[] buffer, out System.Int32 bufferPointer)
    // Offset: 0x16A1238
    static bool SeekBackwardsAndRead(::System::IO::Stream* stream, ::ArrayW<uint8_t> buffer, ByRef<int> bufferPointer);
  }; // System.IO.Compression.ZipHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::ZipHelper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::Compression::ZipHelper::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipHelper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipHelper::RequiresUnicode
// Il2CppName: RequiresUnicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&System::IO::Compression::ZipHelper::RequiresUnicode)> {
  static const MethodInfo* get() {
    static auto* test = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipHelper*), "RequiresUnicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{test});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipHelper::ReadBytes
// Il2CppName: ReadBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, ::ArrayW<uint8_t>, int)>(&System::IO::Compression::ZipHelper::ReadBytes)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bytesToRead = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipHelper*), "ReadBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, buffer, bytesToRead});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipHelper::DosTimeToDateTime
// Il2CppName: DosTimeToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (*)(uint)>(&System::IO::Compression::ZipHelper::DosTimeToDateTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipHelper*), "DosTimeToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipHelper::DateTimeToDosTime
// Il2CppName: DateTimeToDosTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::System::DateTime)>(&System::IO::Compression::ZipHelper::DateTimeToDosTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipHelper*), "DateTimeToDosTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipHelper::SeekBackwardsToSignature
// Il2CppName: SeekBackwardsToSignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IO::Stream*, uint)>(&System::IO::Compression::ZipHelper::SeekBackwardsToSignature)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* signatureToFind = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipHelper*), "SeekBackwardsToSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, signatureToFind});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipHelper::AdvanceToPosition
// Il2CppName: AdvanceToPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, int64_t)>(&System::IO::Compression::ZipHelper::AdvanceToPosition)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipHelper*), "AdvanceToPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, position});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipHelper::SeekBackwardsAndRead
// Il2CppName: SeekBackwardsAndRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IO::Stream*, ::ArrayW<uint8_t>, ByRef<int>)>(&System::IO::Compression::ZipHelper::SeekBackwardsAndRead)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bufferPointer = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipHelper*), "SeekBackwardsAndRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, buffer, bufferPointer});
  }
};
