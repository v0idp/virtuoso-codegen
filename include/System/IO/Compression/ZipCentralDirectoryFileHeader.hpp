// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IO.Compression.ZipGenericExtraField
#include "System/IO/Compression/ZipGenericExtraField.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: BinaryReader
  class BinaryReader;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: ZipCentralDirectoryFileHeader
  struct ZipCentralDirectoryFileHeader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::ZipCentralDirectoryFileHeader, "System.IO.Compression", "ZipCentralDirectoryFileHeader");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x58
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IO.Compression.ZipCentralDirectoryFileHeader
  // [TokenAttribute] Offset: FFFFFFFF
  struct ZipCentralDirectoryFileHeader/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Byte VersionMadeByCompatibility
    // Size: 0x1
    // Offset: 0x0
    uint8_t VersionMadeByCompatibility;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.Byte VersionMadeBySpecification
    // Size: 0x1
    // Offset: 0x1
    uint8_t VersionMadeBySpecification;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public System.UInt16 VersionNeededToExtract
    // Size: 0x2
    // Offset: 0x2
    uint16_t VersionNeededToExtract;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 GeneralPurposeBitFlag
    // Size: 0x2
    // Offset: 0x4
    uint16_t GeneralPurposeBitFlag;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 CompressionMethod
    // Size: 0x2
    // Offset: 0x6
    uint16_t CompressionMethod;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt32 LastModified
    // Size: 0x4
    // Offset: 0x8
    uint LastModified;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 Crc32
    // Size: 0x4
    // Offset: 0xC
    uint Crc32;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Int64 CompressedSize
    // Size: 0x8
    // Offset: 0x10
    int64_t CompressedSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int64 UncompressedSize
    // Size: 0x8
    // Offset: 0x18
    int64_t UncompressedSize;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.UInt16 FilenameLength
    // Size: 0x2
    // Offset: 0x20
    uint16_t FilenameLength;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 ExtraFieldLength
    // Size: 0x2
    // Offset: 0x22
    uint16_t ExtraFieldLength;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 FileCommentLength
    // Size: 0x2
    // Offset: 0x24
    uint16_t FileCommentLength;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: FileCommentLength and: DiskNumberStart
    char __padding11[0x2] = {};
    // public System.Int32 DiskNumberStart
    // Size: 0x4
    // Offset: 0x28
    int DiskNumberStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt16 InternalFileAttributes
    // Size: 0x2
    // Offset: 0x2C
    uint16_t InternalFileAttributes;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Padding between fields: InternalFileAttributes and: ExternalFileAttributes
    char __padding13[0x2] = {};
    // public System.UInt32 ExternalFileAttributes
    // Size: 0x4
    // Offset: 0x30
    uint ExternalFileAttributes;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: ExternalFileAttributes and: RelativeOffsetOfLocalHeader
    char __padding14[0x4] = {};
    // public System.Int64 RelativeOffsetOfLocalHeader
    // Size: 0x8
    // Offset: 0x38
    int64_t RelativeOffsetOfLocalHeader;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Byte[] Filename
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> Filename;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Byte[] FileComment
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<uint8_t> FileComment;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // public System.Collections.Generic.List`1<System.IO.Compression.ZipGenericExtraField> ExtraFields
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>* ExtraFields;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>*) == 0x8);
    public:
    // Creating value type constructor for type: ZipCentralDirectoryFileHeader
    constexpr ZipCentralDirectoryFileHeader(uint8_t VersionMadeByCompatibility_ = {}, uint8_t VersionMadeBySpecification_ = {}, uint16_t VersionNeededToExtract_ = {}, uint16_t GeneralPurposeBitFlag_ = {}, uint16_t CompressionMethod_ = {}, uint LastModified_ = {}, uint Crc32_ = {}, int64_t CompressedSize_ = {}, int64_t UncompressedSize_ = {}, uint16_t FilenameLength_ = {}, uint16_t ExtraFieldLength_ = {}, uint16_t FileCommentLength_ = {}, int DiskNumberStart_ = {}, uint16_t InternalFileAttributes_ = {}, uint ExternalFileAttributes_ = {}, int64_t RelativeOffsetOfLocalHeader_ = {}, ::ArrayW<uint8_t> Filename_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), ::ArrayW<uint8_t> FileComment_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), ::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>* ExtraFields_ = {}) noexcept : VersionMadeByCompatibility{VersionMadeByCompatibility_}, VersionMadeBySpecification{VersionMadeBySpecification_}, VersionNeededToExtract{VersionNeededToExtract_}, GeneralPurposeBitFlag{GeneralPurposeBitFlag_}, CompressionMethod{CompressionMethod_}, LastModified{LastModified_}, Crc32{Crc32_}, CompressedSize{CompressedSize_}, UncompressedSize{UncompressedSize_}, FilenameLength{FilenameLength_}, ExtraFieldLength{ExtraFieldLength_}, FileCommentLength{FileCommentLength_}, DiskNumberStart{DiskNumberStart_}, InternalFileAttributes{InternalFileAttributes_}, ExternalFileAttributes{ExternalFileAttributes_}, RelativeOffsetOfLocalHeader{RelativeOffsetOfLocalHeader_}, Filename{Filename_}, FileComment{FileComment_}, ExtraFields{ExtraFields_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Byte VersionMadeByCompatibility
    [[deprecated("Use field access instead!")]] uint8_t& dyn_VersionMadeByCompatibility();
    // Get instance field reference: public System.Byte VersionMadeBySpecification
    [[deprecated("Use field access instead!")]] uint8_t& dyn_VersionMadeBySpecification();
    // Get instance field reference: public System.UInt16 VersionNeededToExtract
    [[deprecated("Use field access instead!")]] uint16_t& dyn_VersionNeededToExtract();
    // Get instance field reference: public System.UInt16 GeneralPurposeBitFlag
    [[deprecated("Use field access instead!")]] uint16_t& dyn_GeneralPurposeBitFlag();
    // Get instance field reference: public System.UInt16 CompressionMethod
    [[deprecated("Use field access instead!")]] uint16_t& dyn_CompressionMethod();
    // Get instance field reference: public System.UInt32 LastModified
    [[deprecated("Use field access instead!")]] uint& dyn_LastModified();
    // Get instance field reference: public System.UInt32 Crc32
    [[deprecated("Use field access instead!")]] uint& dyn_Crc32();
    // Get instance field reference: public System.Int64 CompressedSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_CompressedSize();
    // Get instance field reference: public System.Int64 UncompressedSize
    [[deprecated("Use field access instead!")]] int64_t& dyn_UncompressedSize();
    // Get instance field reference: public System.UInt16 FilenameLength
    [[deprecated("Use field access instead!")]] uint16_t& dyn_FilenameLength();
    // Get instance field reference: public System.UInt16 ExtraFieldLength
    [[deprecated("Use field access instead!")]] uint16_t& dyn_ExtraFieldLength();
    // Get instance field reference: public System.UInt16 FileCommentLength
    [[deprecated("Use field access instead!")]] uint16_t& dyn_FileCommentLength();
    // Get instance field reference: public System.Int32 DiskNumberStart
    [[deprecated("Use field access instead!")]] int& dyn_DiskNumberStart();
    // Get instance field reference: public System.UInt16 InternalFileAttributes
    [[deprecated("Use field access instead!")]] uint16_t& dyn_InternalFileAttributes();
    // Get instance field reference: public System.UInt32 ExternalFileAttributes
    [[deprecated("Use field access instead!")]] uint& dyn_ExternalFileAttributes();
    // Get instance field reference: public System.Int64 RelativeOffsetOfLocalHeader
    [[deprecated("Use field access instead!")]] int64_t& dyn_RelativeOffsetOfLocalHeader();
    // Get instance field reference: public System.Byte[] Filename
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_Filename();
    // Get instance field reference: public System.Byte[] FileComment
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_FileComment();
    // Get instance field reference: public System.Collections.Generic.List`1<System.IO.Compression.ZipGenericExtraField> ExtraFields
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>*& dyn_ExtraFields();
    // static public System.Boolean TryReadBlock(System.IO.BinaryReader reader, System.Boolean saveExtraFieldsAndComments, out System.IO.Compression.ZipCentralDirectoryFileHeader header)
    // Offset: 0x169D02C
    static bool TryReadBlock(::System::IO::BinaryReader* reader, bool saveExtraFieldsAndComments, ByRef<::System::IO::Compression::ZipCentralDirectoryFileHeader> header);
  }; // System.IO.Compression.ZipCentralDirectoryFileHeader
  #pragma pack(pop)
  static check_size<sizeof(ZipCentralDirectoryFileHeader), 80 + sizeof(::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>*)> __System_IO_Compression_ZipCentralDirectoryFileHeaderSizeCheck;
  static_assert(sizeof(ZipCentralDirectoryFileHeader) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::ZipCentralDirectoryFileHeader::TryReadBlock
// Il2CppName: TryReadBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IO::BinaryReader*, bool, ByRef<::System::IO::Compression::ZipCentralDirectoryFileHeader>)>(&System::IO::Compression::ZipCentralDirectoryFileHeader::TryReadBlock)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryReader")->byval_arg;
    static auto* saveExtraFieldsAndComments = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* header = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "ZipCentralDirectoryFileHeader")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipCentralDirectoryFileHeader), "TryReadBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, saveExtraFieldsAndComments, header});
  }
};
