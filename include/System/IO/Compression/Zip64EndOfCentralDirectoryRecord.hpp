// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: BinaryReader
  class BinaryReader;
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: Zip64EndOfCentralDirectoryRecord
  struct Zip64EndOfCentralDirectoryRecord;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::Zip64EndOfCentralDirectoryRecord, "System.IO.Compression", "Zip64EndOfCentralDirectoryRecord");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IO.Compression.Zip64EndOfCentralDirectoryRecord
  // [TokenAttribute] Offset: FFFFFFFF
  struct Zip64EndOfCentralDirectoryRecord/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt64 SizeOfThisRecord
    // Size: 0x8
    // Offset: 0x0
    uint64_t SizeOfThisRecord;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt16 VersionMadeBy
    // Size: 0x2
    // Offset: 0x8
    uint16_t VersionMadeBy;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 VersionNeededToExtract
    // Size: 0x2
    // Offset: 0xA
    uint16_t VersionNeededToExtract;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt32 NumberOfThisDisk
    // Size: 0x4
    // Offset: 0xC
    uint NumberOfThisDisk;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 NumberOfDiskWithStartOfCD
    // Size: 0x4
    // Offset: 0x10
    uint NumberOfDiskWithStartOfCD;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: NumberOfDiskWithStartOfCD and: NumberOfEntriesOnThisDisk
    char __padding4[0x4] = {};
    // public System.UInt64 NumberOfEntriesOnThisDisk
    // Size: 0x8
    // Offset: 0x18
    uint64_t NumberOfEntriesOnThisDisk;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 NumberOfEntriesTotal
    // Size: 0x8
    // Offset: 0x20
    uint64_t NumberOfEntriesTotal;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 SizeOfCentralDirectory
    // Size: 0x8
    // Offset: 0x28
    uint64_t SizeOfCentralDirectory;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 OffsetOfCentralDirectory
    // Size: 0x8
    // Offset: 0x30
    uint64_t OffsetOfCentralDirectory;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Creating value type constructor for type: Zip64EndOfCentralDirectoryRecord
    constexpr Zip64EndOfCentralDirectoryRecord(uint64_t SizeOfThisRecord_ = {}, uint16_t VersionMadeBy_ = {}, uint16_t VersionNeededToExtract_ = {}, uint NumberOfThisDisk_ = {}, uint NumberOfDiskWithStartOfCD_ = {}, uint64_t NumberOfEntriesOnThisDisk_ = {}, uint64_t NumberOfEntriesTotal_ = {}, uint64_t SizeOfCentralDirectory_ = {}, uint64_t OffsetOfCentralDirectory_ = {}) noexcept : SizeOfThisRecord{SizeOfThisRecord_}, VersionMadeBy{VersionMadeBy_}, VersionNeededToExtract{VersionNeededToExtract_}, NumberOfThisDisk{NumberOfThisDisk_}, NumberOfDiskWithStartOfCD{NumberOfDiskWithStartOfCD_}, NumberOfEntriesOnThisDisk{NumberOfEntriesOnThisDisk_}, NumberOfEntriesTotal{NumberOfEntriesTotal_}, SizeOfCentralDirectory{SizeOfCentralDirectory_}, OffsetOfCentralDirectory{OffsetOfCentralDirectory_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt64 SizeOfThisRecord
    [[deprecated("Use field access instead!")]] uint64_t& dyn_SizeOfThisRecord();
    // Get instance field reference: public System.UInt16 VersionMadeBy
    [[deprecated("Use field access instead!")]] uint16_t& dyn_VersionMadeBy();
    // Get instance field reference: public System.UInt16 VersionNeededToExtract
    [[deprecated("Use field access instead!")]] uint16_t& dyn_VersionNeededToExtract();
    // Get instance field reference: public System.UInt32 NumberOfThisDisk
    [[deprecated("Use field access instead!")]] uint& dyn_NumberOfThisDisk();
    // Get instance field reference: public System.UInt32 NumberOfDiskWithStartOfCD
    [[deprecated("Use field access instead!")]] uint& dyn_NumberOfDiskWithStartOfCD();
    // Get instance field reference: public System.UInt64 NumberOfEntriesOnThisDisk
    [[deprecated("Use field access instead!")]] uint64_t& dyn_NumberOfEntriesOnThisDisk();
    // Get instance field reference: public System.UInt64 NumberOfEntriesTotal
    [[deprecated("Use field access instead!")]] uint64_t& dyn_NumberOfEntriesTotal();
    // Get instance field reference: public System.UInt64 SizeOfCentralDirectory
    [[deprecated("Use field access instead!")]] uint64_t& dyn_SizeOfCentralDirectory();
    // Get instance field reference: public System.UInt64 OffsetOfCentralDirectory
    [[deprecated("Use field access instead!")]] uint64_t& dyn_OffsetOfCentralDirectory();
    // static public System.Boolean TryReadBlock(System.IO.BinaryReader reader, out System.IO.Compression.Zip64EndOfCentralDirectoryRecord zip64EOCDRecord)
    // Offset: 0x1699C38
    static bool TryReadBlock(::System::IO::BinaryReader* reader, ByRef<::System::IO::Compression::Zip64EndOfCentralDirectoryRecord> zip64EOCDRecord);
    // static public System.Void WriteBlock(System.IO.Stream stream, System.Int64 numberOfEntries, System.Int64 startOfCentralDirectory, System.Int64 sizeOfCentralDirectory)
    // Offset: 0x1699D74
    static void WriteBlock(::System::IO::Stream* stream, int64_t numberOfEntries, int64_t startOfCentralDirectory, int64_t sizeOfCentralDirectory);
  }; // System.IO.Compression.Zip64EndOfCentralDirectoryRecord
  #pragma pack(pop)
  static check_size<sizeof(Zip64EndOfCentralDirectoryRecord), 48 + sizeof(uint64_t)> __System_IO_Compression_Zip64EndOfCentralDirectoryRecordSizeCheck;
  static_assert(sizeof(Zip64EndOfCentralDirectoryRecord) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::Zip64EndOfCentralDirectoryRecord::TryReadBlock
// Il2CppName: TryReadBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IO::BinaryReader*, ByRef<::System::IO::Compression::Zip64EndOfCentralDirectoryRecord>)>(&System::IO::Compression::Zip64EndOfCentralDirectoryRecord::TryReadBlock)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryReader")->byval_arg;
    static auto* zip64EOCDRecord = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "Zip64EndOfCentralDirectoryRecord")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Zip64EndOfCentralDirectoryRecord), "TryReadBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, zip64EOCDRecord});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::Zip64EndOfCentralDirectoryRecord::WriteBlock
// Il2CppName: WriteBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IO::Stream*, int64_t, int64_t, int64_t)>(&System::IO::Compression::Zip64EndOfCentralDirectoryRecord::WriteBlock)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* numberOfEntries = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* startOfCentralDirectory = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* sizeOfCentralDirectory = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Zip64EndOfCentralDirectoryRecord), "WriteBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, numberOfEntries, startOfCentralDirectory, sizeOfCentralDirectory});
  }
};
