// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Compression.MatchState
#include "System/IO/Compression/MatchState.hpp"
// Completed includes
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: Match
  class Match;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::Match);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::Match*, "System.IO.Compression", "Match");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x1D
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.Match
  // [TokenAttribute] Offset: FFFFFFFF
  class Match : public ::Il2CppObject {
    public:
    public:
    // private System.IO.Compression.MatchState <State>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    ::System::IO::Compression::MatchState State;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::MatchState) == 0x4);
    // private System.Int32 <Position>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <Length>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte <Symbol>k__BackingField
    // Size: 0x1
    // Offset: 0x1C
    uint8_t Symbol;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Get instance field reference: private System.IO.Compression.MatchState <State>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::IO::Compression::MatchState& dyn_$State$k__BackingField();
    // Get instance field reference: private System.Int32 <Position>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Position$k__BackingField();
    // Get instance field reference: private System.Int32 <Length>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Length$k__BackingField();
    // Get instance field reference: private System.Byte <Symbol>k__BackingField
    [[deprecated("Use field access instead!")]] uint8_t& dyn_$Symbol$k__BackingField();
    // System.IO.Compression.MatchState get_State()
    // Offset: 0x16988F8
    ::System::IO::Compression::MatchState get_State();
    // System.Void set_State(System.IO.Compression.MatchState value)
    // Offset: 0x1698900
    void set_State(::System::IO::Compression::MatchState value);
    // System.Int32 get_Position()
    // Offset: 0x1698908
    int get_Position();
    // System.Void set_Position(System.Int32 value)
    // Offset: 0x1698910
    void set_Position(int value);
    // System.Int32 get_Length()
    // Offset: 0x1698918
    int get_Length();
    // System.Void set_Length(System.Int32 value)
    // Offset: 0x1698920
    void set_Length(int value);
    // System.Byte get_Symbol()
    // Offset: 0x1698928
    uint8_t get_Symbol();
    // System.Void set_Symbol(System.Byte value)
    // Offset: 0x1698930
    void set_Symbol(uint8_t value);
  }; // System.IO.Compression.Match
  #pragma pack(pop)
  static check_size<sizeof(Match), 28 + sizeof(uint8_t)> __System_IO_Compression_MatchSizeCheck;
  static_assert(sizeof(Match) == 0x1D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::Match::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Compression::MatchState (System::IO::Compression::Match::*)()>(&System::IO::Compression::Match::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Match*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::Match::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::Match::*)(::System::IO::Compression::MatchState)>(&System::IO::Compression::Match::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "MatchState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Match*), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::Match::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::Match::*)()>(&System::IO::Compression::Match::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Match*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::Match::set_Position
// Il2CppName: set_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::Match::*)(int)>(&System::IO::Compression::Match::set_Position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Match*), "set_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::Match::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::Match::*)()>(&System::IO::Compression::Match::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Match*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::Match::set_Length
// Il2CppName: set_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::Match::*)(int)>(&System::IO::Compression::Match::set_Length)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Match*), "set_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::Match::get_Symbol
// Il2CppName: get_Symbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::IO::Compression::Match::*)()>(&System::IO::Compression::Match::get_Symbol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Match*), "get_Symbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::Match::set_Symbol
// Il2CppName: set_Symbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::Match::*)(uint8_t)>(&System::IO::Compression::Match::set_Symbol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::Match*), "set_Symbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
