// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IO.Compression.ZipGenericExtraField
#include "System/IO/Compression/ZipGenericExtraField.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: BinaryReader
  class BinaryReader;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: ZipLocalFileHeader
  struct ZipLocalFileHeader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::ZipLocalFileHeader, "System.IO.Compression", "ZipLocalFileHeader");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IO.Compression.ZipLocalFileHeader
  // [TokenAttribute] Offset: FFFFFFFF
  struct ZipLocalFileHeader/*, public ::System::ValueType*/ {
    public:
    // Creating value type constructor for type: ZipLocalFileHeader
    constexpr ZipLocalFileHeader() noexcept {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static public System.Collections.Generic.List`1<System.IO.Compression.ZipGenericExtraField> GetExtraFields(System.IO.BinaryReader reader)
    // Offset: 0x169FC0C
    static ::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>* GetExtraFields(::System::IO::BinaryReader* reader);
    // static public System.Boolean TrySkipBlock(System.IO.BinaryReader reader)
    // Offset: 0x169F194
    static bool TrySkipBlock(::System::IO::BinaryReader* reader);
  }; // System.IO.Compression.ZipLocalFileHeader
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::ZipLocalFileHeader::GetExtraFields
// Il2CppName: GetExtraFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::IO::Compression::ZipGenericExtraField>* (*)(::System::IO::BinaryReader*)>(&System::IO::Compression::ZipLocalFileHeader::GetExtraFields)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipLocalFileHeader), "GetExtraFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::ZipLocalFileHeader::TrySkipBlock
// Il2CppName: TrySkipBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IO::BinaryReader*)>(&System::IO::Compression::ZipLocalFileHeader::TrySkipBlock)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.IO", "BinaryReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::ZipLocalFileHeader), "TrySkipBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
