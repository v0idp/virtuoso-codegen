// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Compression.DeflateInput
#include "System/IO/Compression/DeflateInput.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::DeflateInput::InputState, "System.IO.Compression", "DeflateInput/InputState");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IO.Compression.DeflateInput/System.IO.Compression.InputState
  // [TokenAttribute] Offset: FFFFFFFF
  struct DeflateInput::InputState/*, public ::System::ValueType*/ {
    public:
    public:
    // readonly System.Int32 _count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly System.Int32 _startIndex
    // Size: 0x4
    // Offset: 0x4
    int startIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: InputState
    constexpr InputState(int count_ = {}, int startIndex_ = {}) noexcept : count{count_}, startIndex{startIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: readonly System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // Get instance field reference: readonly System.Int32 _startIndex
    [[deprecated("Use field access instead!")]] int& dyn__startIndex();
    // System.Void .ctor(System.Int32 count, System.Int32 startIndex)
    // Offset: 0x1693108
    // ABORTED: conflicts with another method.  InputState(int count, int startIndex);
  }; // System.IO.Compression.DeflateInput/System.IO.Compression.InputState
  #pragma pack(pop)
  static check_size<sizeof(DeflateInput::InputState), 4 + sizeof(int)> __System_IO_Compression_DeflateInput_InputStateSizeCheck;
  static_assert(sizeof(DeflateInput::InputState) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::DeflateInput::InputState::InputState
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
