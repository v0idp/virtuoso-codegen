// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO::Compression
namespace System::IO::Compression {
  // Forward declaring type: DeflateInput
  class DeflateInput;
  // Forward declaring type: Match
  class Match;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: FastEncoderWindow
  class FastEncoderWindow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::FastEncoderWindow);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::FastEncoderWindow*, "System.IO.Compression", "FastEncoderWindow");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.FastEncoderWindow
  // [TokenAttribute] Offset: FFFFFFFF
  class FastEncoderWindow : public ::Il2CppObject {
    public:
    public:
    // private System.Byte[] _window
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> window;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _bufPos
    // Size: 0x4
    // Offset: 0x18
    int bufPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _bufEnd
    // Size: 0x4
    // Offset: 0x1C
    int bufEnd;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt16[] _prev
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint16_t> prev;
    // Field size check
    static_assert(sizeof(::ArrayW<uint16_t>) == 0x8);
    // private System.UInt16[] _lookup
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<uint16_t> lookup;
    // Field size check
    static_assert(sizeof(::ArrayW<uint16_t>) == 0x8);
    public:
    // Get instance field reference: private System.Byte[] _window
    [[deprecated]] ::ArrayW<uint8_t>& dyn__window();
    // Get instance field reference: private System.Int32 _bufPos
    [[deprecated]] int& dyn__bufPos();
    // Get instance field reference: private System.Int32 _bufEnd
    [[deprecated]] int& dyn__bufEnd();
    // Get instance field reference: private System.UInt16[] _prev
    [[deprecated]] ::ArrayW<uint16_t>& dyn__prev();
    // Get instance field reference: private System.UInt16[] _lookup
    [[deprecated]] ::ArrayW<uint16_t>& dyn__lookup();
    // public System.Int32 get_BytesAvailable()
    // Offset: 0x16952C8
    int get_BytesAvailable();
    // public System.IO.Compression.DeflateInput get_UnprocessedInput()
    // Offset: 0x16952D4
    ::System::IO::Compression::DeflateInput* get_UnprocessedInput();
    // public System.Int32 get_FreeWindowSpace()
    // Offset: 0x169565C
    int get_FreeWindowSpace();
    // public System.Void FlushWindow()
    // Offset: 0x1695354
    void FlushWindow();
    // private System.Void ResetWindow()
    // Offset: 0x1696104
    void ResetWindow();
    // public System.Void CopyBytes(System.Byte[] inputBuffer, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x169566C
    void CopyBytes(::ArrayW<uint8_t> inputBuffer, int startIndex, int count);
    // public System.Void MoveWindows()
    // Offset: 0x1696194
    void MoveWindows();
    // private System.UInt32 HashValue(System.UInt32 hash, System.Byte b)
    // Offset: 0x169625C
    uint HashValue(uint hash, uint8_t b);
    // private System.UInt32 InsertString(ref System.UInt32 hash)
    // Offset: 0x1696268
    uint InsertString(ByRef<uint> hash);
    // private System.Void InsertStrings(ref System.UInt32 hash, System.Int32 matchLen)
    // Offset: 0x1696308
    void InsertStrings(ByRef<uint> hash, int matchLen);
    // System.Boolean GetNextSymbolOrMatch(System.IO.Compression.Match match)
    // Offset: 0x16957E0
    bool GetNextSymbolOrMatch(::System::IO::Compression::Match* match);
    // private System.Int32 FindMatch(System.Int32 search, out System.Int32 matchPos, System.Int32 searchDepth, System.Int32 niceLength)
    // Offset: 0x169637C
    int FindMatch(int search, ByRef<int> matchPos, int searchDepth, int niceLength);
  }; // System.IO.Compression.FastEncoderWindow
  #pragma pack(pop)
  static check_size<sizeof(FastEncoderWindow), 40 + sizeof(::ArrayW<uint16_t>)> __System_IO_Compression_FastEncoderWindowSizeCheck;
  static_assert(sizeof(FastEncoderWindow) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::get_BytesAvailable
// Il2CppName: get_BytesAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::FastEncoderWindow::*)()>(&System::IO::Compression::FastEncoderWindow::get_BytesAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "get_BytesAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::get_UnprocessedInput
// Il2CppName: get_UnprocessedInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Compression::DeflateInput* (System::IO::Compression::FastEncoderWindow::*)()>(&System::IO::Compression::FastEncoderWindow::get_UnprocessedInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "get_UnprocessedInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::get_FreeWindowSpace
// Il2CppName: get_FreeWindowSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::FastEncoderWindow::*)()>(&System::IO::Compression::FastEncoderWindow::get_FreeWindowSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "get_FreeWindowSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::FlushWindow
// Il2CppName: FlushWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoderWindow::*)()>(&System::IO::Compression::FastEncoderWindow::FlushWindow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "FlushWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::ResetWindow
// Il2CppName: ResetWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoderWindow::*)()>(&System::IO::Compression::FastEncoderWindow::ResetWindow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "ResetWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::CopyBytes
// Il2CppName: CopyBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoderWindow::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::FastEncoderWindow::CopyBytes)> {
  static const MethodInfo* get() {
    static auto* inputBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "CopyBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputBuffer, startIndex, count});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::MoveWindows
// Il2CppName: MoveWindows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoderWindow::*)()>(&System::IO::Compression::FastEncoderWindow::MoveWindows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "MoveWindows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::HashValue
// Il2CppName: HashValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::IO::Compression::FastEncoderWindow::*)(uint, uint8_t)>(&System::IO::Compression::FastEncoderWindow::HashValue)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "HashValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, b});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::InsertString
// Il2CppName: InsertString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::IO::Compression::FastEncoderWindow::*)(ByRef<uint>)>(&System::IO::Compression::FastEncoderWindow::InsertString)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "InsertString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::InsertStrings
// Il2CppName: InsertStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::FastEncoderWindow::*)(ByRef<uint>, int)>(&System::IO::Compression::FastEncoderWindow::InsertStrings)> {
  static const MethodInfo* get() {
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* matchLen = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "InsertStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hash, matchLen});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::GetNextSymbolOrMatch
// Il2CppName: GetNextSymbolOrMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::FastEncoderWindow::*)(::System::IO::Compression::Match*)>(&System::IO::Compression::FastEncoderWindow::GetNextSymbolOrMatch)> {
  static const MethodInfo* get() {
    static auto* match = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "Match")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "GetNextSymbolOrMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{match});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::FastEncoderWindow::FindMatch
// Il2CppName: FindMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::FastEncoderWindow::*)(int, ByRef<int>, int, int)>(&System::IO::Compression::FastEncoderWindow::FindMatch)> {
  static const MethodInfo* get() {
    static auto* search = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* matchPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* searchDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* niceLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::FastEncoderWindow*), "FindMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{search, matchPos, searchDepth, niceLength});
  }
};
