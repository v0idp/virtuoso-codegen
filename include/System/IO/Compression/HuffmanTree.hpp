// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO::Compression
namespace System::IO::Compression {
  // Forward declaring type: InputBuffer
  class InputBuffer;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: HuffmanTree
  class HuffmanTree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::HuffmanTree);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::HuffmanTree*, "System.IO.Compression", "HuffmanTree");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.HuffmanTree
  // [TokenAttribute] Offset: FFFFFFFF
  class HuffmanTree : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Int32 _tableBits
    // Size: 0x4
    // Offset: 0x10
    int tableBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: tableBits and: table
    char __padding0[0x4] = {};
    // private readonly System.Int16[] _table
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int16_t> table;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // private readonly System.Int16[] _left
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int16_t> left;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // private readonly System.Int16[] _right
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int16_t> right;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // private readonly System.Byte[] _codeLengthArray
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> codeLengthArray;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.Int32 _tableMask
    // Size: 0x4
    // Offset: 0x38
    int tableMask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly System.IO.Compression.HuffmanTree <StaticLiteralLengthTree>k__BackingField
    static ::System::IO::Compression::HuffmanTree* _get_$StaticLiteralLengthTree$k__BackingField();
    // Set static field: static private readonly System.IO.Compression.HuffmanTree <StaticLiteralLengthTree>k__BackingField
    static void _set_$StaticLiteralLengthTree$k__BackingField(::System::IO::Compression::HuffmanTree* value);
    // Get static field: static private readonly System.IO.Compression.HuffmanTree <StaticDistanceTree>k__BackingField
    static ::System::IO::Compression::HuffmanTree* _get_$StaticDistanceTree$k__BackingField();
    // Set static field: static private readonly System.IO.Compression.HuffmanTree <StaticDistanceTree>k__BackingField
    static void _set_$StaticDistanceTree$k__BackingField(::System::IO::Compression::HuffmanTree* value);
    // Get instance field reference: private readonly System.Int32 _tableBits
    [[deprecated]] int& dyn__tableBits();
    // Get instance field reference: private readonly System.Int16[] _table
    [[deprecated]] ::ArrayW<int16_t>& dyn__table();
    // Get instance field reference: private readonly System.Int16[] _left
    [[deprecated]] ::ArrayW<int16_t>& dyn__left();
    // Get instance field reference: private readonly System.Int16[] _right
    [[deprecated]] ::ArrayW<int16_t>& dyn__right();
    // Get instance field reference: private readonly System.Byte[] _codeLengthArray
    [[deprecated]] ::ArrayW<uint8_t>& dyn__codeLengthArray();
    // Get instance field reference: private readonly System.Int32 _tableMask
    [[deprecated]] int& dyn__tableMask();
    // static public System.IO.Compression.HuffmanTree get_StaticLiteralLengthTree()
    // Offset: 0x1696510
    static ::System::IO::Compression::HuffmanTree* get_StaticLiteralLengthTree();
    // static public System.IO.Compression.HuffmanTree get_StaticDistanceTree()
    // Offset: 0x1696574
    static ::System::IO::Compression::HuffmanTree* get_StaticDistanceTree();
    // public System.Void .ctor(System.Byte[] codeLengths)
    // Offset: 0x16965D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HuffmanTree* New_ctor(::ArrayW<uint8_t> codeLengths) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Compression::HuffmanTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HuffmanTree*, creationType>(codeLengths)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1696E94
    static void _cctor();
    // static private System.Byte[] GetStaticLiteralTreeLength()
    // Offset: 0x1696870
    static ::ArrayW<uint8_t> GetStaticLiteralTreeLength();
    // static private System.Byte[] GetStaticDistanceTreeLength()
    // Offset: 0x169696C
    static ::ArrayW<uint8_t> GetStaticDistanceTreeLength();
    // private System.UInt32[] CalculateHuffmanCode()
    // Offset: 0x16969F8
    ::ArrayW<uint> CalculateHuffmanCode();
    // private System.Void CreateTable()
    // Offset: 0x16966B0
    void CreateTable();
    // public System.Int32 GetNextSymbol(System.IO.Compression.InputBuffer input)
    // Offset: 0x1696C1C
    int GetNextSymbol(::System::IO::Compression::InputBuffer* input);
  }; // System.IO.Compression.HuffmanTree
  #pragma pack(pop)
  static check_size<sizeof(HuffmanTree), 56 + sizeof(int)> __System_IO_Compression_HuffmanTreeSizeCheck;
  static_assert(sizeof(HuffmanTree) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::get_StaticLiteralLengthTree
// Il2CppName: get_StaticLiteralLengthTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Compression::HuffmanTree* (*)()>(&System::IO::Compression::HuffmanTree::get_StaticLiteralLengthTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::HuffmanTree*), "get_StaticLiteralLengthTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::get_StaticDistanceTree
// Il2CppName: get_StaticDistanceTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Compression::HuffmanTree* (*)()>(&System::IO::Compression::HuffmanTree::get_StaticDistanceTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::HuffmanTree*), "get_StaticDistanceTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::Compression::HuffmanTree::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::HuffmanTree*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::GetStaticLiteralTreeLength
// Il2CppName: GetStaticLiteralTreeLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)()>(&System::IO::Compression::HuffmanTree::GetStaticLiteralTreeLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::HuffmanTree*), "GetStaticLiteralTreeLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::GetStaticDistanceTreeLength
// Il2CppName: GetStaticDistanceTreeLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)()>(&System::IO::Compression::HuffmanTree::GetStaticDistanceTreeLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::HuffmanTree*), "GetStaticDistanceTreeLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::CalculateHuffmanCode
// Il2CppName: CalculateHuffmanCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (System::IO::Compression::HuffmanTree::*)()>(&System::IO::Compression::HuffmanTree::CalculateHuffmanCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::HuffmanTree*), "CalculateHuffmanCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::CreateTable
// Il2CppName: CreateTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::HuffmanTree::*)()>(&System::IO::Compression::HuffmanTree::CreateTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::HuffmanTree*), "CreateTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::HuffmanTree::GetNextSymbol
// Il2CppName: GetNextSymbol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::HuffmanTree::*)(::System::IO::Compression::InputBuffer*)>(&System::IO::Compression::HuffmanTree::GetNextSymbol)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System.IO.Compression", "InputBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::HuffmanTree*), "GetNextSymbol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
