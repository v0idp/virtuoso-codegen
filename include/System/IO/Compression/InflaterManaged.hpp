// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.Compression.InflaterState
#include "System/IO/Compression/InflaterState.hpp"
// Including type: System.IO.Compression.BlockType
#include "System/IO/Compression/BlockType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO::Compression
namespace System::IO::Compression {
  // Forward declaring type: OutputWindow
  class OutputWindow;
  // Forward declaring type: InputBuffer
  class InputBuffer;
  // Forward declaring type: HuffmanTree
  class HuffmanTree;
  // Forward declaring type: IFileFormatReader
  class IFileFormatReader;
}
// Completed forward declares
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Forward declaring type: InflaterManaged
  class InflaterManaged;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::Compression::InflaterManaged);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::Compression::InflaterManaged*, "System.IO.Compression", "InflaterManaged");
// Type namespace: System.IO.Compression
namespace System::IO::Compression {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.Compression.InflaterManaged
  // [TokenAttribute] Offset: FFFFFFFF
  class InflaterManaged : public ::Il2CppObject {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.IO.Compression.OutputWindow _output
    // Size: 0x8
    // Offset: 0x10
    ::System::IO::Compression::OutputWindow* output;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::OutputWindow*) == 0x8);
    // private readonly System.IO.Compression.InputBuffer _input
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Compression::InputBuffer* input;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::InputBuffer*) == 0x8);
    // private System.IO.Compression.HuffmanTree _literalLengthTree
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::Compression::HuffmanTree* literalLengthTree;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::HuffmanTree*) == 0x8);
    // private System.IO.Compression.HuffmanTree _distanceTree
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Compression::HuffmanTree* distanceTree;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::HuffmanTree*) == 0x8);
    // private System.IO.Compression.InflaterState _state
    // Size: 0x4
    // Offset: 0x30
    ::System::IO::Compression::InflaterState state;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::InflaterState) == 0x4);
    // private System.Boolean _hasFormatReader
    // Size: 0x1
    // Offset: 0x34
    bool hasFormatReader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasFormatReader and: bfinal
    char __padding5[0x3] = {};
    // private System.Int32 _bfinal
    // Size: 0x4
    // Offset: 0x38
    int bfinal;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.IO.Compression.BlockType _blockType
    // Size: 0x4
    // Offset: 0x3C
    ::System::IO::Compression::BlockType blockType;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::BlockType) == 0x4);
    // private readonly System.Byte[] _blockLengthBuffer
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> blockLengthBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _blockLength
    // Size: 0x4
    // Offset: 0x48
    int blockLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _length
    // Size: 0x4
    // Offset: 0x4C
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _distanceCode
    // Size: 0x4
    // Offset: 0x50
    int distanceCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _extraBits
    // Size: 0x4
    // Offset: 0x54
    int extraBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _loopCounter
    // Size: 0x4
    // Offset: 0x58
    int loopCounter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _literalLengthCodeCount
    // Size: 0x4
    // Offset: 0x5C
    int literalLengthCodeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _distanceCodeCount
    // Size: 0x4
    // Offset: 0x60
    int distanceCodeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _codeLengthCodeCount
    // Size: 0x4
    // Offset: 0x64
    int codeLengthCodeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _codeArraySize
    // Size: 0x4
    // Offset: 0x68
    int codeArraySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lengthCode
    // Size: 0x4
    // Offset: 0x6C
    int lengthCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Byte[] _codeList
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<uint8_t> codeList;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.Byte[] _codeLengthTreeCodeLength
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<uint8_t> codeLengthTreeCodeLength;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.Boolean _deflate64
    // Size: 0x1
    // Offset: 0x80
    bool deflate64;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: deflate64 and: codeLengthTree
    char __padding21[0x7] = {};
    // private System.IO.Compression.HuffmanTree _codeLengthTree
    // Size: 0x8
    // Offset: 0x88
    ::System::IO::Compression::HuffmanTree* codeLengthTree;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::HuffmanTree*) == 0x8);
    // private System.IO.Compression.IFileFormatReader _formatReader
    // Size: 0x8
    // Offset: 0x90
    ::System::IO::Compression::IFileFormatReader* formatReader;
    // Field size check
    static_assert(sizeof(::System::IO::Compression::IFileFormatReader*) == 0x8);
    public:
    // Get static field: static private readonly System.Byte[] s_extraLengthBits
    static ::ArrayW<uint8_t> _get_s_extraLengthBits();
    // Set static field: static private readonly System.Byte[] s_extraLengthBits
    static void _set_s_extraLengthBits(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Int32[] s_lengthBase
    static ::ArrayW<int> _get_s_lengthBase();
    // Set static field: static private readonly System.Int32[] s_lengthBase
    static void _set_s_lengthBase(::ArrayW<int> value);
    // Get static field: static private readonly System.Int32[] s_distanceBasePosition
    static ::ArrayW<int> _get_s_distanceBasePosition();
    // Set static field: static private readonly System.Int32[] s_distanceBasePosition
    static void _set_s_distanceBasePosition(::ArrayW<int> value);
    // Get static field: static private readonly System.Byte[] s_codeOrder
    static ::ArrayW<uint8_t> _get_s_codeOrder();
    // Set static field: static private readonly System.Byte[] s_codeOrder
    static void _set_s_codeOrder(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.Byte[] s_staticDistanceTreeTable
    static ::ArrayW<uint8_t> _get_s_staticDistanceTreeTable();
    // Set static field: static private readonly System.Byte[] s_staticDistanceTreeTable
    static void _set_s_staticDistanceTreeTable(::ArrayW<uint8_t> value);
    // Get instance field reference: private readonly System.IO.Compression.OutputWindow _output
    ::System::IO::Compression::OutputWindow*& dyn__output();
    // Get instance field reference: private readonly System.IO.Compression.InputBuffer _input
    ::System::IO::Compression::InputBuffer*& dyn__input();
    // Get instance field reference: private System.IO.Compression.HuffmanTree _literalLengthTree
    ::System::IO::Compression::HuffmanTree*& dyn__literalLengthTree();
    // Get instance field reference: private System.IO.Compression.HuffmanTree _distanceTree
    ::System::IO::Compression::HuffmanTree*& dyn__distanceTree();
    // Get instance field reference: private System.IO.Compression.InflaterState _state
    ::System::IO::Compression::InflaterState& dyn__state();
    // Get instance field reference: private System.Boolean _hasFormatReader
    bool& dyn__hasFormatReader();
    // Get instance field reference: private System.Int32 _bfinal
    int& dyn__bfinal();
    // Get instance field reference: private System.IO.Compression.BlockType _blockType
    ::System::IO::Compression::BlockType& dyn__blockType();
    // Get instance field reference: private readonly System.Byte[] _blockLengthBuffer
    ::ArrayW<uint8_t>& dyn__blockLengthBuffer();
    // Get instance field reference: private System.Int32 _blockLength
    int& dyn__blockLength();
    // Get instance field reference: private System.Int32 _length
    int& dyn__length();
    // Get instance field reference: private System.Int32 _distanceCode
    int& dyn__distanceCode();
    // Get instance field reference: private System.Int32 _extraBits
    int& dyn__extraBits();
    // Get instance field reference: private System.Int32 _loopCounter
    int& dyn__loopCounter();
    // Get instance field reference: private System.Int32 _literalLengthCodeCount
    int& dyn__literalLengthCodeCount();
    // Get instance field reference: private System.Int32 _distanceCodeCount
    int& dyn__distanceCodeCount();
    // Get instance field reference: private System.Int32 _codeLengthCodeCount
    int& dyn__codeLengthCodeCount();
    // Get instance field reference: private System.Int32 _codeArraySize
    int& dyn__codeArraySize();
    // Get instance field reference: private System.Int32 _lengthCode
    int& dyn__lengthCode();
    // Get instance field reference: private readonly System.Byte[] _codeList
    ::ArrayW<uint8_t>& dyn__codeList();
    // Get instance field reference: private readonly System.Byte[] _codeLengthTreeCodeLength
    ::ArrayW<uint8_t>& dyn__codeLengthTreeCodeLength();
    // Get instance field reference: private readonly System.Boolean _deflate64
    bool& dyn__deflate64();
    // Get instance field reference: private System.IO.Compression.HuffmanTree _codeLengthTree
    ::System::IO::Compression::HuffmanTree*& dyn__codeLengthTree();
    // Get instance field reference: private System.IO.Compression.IFileFormatReader _formatReader
    ::System::IO::Compression::IFileFormatReader*& dyn__formatReader();
    // System.Void .ctor(System.IO.Compression.IFileFormatReader reader, System.Boolean deflate64)
    // Offset: 0x111BB40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InflaterManaged* New_ctor(::System::IO::Compression::IFileFormatReader* reader, bool deflate64) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::Compression::InflaterManaged::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InflaterManaged*, creationType>(reader, deflate64)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1120DB4
    static void _cctor();
    // private System.Void Reset()
    // Offset: 0x111F72C
    void Reset();
    // public System.Void SetInput(System.Byte[] inputBytes, System.Int32 offset, System.Int32 length)
    // Offset: 0x111C390
    void SetInput(::ArrayW<uint8_t> inputBytes, int offset, int length);
    // public System.Boolean Finished()
    // Offset: 0x111C37C
    bool Finished();
    // public System.Int32 Inflate(System.Byte[] bytes, System.Int32 offset, System.Int32 length)
    // Offset: 0x111C1B0
    int Inflate(::ArrayW<uint8_t> bytes, int offset, int length);
    // private System.Boolean Decode()
    // Offset: 0x111F820
    bool Decode();
    // private System.Boolean DecodeUncompressedBlock(out System.Boolean end_of_block)
    // Offset: 0x11208C4
    bool DecodeUncompressedBlock(ByRef<bool> end_of_block);
    // private System.Boolean DecodeBlock(out System.Boolean end_of_block_code_seen)
    // Offset: 0x1120484
    bool DecodeBlock(ByRef<bool> end_of_block_code_seen);
    // private System.Boolean DecodeDynamicBlockHeader()
    // Offset: 0x111FD44
    bool DecodeDynamicBlockHeader();
    // public System.Void Dispose()
    // Offset: 0x111D4D8
    void Dispose();
  }; // System.IO.Compression.InflaterManaged
  #pragma pack(pop)
  static check_size<sizeof(InflaterManaged), 144 + sizeof(::System::IO::Compression::IFileFormatReader*)> __System_IO_Compression_InflaterManagedSizeCheck;
  static_assert(sizeof(InflaterManaged) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::Compression::InflaterManaged::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::InflaterManaged::*)()>(&System::IO::Compression::InflaterManaged::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::SetInput
// Il2CppName: SetInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::InflaterManaged::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::InflaterManaged::SetInput)> {
  static const MethodInfo* get() {
    static auto* inputBytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "SetInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputBytes, offset, length});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::Finished
// Il2CppName: Finished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::InflaterManaged::*)()>(&System::IO::Compression::InflaterManaged::Finished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "Finished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::Inflate
// Il2CppName: Inflate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::Compression::InflaterManaged::*)(::ArrayW<uint8_t>, int, int)>(&System::IO::Compression::InflaterManaged::Inflate)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "Inflate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes, offset, length});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::Decode
// Il2CppName: Decode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::InflaterManaged::*)()>(&System::IO::Compression::InflaterManaged::Decode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "Decode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::DecodeUncompressedBlock
// Il2CppName: DecodeUncompressedBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::InflaterManaged::*)(ByRef<bool>)>(&System::IO::Compression::InflaterManaged::DecodeUncompressedBlock)> {
  static const MethodInfo* get() {
    static auto* end_of_block = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "DecodeUncompressedBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{end_of_block});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::DecodeBlock
// Il2CppName: DecodeBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::InflaterManaged::*)(ByRef<bool>)>(&System::IO::Compression::InflaterManaged::DecodeBlock)> {
  static const MethodInfo* get() {
    static auto* end_of_block_code_seen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "DecodeBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{end_of_block_code_seen});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::DecodeDynamicBlockHeader
// Il2CppName: DecodeDynamicBlockHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::Compression::InflaterManaged::*)()>(&System::IO::Compression::InflaterManaged::DecodeDynamicBlockHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "DecodeDynamicBlockHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::Compression::InflaterManaged::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::Compression::InflaterManaged::*)()>(&System::IO::Compression::InflaterManaged::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::Compression::InflaterManaged*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
