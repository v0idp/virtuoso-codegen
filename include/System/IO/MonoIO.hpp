// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: DateTime
  struct DateTime;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: MonoIOError
  struct MonoIOError;
  // Forward declaring type: FileAttributes
  struct FileAttributes;
  // Forward declaring type: MonoFileType
  struct MonoFileType;
  // Forward declaring type: MonoIOStat
  struct MonoIOStat;
  // Forward declaring type: FileMode
  struct FileMode;
  // Forward declaring type: FileAccess
  struct FileAccess;
  // Forward declaring type: FileShare
  struct FileShare;
  // Forward declaring type: FileOptions
  struct FileOptions;
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System::Runtime::InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: SafeHandle
  class SafeHandle;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Forward declaring type: MonoIO
  class MonoIO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::MonoIO);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::MonoIO*, "System.IO", "MonoIO");
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.MonoIO
  // [TokenAttribute] Offset: FFFFFFFF
  class MonoIO : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.IntPtr InvalidHandle
    static ::System::IntPtr _get_InvalidHandle();
    // Set static field: static public readonly System.IntPtr InvalidHandle
    static void _set_InvalidHandle(::System::IntPtr value);
    // Get static field: static private System.Boolean dump_handles
    static bool _get_dump_handles();
    // Set static field: static private System.Boolean dump_handles
    static void _set_dump_handles(bool value);
    // static public System.IntPtr get_ConsoleOutput()
    // Offset: 0x100D38C
    static ::System::IntPtr get_ConsoleOutput();
    // static public System.IntPtr get_ConsoleInput()
    // Offset: 0x100D390
    static ::System::IntPtr get_ConsoleInput();
    // static public System.IntPtr get_ConsoleError()
    // Offset: 0x100D394
    static ::System::IntPtr get_ConsoleError();
    // static public System.Char get_VolumeSeparatorChar()
    // Offset: 0x100D398
    static ::Il2CppChar get_VolumeSeparatorChar();
    // static public System.Char get_DirectorySeparatorChar()
    // Offset: 0x100D39C
    static ::Il2CppChar get_DirectorySeparatorChar();
    // static public System.Char get_AltDirectorySeparatorChar()
    // Offset: 0x100D3A0
    static ::Il2CppChar get_AltDirectorySeparatorChar();
    // static public System.Char get_PathSeparator()
    // Offset: 0x100D3A4
    static ::Il2CppChar get_PathSeparator();
    // static private System.Void .cctor()
    // Offset: 0x100D3AC
    static void _cctor();
    // static public System.Exception GetException(System.IO.MonoIOError error)
    // Offset: 0x100B83C
    static ::System::Exception* GetException(::System::IO::MonoIOError error);
    // static public System.Exception GetException(System.String path, System.IO.MonoIOError error)
    // Offset: 0x100B96C
    static ::System::Exception* GetException(::StringW path, ::System::IO::MonoIOError error);
    // static private System.Boolean CreateDirectory(System.Char* path, out System.IO.MonoIOError error)
    // Offset: 0x100C10C
    static bool CreateDirectory(::Il2CppChar* path, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean CreateDirectory(System.String path, out System.IO.MonoIOError error)
    // Offset: 0x100C110
    static bool CreateDirectory(::StringW path, ByRef<::System::IO::MonoIOError> error);
    // static private System.Boolean RemoveDirectory(System.Char* path, out System.IO.MonoIOError error)
    // Offset: 0x100C190
    static bool RemoveDirectory(::Il2CppChar* path, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean RemoveDirectory(System.String path, out System.IO.MonoIOError error)
    // Offset: 0x100C194
    static bool RemoveDirectory(::StringW path, ByRef<::System::IO::MonoIOError> error);
    // static public System.String GetCurrentDirectory(out System.IO.MonoIOError error)
    // Offset: 0x100C214
    static ::StringW GetCurrentDirectory(ByRef<::System::IO::MonoIOError> error);
    // static private System.Boolean MoveFile(System.Char* path, System.Char* dest, out System.IO.MonoIOError error)
    // Offset: 0x100C218
    static bool MoveFile(::Il2CppChar* path, ::Il2CppChar* dest, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean MoveFile(System.String path, System.String dest, out System.IO.MonoIOError error)
    // Offset: 0x100C21C
    static bool MoveFile(::StringW path, ::StringW dest, ByRef<::System::IO::MonoIOError> error);
    // static private System.Boolean CopyFile(System.Char* path, System.Char* dest, System.Boolean overwrite, out System.IO.MonoIOError error)
    // Offset: 0x100C2B4
    static bool CopyFile(::Il2CppChar* path, ::Il2CppChar* dest, bool overwrite, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean CopyFile(System.String path, System.String dest, System.Boolean overwrite, out System.IO.MonoIOError error)
    // Offset: 0x100C2BC
    static bool CopyFile(::StringW path, ::StringW dest, bool overwrite, ByRef<::System::IO::MonoIOError> error);
    // static private System.Boolean DeleteFile(System.Char* path, out System.IO.MonoIOError error)
    // Offset: 0x100C364
    static bool DeleteFile(::Il2CppChar* path, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean DeleteFile(System.String path, out System.IO.MonoIOError error)
    // Offset: 0x100C368
    static bool DeleteFile(::StringW path, ByRef<::System::IO::MonoIOError> error);
    // static private System.IO.FileAttributes GetFileAttributes(System.Char* path, out System.IO.MonoIOError error)
    // Offset: 0x100C3E8
    static ::System::IO::FileAttributes GetFileAttributes(::Il2CppChar* path, ByRef<::System::IO::MonoIOError> error);
    // static public System.IO.FileAttributes GetFileAttributes(System.String path, out System.IO.MonoIOError error)
    // Offset: 0x100C3EC
    static ::System::IO::FileAttributes GetFileAttributes(::StringW path, ByRef<::System::IO::MonoIOError> error);
    // static private System.IO.MonoFileType GetFileType(System.IntPtr handle, out System.IO.MonoIOError error)
    // Offset: 0x100C46C
    static ::System::IO::MonoFileType GetFileType(::System::IntPtr handle, ByRef<::System::IO::MonoIOError> error);
    // static public System.IO.MonoFileType GetFileType(System.Runtime.InteropServices.SafeHandle safeHandle, out System.IO.MonoIOError error)
    // Offset: 0x100C470
    static ::System::IO::MonoFileType GetFileType(::System::Runtime::InteropServices::SafeHandle* safeHandle, ByRef<::System::IO::MonoIOError> error);
    // static private System.IntPtr FindFirstFile(System.Char* pathWithPattern, out System.String fileName, out System.Int32 fileAttr, out System.Int32 error)
    // Offset: 0x100C5A0
    static ::System::IntPtr FindFirstFile(::Il2CppChar* pathWithPattern, ByRef<::StringW> fileName, ByRef<int> fileAttr, ByRef<int> error);
    // static public System.IntPtr FindFirstFile(System.String pathWithPattern, out System.String fileName, out System.Int32 fileAttr, out System.Int32 error)
    // Offset: 0x100C5A4
    static ::System::IntPtr FindFirstFile(::StringW pathWithPattern, ByRef<::StringW> fileName, ByRef<int> fileAttr, ByRef<int> error);
    // static public System.Boolean FindNextFile(System.IntPtr hnd, out System.String fileName, out System.Int32 fileAttr, out System.Int32 error)
    // Offset: 0x100C63C
    static bool FindNextFile(::System::IntPtr hnd, ByRef<::StringW> fileName, ByRef<int> fileAttr, ByRef<int> error);
    // static public System.Boolean FindCloseFile(System.IntPtr hnd)
    // Offset: 0x100C640
    static bool FindCloseFile(::System::IntPtr hnd);
    // static public System.Boolean Exists(System.String path, out System.IO.MonoIOError error)
    // Offset: 0x100C644
    static bool Exists(::StringW path, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean ExistsFile(System.String path, out System.IO.MonoIOError error)
    // Offset: 0x100C6C0
    static bool ExistsFile(::StringW path, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean ExistsDirectory(System.String path, out System.IO.MonoIOError error)
    // Offset: 0x100C74C
    static bool ExistsDirectory(::StringW path, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean ExistsSymlink(System.String path, out System.IO.MonoIOError error)
    // Offset: 0x100C7E8
    static bool ExistsSymlink(::StringW path, ByRef<::System::IO::MonoIOError> error);
    // static private System.Boolean GetFileStat(System.Char* path, out System.IO.MonoIOStat stat, out System.IO.MonoIOError error)
    // Offset: 0x100C870
    static bool GetFileStat(::Il2CppChar* path, ByRef<::System::IO::MonoIOStat> stat, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean GetFileStat(System.String path, out System.IO.MonoIOStat stat, out System.IO.MonoIOError error)
    // Offset: 0x100C874
    static bool GetFileStat(::StringW path, ByRef<::System::IO::MonoIOStat> stat, ByRef<::System::IO::MonoIOError> error);
    // static private System.IntPtr Open(System.Char* filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, out System.IO.MonoIOError error)
    // Offset: 0x100C8FC
    static ::System::IntPtr Open(::Il2CppChar* filename, ::System::IO::FileMode mode, ::System::IO::FileAccess access, ::System::IO::FileShare share, ::System::IO::FileOptions options, ByRef<::System::IO::MonoIOError> error);
    // static public System.IntPtr Open(System.String filename, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.FileOptions options, out System.IO.MonoIOError error)
    // Offset: 0x100C900
    static ::System::IntPtr Open(::StringW filename, ::System::IO::FileMode mode, ::System::IO::FileAccess access, ::System::IO::FileShare share, ::System::IO::FileOptions options, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean Close(System.IntPtr handle, out System.IO.MonoIOError error)
    // Offset: 0x100C9B0
    static bool Close(::System::IntPtr handle, ByRef<::System::IO::MonoIOError> error);
    // static private System.Int32 Read(System.IntPtr handle, System.Byte[] dest, System.Int32 dest_offset, System.Int32 count, out System.IO.MonoIOError error)
    // Offset: 0x100C9B4
    static int Read(::System::IntPtr handle, ::ArrayW<uint8_t> dest, int dest_offset, int count, ByRef<::System::IO::MonoIOError> error);
    // static public System.Int32 Read(System.Runtime.InteropServices.SafeHandle safeHandle, System.Byte[] dest, System.Int32 dest_offset, System.Int32 count, out System.IO.MonoIOError error)
    // Offset: 0x100C9B8
    static int Read(::System::Runtime::InteropServices::SafeHandle* safeHandle, ::ArrayW<uint8_t> dest, int dest_offset, int count, ByRef<::System::IO::MonoIOError> error);
    // static private System.Int32 Write(System.IntPtr handle, in System.Byte[] src, System.Int32 src_offset, System.Int32 count, out System.IO.MonoIOError error)
    // Offset: 0x100CB08
    static int Write(::System::IntPtr handle, ByRef<::ArrayW<uint8_t>> src, int src_offset, int count, ByRef<::System::IO::MonoIOError> error);
    // static public System.Int32 Write(System.Runtime.InteropServices.SafeHandle safeHandle, System.Byte[] src, System.Int32 src_offset, System.Int32 count, out System.IO.MonoIOError error)
    // Offset: 0x100CB0C
    static int Write(::System::Runtime::InteropServices::SafeHandle* safeHandle, ::ArrayW<uint8_t> src, int src_offset, int count, ByRef<::System::IO::MonoIOError> error);
    // static private System.Int64 Seek(System.IntPtr handle, System.Int64 offset, System.IO.SeekOrigin origin, out System.IO.MonoIOError error)
    // Offset: 0x100CC5C
    static int64_t Seek(::System::IntPtr handle, int64_t offset, ::System::IO::SeekOrigin origin, ByRef<::System::IO::MonoIOError> error);
    // static public System.Int64 Seek(System.Runtime.InteropServices.SafeHandle safeHandle, System.Int64 offset, System.IO.SeekOrigin origin, out System.IO.MonoIOError error)
    // Offset: 0x100CC60
    static int64_t Seek(::System::Runtime::InteropServices::SafeHandle* safeHandle, int64_t offset, ::System::IO::SeekOrigin origin, ByRef<::System::IO::MonoIOError> error);
    // static private System.Int64 GetLength(System.IntPtr handle, out System.IO.MonoIOError error)
    // Offset: 0x100CDA8
    static int64_t GetLength(::System::IntPtr handle, ByRef<::System::IO::MonoIOError> error);
    // static public System.Int64 GetLength(System.Runtime.InteropServices.SafeHandle safeHandle, out System.IO.MonoIOError error)
    // Offset: 0x100CDAC
    static int64_t GetLength(::System::Runtime::InteropServices::SafeHandle* safeHandle, ByRef<::System::IO::MonoIOError> error);
    // static private System.Boolean SetLength(System.IntPtr handle, System.Int64 length, out System.IO.MonoIOError error)
    // Offset: 0x100CEDC
    static bool SetLength(::System::IntPtr handle, int64_t length, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean SetLength(System.Runtime.InteropServices.SafeHandle safeHandle, System.Int64 length, out System.IO.MonoIOError error)
    // Offset: 0x100CEE0
    static bool SetLength(::System::Runtime::InteropServices::SafeHandle* safeHandle, int64_t length, ByRef<::System::IO::MonoIOError> error);
    // static private System.Boolean SetFileTime(System.IntPtr handle, System.Int64 creation_time, System.Int64 last_access_time, System.Int64 last_write_time, out System.IO.MonoIOError error)
    // Offset: 0x100D018
    static bool SetFileTime(::System::IntPtr handle, int64_t creation_time, int64_t last_access_time, int64_t last_write_time, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean SetFileTime(System.Runtime.InteropServices.SafeHandle safeHandle, System.Int64 creation_time, System.Int64 last_access_time, System.Int64 last_write_time, out System.IO.MonoIOError error)
    // Offset: 0x100D01C
    static bool SetFileTime(::System::Runtime::InteropServices::SafeHandle* safeHandle, int64_t creation_time, int64_t last_access_time, int64_t last_write_time, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean SetLastWriteTime(System.String path, System.DateTime dateTime, out System.IO.MonoIOError error)
    // Offset: 0x100D16C
    static bool SetLastWriteTime(::StringW path, ::System::DateTime dateTime, ByRef<::System::IO::MonoIOError> error);
    // static public System.Boolean SetFileTime(System.String path, System.Int32 type, System.Int64 creation_time, System.Int64 last_access_time, System.Int64 last_write_time, System.DateTime dateTime, out System.IO.MonoIOError error)
    // Offset: 0x100D1F4
    static bool SetFileTime(::StringW path, int type, int64_t creation_time, int64_t last_access_time, int64_t last_write_time, ::System::DateTime dateTime, ByRef<::System::IO::MonoIOError> error);
    // static private System.Void DumpHandles()
    // Offset: 0x100C108
    static void DumpHandles();
    // static public System.Boolean RemapPath(System.String path, out System.String newPath)
    // Offset: 0x100D3A8
    static bool RemapPath(::StringW path, ByRef<::StringW> newPath);
  }; // System.IO.MonoIO
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::MonoIO::get_ConsoleOutput
// Il2CppName: get_ConsoleOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&System::IO::MonoIO::get_ConsoleOutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "get_ConsoleOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::get_ConsoleInput
// Il2CppName: get_ConsoleInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&System::IO::MonoIO::get_ConsoleInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "get_ConsoleInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::get_ConsoleError
// Il2CppName: get_ConsoleError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)()>(&System::IO::MonoIO::get_ConsoleError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "get_ConsoleError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::get_VolumeSeparatorChar
// Il2CppName: get_VolumeSeparatorChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)()>(&System::IO::MonoIO::get_VolumeSeparatorChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "get_VolumeSeparatorChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::get_DirectorySeparatorChar
// Il2CppName: get_DirectorySeparatorChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)()>(&System::IO::MonoIO::get_DirectorySeparatorChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "get_DirectorySeparatorChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::get_AltDirectorySeparatorChar
// Il2CppName: get_AltDirectorySeparatorChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)()>(&System::IO::MonoIO::get_AltDirectorySeparatorChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "get_AltDirectorySeparatorChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::get_PathSeparator
// Il2CppName: get_PathSeparator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)()>(&System::IO::MonoIO::get_PathSeparator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "get_PathSeparator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::MonoIO::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetException
// Il2CppName: GetException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::IO::MonoIOError)>(&System::IO::MonoIO::GetException)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetException
// Il2CppName: GetException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::System::IO::MonoIOError)>(&System::IO::MonoIO::GetException)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::CreateDirectory
// Il2CppName: CreateDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar*, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::CreateDirectory)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "CreateDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::CreateDirectory
// Il2CppName: CreateDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::CreateDirectory)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "CreateDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::RemoveDirectory
// Il2CppName: RemoveDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar*, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::RemoveDirectory)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "RemoveDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::RemoveDirectory
// Il2CppName: RemoveDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::RemoveDirectory)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "RemoveDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetCurrentDirectory
// Il2CppName: GetCurrentDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetCurrentDirectory)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetCurrentDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::MoveFile
// Il2CppName: MoveFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar*, ::Il2CppChar*, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::MoveFile)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "MoveFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, dest, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::MoveFile
// Il2CppName: MoveFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::MoveFile)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "MoveFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, dest, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::CopyFile
// Il2CppName: CopyFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar*, ::Il2CppChar*, bool, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::CopyFile)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* dest = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* overwrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "CopyFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, dest, overwrite, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::CopyFile
// Il2CppName: CopyFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, bool, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::CopyFile)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dest = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* overwrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "CopyFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, dest, overwrite, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::DeleteFile
// Il2CppName: DeleteFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar*, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::DeleteFile)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "DeleteFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::DeleteFile
// Il2CppName: DeleteFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::DeleteFile)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "DeleteFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetFileAttributes
// Il2CppName: GetFileAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::FileAttributes (*)(::Il2CppChar*, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetFileAttributes)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetFileAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetFileAttributes
// Il2CppName: GetFileAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::FileAttributes (*)(::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetFileAttributes)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetFileAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetFileType
// Il2CppName: GetFileType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::MonoFileType (*)(::System::IntPtr, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetFileType)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetFileType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetFileType
// Il2CppName: GetFileType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::MonoFileType (*)(::System::Runtime::InteropServices::SafeHandle*, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetFileType)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "SafeHandle")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetFileType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::FindFirstFile
// Il2CppName: FindFirstFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::Il2CppChar*, ByRef<::StringW>, ByRef<int>, ByRef<int>)>(&System::IO::MonoIO::FindFirstFile)> {
  static const MethodInfo* get() {
    static auto* pathWithPattern = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* fileAttr = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "FindFirstFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathWithPattern, fileName, fileAttr, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::FindFirstFile
// Il2CppName: FindFirstFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::StringW, ByRef<::StringW>, ByRef<int>, ByRef<int>)>(&System::IO::MonoIO::FindFirstFile)> {
  static const MethodInfo* get() {
    static auto* pathWithPattern = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* fileAttr = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "FindFirstFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathWithPattern, fileName, fileAttr, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::FindNextFile
// Il2CppName: FindNextFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ByRef<::StringW>, ByRef<int>, ByRef<int>)>(&System::IO::MonoIO::FindNextFile)> {
  static const MethodInfo* get() {
    static auto* hnd = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* fileAttr = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "FindNextFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hnd, fileName, fileAttr, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::FindCloseFile
// Il2CppName: FindCloseFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&System::IO::MonoIO::FindCloseFile)> {
  static const MethodInfo* get() {
    static auto* hnd = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "FindCloseFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hnd});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Exists
// Il2CppName: Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Exists)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::ExistsFile
// Il2CppName: ExistsFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::ExistsFile)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "ExistsFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::ExistsDirectory
// Il2CppName: ExistsDirectory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::ExistsDirectory)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "ExistsDirectory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::ExistsSymlink
// Il2CppName: ExistsSymlink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::ExistsSymlink)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "ExistsSymlink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetFileStat
// Il2CppName: GetFileStat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppChar*, ByRef<::System::IO::MonoIOStat>, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetFileStat)> {
  static const MethodInfo* get() {
    static auto* path = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* stat = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOStat")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetFileStat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, stat, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetFileStat
// Il2CppName: GetFileStat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::System::IO::MonoIOStat>, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetFileStat)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stat = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOStat")->this_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetFileStat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, stat, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::Il2CppChar*, ::System::IO::FileMode, ::System::IO::FileAccess, ::System::IO::FileShare, ::System::IO::FileOptions, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Open)> {
  static const MethodInfo* get() {
    static auto* filename = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Char"))->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.IO", "FileMode")->byval_arg;
    static auto* access = &::il2cpp_utils::GetClassFromName("System.IO", "FileAccess")->byval_arg;
    static auto* share = &::il2cpp_utils::GetClassFromName("System.IO", "FileShare")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.IO", "FileOptions")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, mode, access, share, options, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(::StringW, ::System::IO::FileMode, ::System::IO::FileAccess, ::System::IO::FileShare, ::System::IO::FileOptions, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Open)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.IO", "FileMode")->byval_arg;
    static auto* access = &::il2cpp_utils::GetClassFromName("System.IO", "FileAccess")->byval_arg;
    static auto* share = &::il2cpp_utils::GetClassFromName("System.IO", "FileShare")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("System.IO", "FileOptions")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, mode, access, share, options, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Close)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<uint8_t>, int, int, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Read)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* dest = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dest_offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, dest, dest_offset, count, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Runtime::InteropServices::SafeHandle*, ::ArrayW<uint8_t>, int, int, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Read)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "SafeHandle")->byval_arg;
    static auto* dest = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* dest_offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, dest, dest_offset, count, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ByRef<::ArrayW<uint8_t>>, int, int, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Write)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* src_offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, src, src_offset, count, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Runtime::InteropServices::SafeHandle*, ::ArrayW<uint8_t>, int, int, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Write)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "SafeHandle")->byval_arg;
    static auto* src = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* src_offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, src, src_offset, count, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::IntPtr, int64_t, ::System::IO::SeekOrigin, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Seek)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, offset, origin, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::Seek
// Il2CppName: Seek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::Runtime::InteropServices::SafeHandle*, int64_t, ::System::IO::SeekOrigin, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::Seek)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "SafeHandle")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* origin = &::il2cpp_utils::GetClassFromName("System.IO", "SeekOrigin")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "Seek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, offset, origin, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::IntPtr, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetLength)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::GetLength
// Il2CppName: GetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (*)(::System::Runtime::InteropServices::SafeHandle*, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::GetLength)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "SafeHandle")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "GetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, int64_t, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::SetLength)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, length, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Runtime::InteropServices::SafeHandle*, int64_t, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::SetLength)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "SafeHandle")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, length, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::SetFileTime
// Il2CppName: SetFileTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr, int64_t, int64_t, int64_t, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::SetFileTime)> {
  static const MethodInfo* get() {
    static auto* handle = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* creation_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* last_access_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* last_write_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "SetFileTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handle, creation_time, last_access_time, last_write_time, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::SetFileTime
// Il2CppName: SetFileTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Runtime::InteropServices::SafeHandle*, int64_t, int64_t, int64_t, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::SetFileTime)> {
  static const MethodInfo* get() {
    static auto* safeHandle = &::il2cpp_utils::GetClassFromName("System.Runtime.InteropServices", "SafeHandle")->byval_arg;
    static auto* creation_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* last_access_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* last_write_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "SetFileTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{safeHandle, creation_time, last_access_time, last_write_time, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::SetLastWriteTime
// Il2CppName: SetLastWriteTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::System::DateTime, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::SetLastWriteTime)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "SetLastWriteTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, dateTime, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::SetFileTime
// Il2CppName: SetFileTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int, int64_t, int64_t, int64_t, ::System::DateTime, ByRef<::System::IO::MonoIOError>)>(&System::IO::MonoIO::SetFileTime)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* creation_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* last_access_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* last_write_time = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System.IO", "MonoIOError")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "SetFileTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, type, creation_time, last_access_time, last_write_time, dateTime, error});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::DumpHandles
// Il2CppName: DumpHandles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::MonoIO::DumpHandles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "DumpHandles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::MonoIO::RemapPath
// Il2CppName: RemapPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::StringW>)>(&System::IO::MonoIO::RemapPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newPath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::MonoIO*), "RemapPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, newPath});
  }
};
