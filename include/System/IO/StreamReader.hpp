// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IO.TextReader
#include "System/IO/TextReader.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
  // Forward declaring type: Decoder
  class Decoder;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Forward declaring type: StreamReader
  class StreamReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::IO::StreamReader);
DEFINE_IL2CPP_ARG_TYPE(::System::IO::StreamReader*, "System.IO", "StreamReader");
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.StreamReader
  // [TokenAttribute] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: 683518
  class StreamReader : public ::System::IO::TextReader {
    public:
    // Nested type: ::System::IO::StreamReader::NullStreamReader
    class NullStreamReader;
    // Nested type: ::System::IO::StreamReader::$ReadToEndAsyncInternal$d__63
    struct $ReadToEndAsyncInternal$d__63;
    // Nested type: ::System::IO::StreamReader::$ReadAsyncInternal$d__65
    struct $ReadAsyncInternal$d__65;
    // Nested type: ::System::IO::StreamReader::$ReadBufferAsync$d__98
    struct $ReadBufferAsync$d__98;
    public:
    // private System.IO.Stream stream
    // Size: 0x8
    // Offset: 0x18
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Text.Encoding encoding
    // Size: 0x8
    // Offset: 0x20
    ::System::Text::Encoding* encoding;
    // Field size check
    static_assert(sizeof(::System::Text::Encoding*) == 0x8);
    // private System.Text.Decoder decoder
    // Size: 0x8
    // Offset: 0x28
    ::System::Text::Decoder* decoder;
    // Field size check
    static_assert(sizeof(::System::Text::Decoder*) == 0x8);
    // private System.Byte[] byteBuffer
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<uint8_t> byteBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Char[] charBuffer
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Il2CppChar> charBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Byte[] _preamble
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<uint8_t> preamble;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 charPos
    // Size: 0x4
    // Offset: 0x48
    int charPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 charLen
    // Size: 0x4
    // Offset: 0x4C
    int charLen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 byteLen
    // Size: 0x4
    // Offset: 0x50
    int byteLen;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 bytePos
    // Size: 0x4
    // Offset: 0x54
    int bytePos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxCharsPerBuffer
    // Size: 0x4
    // Offset: 0x58
    int maxCharsPerBuffer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _detectEncoding
    // Size: 0x1
    // Offset: 0x5C
    bool detectEncoding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _checkPreamble
    // Size: 0x1
    // Offset: 0x5D
    bool checkPreamble;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isBlocked
    // Size: 0x1
    // Offset: 0x5E
    bool isBlocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _closable
    // Size: 0x1
    // Offset: 0x5F
    bool closable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Threading.Tasks.Task _asyncReadTask
    // Size: 0x8
    // Offset: 0x60
    ::System::Threading::Tasks::Task* asyncReadTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task*) == 0x8);
    public:
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // Get static field: static public readonly System.IO.StreamReader Null
    static ::System::IO::StreamReader* _get_Null();
    // Set static field: static public readonly System.IO.StreamReader Null
    static void _set_Null(::System::IO::StreamReader* value);
    // Get instance field reference: private System.IO.Stream stream
    [[deprecated]] ::System::IO::Stream*& dyn_stream();
    // Get instance field reference: private System.Text.Encoding encoding
    [[deprecated]] ::System::Text::Encoding*& dyn_encoding();
    // Get instance field reference: private System.Text.Decoder decoder
    [[deprecated]] ::System::Text::Decoder*& dyn_decoder();
    // Get instance field reference: private System.Byte[] byteBuffer
    [[deprecated]] ::ArrayW<uint8_t>& dyn_byteBuffer();
    // Get instance field reference: private System.Char[] charBuffer
    [[deprecated]] ::ArrayW<::Il2CppChar>& dyn_charBuffer();
    // Get instance field reference: private System.Byte[] _preamble
    [[deprecated]] ::ArrayW<uint8_t>& dyn__preamble();
    // Get instance field reference: private System.Int32 charPos
    [[deprecated]] int& dyn_charPos();
    // Get instance field reference: private System.Int32 charLen
    [[deprecated]] int& dyn_charLen();
    // Get instance field reference: private System.Int32 byteLen
    [[deprecated]] int& dyn_byteLen();
    // Get instance field reference: private System.Int32 bytePos
    [[deprecated]] int& dyn_bytePos();
    // Get instance field reference: private System.Int32 _maxCharsPerBuffer
    [[deprecated]] int& dyn__maxCharsPerBuffer();
    // Get instance field reference: private System.Boolean _detectEncoding
    [[deprecated]] bool& dyn__detectEncoding();
    // Get instance field reference: private System.Boolean _checkPreamble
    [[deprecated]] bool& dyn__checkPreamble();
    // Get instance field reference: private System.Boolean _isBlocked
    [[deprecated]] bool& dyn__isBlocked();
    // Get instance field reference: private System.Boolean _closable
    [[deprecated]] bool& dyn__closable();
    // Get instance field reference: private System.Threading.Tasks.Task _asyncReadTask
    [[deprecated]] ::System::Threading::Tasks::Task*& dyn__asyncReadTask();
    // static System.Int32 get_DefaultBufferSize()
    // Offset: 0x1257CB0
    static int get_DefaultBufferSize();
    // public System.Text.Encoding get_CurrentEncoding()
    // Offset: 0x1258644
    ::System::Text::Encoding* get_CurrentEncoding();
    // public System.IO.Stream get_BaseStream()
    // Offset: 0x125864C
    ::System::IO::Stream* get_BaseStream();
    // System.Boolean get_LeaveOpen()
    // Offset: 0x1258634
    bool get_LeaveOpen();
    // public System.Boolean get_EndOfStream()
    // Offset: 0x1258654
    bool get_EndOfStream();
    // private System.Int32 get_CharLen_Prop()
    // Offset: 0x125984C
    int get_CharLen_Prop();
    // private System.Void set_CharLen_Prop(System.Int32 value)
    // Offset: 0x1259854
    void set_CharLen_Prop(int value);
    // private System.Int32 get_CharPos_Prop()
    // Offset: 0x125985C
    int get_CharPos_Prop();
    // private System.Void set_CharPos_Prop(System.Int32 value)
    // Offset: 0x1259864
    void set_CharPos_Prop(int value);
    // private System.Int32 get_ByteLen_Prop()
    // Offset: 0x125986C
    int get_ByteLen_Prop();
    // private System.Void set_ByteLen_Prop(System.Int32 value)
    // Offset: 0x1259874
    void set_ByteLen_Prop(int value);
    // private System.Int32 get_BytePos_Prop()
    // Offset: 0x125987C
    int get_BytePos_Prop();
    // private System.Void set_BytePos_Prop(System.Int32 value)
    // Offset: 0x1259884
    void set_BytePos_Prop(int value);
    // private System.Boolean get_CheckPreamble_Prop()
    // Offset: 0x125988C
    bool get_CheckPreamble_Prop();
    // private System.Text.Decoder get_Decoder_Prop()
    // Offset: 0x1259894
    ::System::Text::Decoder* get_Decoder_Prop();
    // private System.Boolean get_DetectEncoding_Prop()
    // Offset: 0x125989C
    bool get_DetectEncoding_Prop();
    // private System.Char[] get_CharBuffer_Prop()
    // Offset: 0x12598A4
    ::ArrayW<::Il2CppChar> get_CharBuffer_Prop();
    // private System.Byte[] get_ByteBuffer_Prop()
    // Offset: 0x12598AC
    ::ArrayW<uint8_t> get_ByteBuffer_Prop();
    // private System.Boolean get_IsBlocked_Prop()
    // Offset: 0x12598B4
    bool get_IsBlocked_Prop();
    // private System.Void set_IsBlocked_Prop(System.Boolean value)
    // Offset: 0x12598BC
    void set_IsBlocked_Prop(bool value);
    // private System.IO.Stream get_Stream_Prop()
    // Offset: 0x12598C8
    ::System::IO::Stream* get_Stream_Prop();
    // private System.Int32 get_MaxCharsPerBuffer_Prop()
    // Offset: 0x12598D0
    int get_MaxCharsPerBuffer_Prop();
    // public System.Void .ctor(System.IO.Stream stream)
    // Offset: 0x1257DA0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::System::IO::Stream* stream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(stream)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.Boolean detectEncodingFromByteOrderMarks)
    // Offset: 0x1257DA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::System::IO::Stream* stream, bool detectEncodingFromByteOrderMarks) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(stream, detectEncodingFromByteOrderMarks)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding)
    // Offset: 0x1257FF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::System::IO::Stream* stream, ::System::Text::Encoding* encoding) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(stream, encoding)));
    }
    // public System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize, System.Boolean leaveOpen)
    // Offset: 0x1257E3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::System::IO::Stream* stream, ::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen)));
    }
    // public System.Void .ctor(System.String path)
    // Offset: 0x12581B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::StringW path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(path)));
    }
    // public System.Void .ctor(System.String path, System.Boolean detectEncodingFromByteOrderMarks)
    // Offset: 0x12581B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::StringW path, bool detectEncodingFromByteOrderMarks) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(path, detectEncodingFromByteOrderMarks)));
    }
    // public System.Void .ctor(System.String path, System.Text.Encoding encoding)
    // Offset: 0x1258258
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::StringW path, ::System::Text::Encoding* encoding) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(path, encoding)));
    }
    // public System.Void .ctor(System.String path, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize)
    // Offset: 0x125824C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::StringW path, ::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(path, encoding, detectEncodingFromByteOrderMarks, bufferSize)));
    }
    // System.Void .ctor(System.String path, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize, System.Boolean checkHost)
    // Offset: 0x12582DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor(::StringW path, ::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool checkHost) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>(path, encoding, detectEncodingFromByteOrderMarks, bufferSize, checkHost)));
    }
    // private System.Void CheckAsyncTaskInProgress()
    // Offset: 0x1257CB8
    void CheckAsyncTaskInProgress();
    // private System.Void Init(System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize, System.Boolean leaveOpen)
    // Offset: 0x125807C
    void Init(::System::IO::Stream* stream, ::System::Text::Encoding* encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen);
    // System.Void Init(System.IO.Stream stream)
    // Offset: 0x1258528
    void Init(::System::IO::Stream* stream);
    // System.Boolean DataAvailable()
    // Offset: 0x1258750
    bool DataAvailable();
    // private System.Void CompressBuffer(System.Int32 n)
    // Offset: 0x1258D08
    void CompressBuffer(int n);
    // private System.Void DetectEncoding()
    // Offset: 0x1258D50
    void DetectEncoding();
    // private System.Boolean IsPreamble()
    // Offset: 0x1259038
    bool IsPreamble();
    // System.Int32 ReadBuffer()
    // Offset: 0x1259150
    int ReadBuffer();
    // private System.Int32 ReadBuffer(System.Char[] userBuffer, System.Int32 userOffset, System.Int32 desiredChars, out System.Boolean readToUserBuffer)
    // Offset: 0x1258A18
    int ReadBuffer(::ArrayW<::Il2CppChar> userBuffer, int userOffset, int desiredChars, ByRef<bool> readToUserBuffer);
    // private System.Threading.Tasks.Task`1<System.String> ReadToEndAsyncInternal()
    // Offset: 0x12595D4
    ::System::Threading::Tasks::Task_1<::StringW>* ReadToEndAsyncInternal();
    // private System.Threading.Tasks.Task`1<System.Int32> ReadBufferAsync()
    // Offset: 0x12598D8
    ::System::Threading::Tasks::Task_1<int>* ReadBufferAsync();
    // System.Void .ctor()
    // Offset: 0x1257D3C
    // Implemented from: System.IO.TextReader
    // Base method: System.Void TextReader::.ctor()
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StreamReader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::IO::StreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StreamReader*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1259A08
    // Implemented from: System.IO.TextReader
    // Base method: System.Void TextReader::.cctor()
    static void _cctor();
    // public override System.Void Close()
    // Offset: 0x1258538
    // Implemented from: System.IO.TextReader
    // Base method: System.Void TextReader::Close()
    void Close();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1258548
    // Implemented from: System.IO.TextReader
    // Base method: System.Void TextReader::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Int32 Peek()
    // Offset: 0x12586B8
    // Implemented from: System.IO.TextReader
    // Base method: System.Int32 TextReader::Peek()
    int Peek();
    // public override System.Int32 Read()
    // Offset: 0x1258760
    // Implemented from: System.IO.TextReader
    // Base method: System.Int32 TextReader::Read()
    int Read();
    // public override System.Int32 Read(in System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x12587F8
    // Implemented from: System.IO.TextReader
    // Base method: System.Int32 TextReader::Read(in System.Char[] buffer, System.Int32 index, System.Int32 count)
    int Read(ByRef<::ArrayW<::Il2CppChar>> buffer, int index, int count);
    // public override System.String ReadToEnd()
    // Offset: 0x1258C30
    // Implemented from: System.IO.TextReader
    // Base method: System.String TextReader::ReadToEnd()
    ::StringW ReadToEnd();
    // public override System.String ReadLine()
    // Offset: 0x12592C0
    // Implemented from: System.IO.TextReader
    // Base method: System.String TextReader::ReadLine()
    ::StringW ReadLine();
    // public override System.Threading.Tasks.Task`1<System.String> ReadToEndAsync()
    // Offset: 0x12594DC
    // Implemented from: System.IO.TextReader
    // Base method: System.Threading.Tasks.Task`1<System.String> TextReader::ReadToEndAsync()
    ::System::Threading::Tasks::Task_1<::StringW>* ReadToEndAsync();
    // override System.Threading.Tasks.Task`1<System.Int32> ReadAsyncInternal(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x12596F4
    // Implemented from: System.IO.TextReader
    // Base method: System.Threading.Tasks.Task`1<System.Int32> TextReader::ReadAsyncInternal(System.Char[] buffer, System.Int32 index, System.Int32 count)
    ::System::Threading::Tasks::Task_1<int>* ReadAsyncInternal(::ArrayW<::Il2CppChar> buffer, int index, int count);
  }; // System.IO.StreamReader
  #pragma pack(pop)
  static check_size<sizeof(StreamReader), 96 + sizeof(::System::Threading::Tasks::Task*)> __System_IO_StreamReaderSizeCheck;
  static_assert(sizeof(StreamReader) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::IO::StreamReader::get_DefaultBufferSize
// Il2CppName: get_DefaultBufferSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&System::IO::StreamReader::get_DefaultBufferSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_DefaultBufferSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_CurrentEncoding
// Il2CppName: get_CurrentEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Encoding* (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_CurrentEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_CurrentEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_BaseStream
// Il2CppName: get_BaseStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_BaseStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_BaseStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_LeaveOpen
// Il2CppName: get_LeaveOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_LeaveOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_LeaveOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_EndOfStream
// Il2CppName: get_EndOfStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_EndOfStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_EndOfStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_CharLen_Prop
// Il2CppName: get_CharLen_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_CharLen_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_CharLen_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::set_CharLen_Prop
// Il2CppName: set_CharLen_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(int)>(&System::IO::StreamReader::set_CharLen_Prop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "set_CharLen_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_CharPos_Prop
// Il2CppName: get_CharPos_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_CharPos_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_CharPos_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::set_CharPos_Prop
// Il2CppName: set_CharPos_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(int)>(&System::IO::StreamReader::set_CharPos_Prop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "set_CharPos_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_ByteLen_Prop
// Il2CppName: get_ByteLen_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_ByteLen_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_ByteLen_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::set_ByteLen_Prop
// Il2CppName: set_ByteLen_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(int)>(&System::IO::StreamReader::set_ByteLen_Prop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "set_ByteLen_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_BytePos_Prop
// Il2CppName: get_BytePos_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_BytePos_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_BytePos_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::set_BytePos_Prop
// Il2CppName: set_BytePos_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(int)>(&System::IO::StreamReader::set_BytePos_Prop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "set_BytePos_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_CheckPreamble_Prop
// Il2CppName: get_CheckPreamble_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_CheckPreamble_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_CheckPreamble_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_Decoder_Prop
// Il2CppName: get_Decoder_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::Decoder* (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_Decoder_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_Decoder_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_DetectEncoding_Prop
// Il2CppName: get_DetectEncoding_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_DetectEncoding_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_DetectEncoding_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_CharBuffer_Prop
// Il2CppName: get_CharBuffer_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppChar> (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_CharBuffer_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_CharBuffer_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_ByteBuffer_Prop
// Il2CppName: get_ByteBuffer_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_ByteBuffer_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_ByteBuffer_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_IsBlocked_Prop
// Il2CppName: get_IsBlocked_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_IsBlocked_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_IsBlocked_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::set_IsBlocked_Prop
// Il2CppName: set_IsBlocked_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(bool)>(&System::IO::StreamReader::set_IsBlocked_Prop)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "set_IsBlocked_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_Stream_Prop
// Il2CppName: get_Stream_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IO::Stream* (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_Stream_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_Stream_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::get_MaxCharsPerBuffer_Prop
// Il2CppName: get_MaxCharsPerBuffer_Prop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)()>(&System::IO::StreamReader::get_MaxCharsPerBuffer_Prop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "get_MaxCharsPerBuffer_Prop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::CheckAsyncTaskInProgress
// Il2CppName: CheckAsyncTaskInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)()>(&System::IO::StreamReader::CheckAsyncTaskInProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "CheckAsyncTaskInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(::System::IO::Stream*, ::System::Text::Encoding*, bool, int, bool)>(&System::IO::StreamReader::Init)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System.Text", "Encoding")->byval_arg;
    static auto* detectEncodingFromByteOrderMarks = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* leaveOpen = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, encoding, detectEncodingFromByteOrderMarks, bufferSize, leaveOpen});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(::System::IO::Stream*)>(&System::IO::StreamReader::Init)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::DataAvailable
// Il2CppName: DataAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::StreamReader::*)()>(&System::IO::StreamReader::DataAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "DataAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::CompressBuffer
// Il2CppName: CompressBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(int)>(&System::IO::StreamReader::CompressBuffer)> {
  static const MethodInfo* get() {
    static auto* n = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "CompressBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{n});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::DetectEncoding
// Il2CppName: DetectEncoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)()>(&System::IO::StreamReader::DetectEncoding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "DetectEncoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::IsPreamble
// Il2CppName: IsPreamble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::IO::StreamReader::*)()>(&System::IO::StreamReader::IsPreamble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "IsPreamble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::ReadBuffer
// Il2CppName: ReadBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)()>(&System::IO::StreamReader::ReadBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "ReadBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::ReadBuffer
// Il2CppName: ReadBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)(::ArrayW<::Il2CppChar>, int, int, ByRef<bool>)>(&System::IO::StreamReader::ReadBuffer)> {
  static const MethodInfo* get() {
    static auto* userBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* userOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* desiredChars = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* readToUserBuffer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "ReadBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userBuffer, userOffset, desiredChars, readToUserBuffer});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::ReadToEndAsyncInternal
// Il2CppName: ReadToEndAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::StringW>* (System::IO::StreamReader::*)()>(&System::IO::StreamReader::ReadToEndAsyncInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "ReadToEndAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::ReadBufferAsync
// Il2CppName: ReadBufferAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<int>* (System::IO::StreamReader::*)()>(&System::IO::StreamReader::ReadBufferAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "ReadBufferAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::IO::StreamReader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::IO::StreamReader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)()>(&System::IO::StreamReader::Close)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::IO::StreamReader::*)(bool)>(&System::IO::StreamReader::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::Peek
// Il2CppName: Peek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)()>(&System::IO::StreamReader::Peek)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "Peek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)()>(&System::IO::StreamReader::Read)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::IO::StreamReader::*)(ByRef<::ArrayW<::Il2CppChar>>, int, int)>(&System::IO::StreamReader::Read)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::ReadToEnd
// Il2CppName: ReadToEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::IO::StreamReader::*)()>(&System::IO::StreamReader::ReadToEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "ReadToEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::ReadLine
// Il2CppName: ReadLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::IO::StreamReader::*)()>(&System::IO::StreamReader::ReadLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "ReadLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::ReadToEndAsync
// Il2CppName: ReadToEndAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::StringW>* (System::IO::StreamReader::*)()>(&System::IO::StreamReader::ReadToEndAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "ReadToEndAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::IO::StreamReader::ReadAsyncInternal
// Il2CppName: ReadAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<int>* (System::IO::StreamReader::*)(::ArrayW<::Il2CppChar>, int, int)>(&System::IO::StreamReader::ReadAsyncInternal)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::IO::StreamReader*), "ReadAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, index, count});
  }
};
