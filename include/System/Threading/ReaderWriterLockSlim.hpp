// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Threading.LockRecursionPolicy
#include "System/Threading/LockRecursionPolicy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: EventWaitHandle
  class EventWaitHandle;
  // Forward declaring type: ReaderWriterCount
  class ReaderWriterCount;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Forward declaring type: ReaderWriterLockSlim
  class ReaderWriterLockSlim;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Threading::ReaderWriterLockSlim);
DEFINE_IL2CPP_ARG_TYPE(::System::Threading::ReaderWriterLockSlim*, "System.Threading", "ReaderWriterLockSlim");
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.ReaderWriterLockSlim
  // [TokenAttribute] Offset: FFFFFFFF
  class ReaderWriterLockSlim : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::System::Threading::ReaderWriterLockSlim::TimeoutTracker
    struct TimeoutTracker;
    public:
    // private System.Boolean fIsReentrant
    // Size: 0x1
    // Offset: 0x10
    bool fIsReentrant;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fIsReentrant and: myLock
    char __padding0[0x3] = {};
    // private System.Int32 myLock
    // Size: 0x4
    // Offset: 0x14
    int myLock;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt32 numWriteWaiters
    // Size: 0x4
    // Offset: 0x18
    uint numWriteWaiters;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 numReadWaiters
    // Size: 0x4
    // Offset: 0x1C
    uint numReadWaiters;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 numWriteUpgradeWaiters
    // Size: 0x4
    // Offset: 0x20
    uint numWriteUpgradeWaiters;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 numUpgradeWaiters
    // Size: 0x4
    // Offset: 0x24
    uint numUpgradeWaiters;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Boolean fNoWaiters
    // Size: 0x1
    // Offset: 0x28
    bool fNoWaiters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fNoWaiters and: upgradeLockOwnerId
    char __padding6[0x3] = {};
    // private System.Int32 upgradeLockOwnerId
    // Size: 0x4
    // Offset: 0x2C
    int upgradeLockOwnerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 writeLockOwnerId
    // Size: 0x4
    // Offset: 0x30
    int writeLockOwnerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: writeLockOwnerId and: writeEvent
    char __padding8[0x4] = {};
    // private System.Threading.EventWaitHandle writeEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Threading::EventWaitHandle* writeEvent;
    // Field size check
    static_assert(sizeof(::System::Threading::EventWaitHandle*) == 0x8);
    // private System.Threading.EventWaitHandle readEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Threading::EventWaitHandle* readEvent;
    // Field size check
    static_assert(sizeof(::System::Threading::EventWaitHandle*) == 0x8);
    // private System.Threading.EventWaitHandle upgradeEvent
    // Size: 0x8
    // Offset: 0x48
    ::System::Threading::EventWaitHandle* upgradeEvent;
    // Field size check
    static_assert(sizeof(::System::Threading::EventWaitHandle*) == 0x8);
    // private System.Threading.EventWaitHandle waitUpgradeEvent
    // Size: 0x8
    // Offset: 0x50
    ::System::Threading::EventWaitHandle* waitUpgradeEvent;
    // Field size check
    static_assert(sizeof(::System::Threading::EventWaitHandle*) == 0x8);
    // private System.Int64 lockID
    // Size: 0x8
    // Offset: 0x58
    int64_t lockID;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean fUpgradeThreadHoldingRead
    // Size: 0x1
    // Offset: 0x60
    bool fUpgradeThreadHoldingRead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fUpgradeThreadHoldingRead and: owners
    char __padding14[0x3] = {};
    // private System.UInt32 owners
    // Size: 0x4
    // Offset: 0x64
    uint owners;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Boolean fDisposed
    // Size: 0x1
    // Offset: 0x68
    bool fDisposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Int64 s_nextLockID
    static int64_t _get_s_nextLockID();
    // Set static field: static private System.Int64 s_nextLockID
    static void _set_s_nextLockID(int64_t value);
    // Get static field: static private System.Threading.ReaderWriterCount t_rwc
    static ::System::Threading::ReaderWriterCount* _get_t_rwc();
    // Set static field: static private System.Threading.ReaderWriterCount t_rwc
    static void _set_t_rwc(::System::Threading::ReaderWriterCount* value);
    // Get instance field reference: private System.Boolean fIsReentrant
    [[deprecated("Use field access instead!")]] bool& dyn_fIsReentrant();
    // Get instance field reference: private System.Int32 myLock
    [[deprecated("Use field access instead!")]] int& dyn_myLock();
    // Get instance field reference: private System.UInt32 numWriteWaiters
    [[deprecated("Use field access instead!")]] uint& dyn_numWriteWaiters();
    // Get instance field reference: private System.UInt32 numReadWaiters
    [[deprecated("Use field access instead!")]] uint& dyn_numReadWaiters();
    // Get instance field reference: private System.UInt32 numWriteUpgradeWaiters
    [[deprecated("Use field access instead!")]] uint& dyn_numWriteUpgradeWaiters();
    // Get instance field reference: private System.UInt32 numUpgradeWaiters
    [[deprecated("Use field access instead!")]] uint& dyn_numUpgradeWaiters();
    // Get instance field reference: private System.Boolean fNoWaiters
    [[deprecated("Use field access instead!")]] bool& dyn_fNoWaiters();
    // Get instance field reference: private System.Int32 upgradeLockOwnerId
    [[deprecated("Use field access instead!")]] int& dyn_upgradeLockOwnerId();
    // Get instance field reference: private System.Int32 writeLockOwnerId
    [[deprecated("Use field access instead!")]] int& dyn_writeLockOwnerId();
    // Get instance field reference: private System.Threading.EventWaitHandle writeEvent
    [[deprecated("Use field access instead!")]] ::System::Threading::EventWaitHandle*& dyn_writeEvent();
    // Get instance field reference: private System.Threading.EventWaitHandle readEvent
    [[deprecated("Use field access instead!")]] ::System::Threading::EventWaitHandle*& dyn_readEvent();
    // Get instance field reference: private System.Threading.EventWaitHandle upgradeEvent
    [[deprecated("Use field access instead!")]] ::System::Threading::EventWaitHandle*& dyn_upgradeEvent();
    // Get instance field reference: private System.Threading.EventWaitHandle waitUpgradeEvent
    [[deprecated("Use field access instead!")]] ::System::Threading::EventWaitHandle*& dyn_waitUpgradeEvent();
    // Get instance field reference: private System.Int64 lockID
    [[deprecated("Use field access instead!")]] int64_t& dyn_lockID();
    // Get instance field reference: private System.Boolean fUpgradeThreadHoldingRead
    [[deprecated("Use field access instead!")]] bool& dyn_fUpgradeThreadHoldingRead();
    // Get instance field reference: private System.UInt32 owners
    [[deprecated("Use field access instead!")]] uint& dyn_owners();
    // Get instance field reference: private System.Boolean fDisposed
    [[deprecated("Use field access instead!")]] bool& dyn_fDisposed();
    // public System.Boolean get_IsReadLockHeld()
    // Offset: 0xE98D84
    bool get_IsReadLockHeld();
    // public System.Boolean get_IsUpgradeableReadLockHeld()
    // Offset: 0xE98DA0
    bool get_IsUpgradeableReadLockHeld();
    // public System.Boolean get_IsWriteLockHeld()
    // Offset: 0xE98DBC
    bool get_IsWriteLockHeld();
    // public System.Int32 get_RecursiveReadCount()
    // Offset: 0xE98DD8
    int get_RecursiveReadCount();
    // public System.Int32 get_RecursiveUpgradeCount()
    // Offset: 0xE98E5C
    int get_RecursiveUpgradeCount();
    // public System.Int32 get_RecursiveWriteCount()
    // Offset: 0xE98F10
    int get_RecursiveWriteCount();
    // public System.Int32 get_WaitingReadCount()
    // Offset: 0xE98FC4
    int get_WaitingReadCount();
    // public System.Int32 get_WaitingUpgradeCount()
    // Offset: 0xE98FCC
    int get_WaitingUpgradeCount();
    // public System.Int32 get_WaitingWriteCount()
    // Offset: 0xE98FD4
    int get_WaitingWriteCount();
    // public System.Void .ctor()
    // Offset: 0xE973BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReaderWriterLockSlim* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLockSlim::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReaderWriterLockSlim*, creationType>()));
    }
    // public System.Void .ctor(System.Threading.LockRecursionPolicy recursionPolicy)
    // Offset: 0xE973C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReaderWriterLockSlim* New_ctor(::System::Threading::LockRecursionPolicy recursionPolicy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Threading::ReaderWriterLockSlim::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReaderWriterLockSlim*, creationType>(recursionPolicy)));
    }
    // private System.Void InitializeThreadCounts()
    // Offset: 0xE973B0
    void InitializeThreadCounts();
    // static private System.Boolean IsRWEntryEmpty(System.Threading.ReaderWriterCount rwc)
    // Offset: 0xE97454
    static bool IsRWEntryEmpty(::System::Threading::ReaderWriterCount* rwc);
    // private System.Boolean IsRwHashEntryChanged(System.Threading.ReaderWriterCount lrwc)
    // Offset: 0xE97494
    bool IsRwHashEntryChanged(::System::Threading::ReaderWriterCount* lrwc);
    // private System.Threading.ReaderWriterCount GetThreadRWCount(System.Boolean dontAllocate)
    // Offset: 0xE974B8
    ::System::Threading::ReaderWriterCount* GetThreadRWCount(bool dontAllocate);
    // public System.Void EnterWriteLock()
    // Offset: 0xE975E0
    void EnterWriteLock();
    // public System.Boolean TryEnterWriteLock(System.Int32 millisecondsTimeout)
    // Offset: 0xE9761C
    bool TryEnterWriteLock(int millisecondsTimeout);
    // private System.Boolean TryEnterWriteLock(System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker timeout)
    // Offset: 0xE97658
    bool TryEnterWriteLock(::System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout);
    // private System.Boolean TryEnterWriteLockCore(System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker timeout)
    // Offset: 0xE9765C
    bool TryEnterWriteLockCore(::System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout);
    // public System.Void EnterUpgradeableReadLock()
    // Offset: 0xE98060
    void EnterUpgradeableReadLock();
    // public System.Boolean TryEnterUpgradeableReadLock(System.Int32 millisecondsTimeout)
    // Offset: 0xE9809C
    bool TryEnterUpgradeableReadLock(int millisecondsTimeout);
    // private System.Boolean TryEnterUpgradeableReadLock(System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker timeout)
    // Offset: 0xE980D8
    bool TryEnterUpgradeableReadLock(::System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout);
    // private System.Boolean TryEnterUpgradeableReadLockCore(System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker timeout)
    // Offset: 0xE980DC
    bool TryEnterUpgradeableReadLockCore(::System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout);
    // public System.Void ExitWriteLock()
    // Offset: 0xE985CC
    void ExitWriteLock();
    // public System.Void ExitUpgradeableReadLock()
    // Offset: 0xE9883C
    void ExitUpgradeableReadLock();
    // private System.Void LazyCreateEvent(ref System.Threading.EventWaitHandle waitEvent, System.Boolean makeAutoResetEvent)
    // Offset: 0xE97D88
    void LazyCreateEvent(ByRef<::System::Threading::EventWaitHandle*> waitEvent, bool makeAutoResetEvent);
    // private System.Boolean WaitOnEvent(System.Threading.EventWaitHandle waitEvent, ref System.UInt32 numWaiters, System.Threading.ReaderWriterLockSlim/System.Threading.TimeoutTracker timeout, System.Boolean isWriteWaiter)
    // Offset: 0xE97E88
    bool WaitOnEvent(::System::Threading::EventWaitHandle* waitEvent, ByRef<uint> numWaiters, ::System::Threading::ReaderWriterLockSlim::TimeoutTracker timeout, bool isWriteWaiter);
    // private System.Void ExitAndWakeUpAppropriateWaiters()
    // Offset: 0xE98800
    void ExitAndWakeUpAppropriateWaiters();
    // private System.Void ExitAndWakeUpAppropriateWaitersPreferringWriters()
    // Offset: 0xE98AC0
    void ExitAndWakeUpAppropriateWaitersPreferringWriters();
    // private System.Void ExitAndWakeUpAppropriateReadWaiters()
    // Offset: 0xE98A1C
    void ExitAndWakeUpAppropriateReadWaiters();
    // private System.Boolean IsWriterAcquired()
    // Offset: 0xE97CF8
    bool IsWriterAcquired();
    // private System.Void SetWriterAcquired()
    // Offset: 0xE97D08
    void SetWriterAcquired();
    // private System.Void ClearWriterAcquired()
    // Offset: 0xE987F0
    void ClearWriterAcquired();
    // private System.Void SetWritersWaiting()
    // Offset: 0xE989DC
    void SetWritersWaiting();
    // private System.Void ClearWritersWaiting()
    // Offset: 0xE989FC
    void ClearWritersWaiting();
    // private System.Void SetUpgraderWaiting()
    // Offset: 0xE989EC
    void SetUpgraderWaiting();
    // private System.Void ClearUpgraderWaiting()
    // Offset: 0xE98A0C
    void ClearUpgraderWaiting();
    // private System.UInt32 GetNumReaders()
    // Offset: 0xE97D18
    uint GetNumReaders();
    // private System.Void EnterMyLock()
    // Offset: 0xE98B58
    void EnterMyLock();
    // private System.Void EnterMyLockSpin()
    // Offset: 0xE98B9C
    void EnterMyLockSpin();
    // private System.Void ExitMyLock()
    // Offset: 0xE97CD4
    void ExitMyLock();
    // static private System.Void SpinWait(System.Int32 SpinCount)
    // Offset: 0xE97D24
    static void SpinWait(int SpinCount);
    // public System.Void Dispose()
    // Offset: 0xE98C40
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0xE98C48
    void Dispose(bool disposing);
  }; // System.Threading.ReaderWriterLockSlim
  #pragma pack(pop)
  static check_size<sizeof(ReaderWriterLockSlim), 104 + sizeof(bool)> __System_Threading_ReaderWriterLockSlimSizeCheck;
  static_assert(sizeof(ReaderWriterLockSlim) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_IsReadLockHeld
// Il2CppName: get_IsReadLockHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_IsReadLockHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_IsReadLockHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_IsUpgradeableReadLockHeld
// Il2CppName: get_IsUpgradeableReadLockHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_IsUpgradeableReadLockHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_IsUpgradeableReadLockHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_IsWriteLockHeld
// Il2CppName: get_IsWriteLockHeld
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_IsWriteLockHeld)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_IsWriteLockHeld", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_RecursiveReadCount
// Il2CppName: get_RecursiveReadCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_RecursiveReadCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_RecursiveReadCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_RecursiveUpgradeCount
// Il2CppName: get_RecursiveUpgradeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_RecursiveUpgradeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_RecursiveUpgradeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_RecursiveWriteCount
// Il2CppName: get_RecursiveWriteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_RecursiveWriteCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_RecursiveWriteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_WaitingReadCount
// Il2CppName: get_WaitingReadCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_WaitingReadCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_WaitingReadCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_WaitingUpgradeCount
// Il2CppName: get_WaitingUpgradeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_WaitingUpgradeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_WaitingUpgradeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::get_WaitingWriteCount
// Il2CppName: get_WaitingWriteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::get_WaitingWriteCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "get_WaitingWriteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::InitializeThreadCounts
// Il2CppName: InitializeThreadCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::InitializeThreadCounts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "InitializeThreadCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::IsRWEntryEmpty
// Il2CppName: IsRWEntryEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Threading::ReaderWriterCount*)>(&System::Threading::ReaderWriterLockSlim::IsRWEntryEmpty)> {
  static const MethodInfo* get() {
    static auto* rwc = &::il2cpp_utils::GetClassFromName("System.Threading", "ReaderWriterCount")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "IsRWEntryEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rwc});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::IsRwHashEntryChanged
// Il2CppName: IsRwHashEntryChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)(::System::Threading::ReaderWriterCount*)>(&System::Threading::ReaderWriterLockSlim::IsRwHashEntryChanged)> {
  static const MethodInfo* get() {
    static auto* lrwc = &::il2cpp_utils::GetClassFromName("System.Threading", "ReaderWriterCount")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "IsRwHashEntryChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lrwc});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::GetThreadRWCount
// Il2CppName: GetThreadRWCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ReaderWriterCount* (System::Threading::ReaderWriterLockSlim::*)(bool)>(&System::Threading::ReaderWriterLockSlim::GetThreadRWCount)> {
  static const MethodInfo* get() {
    static auto* dontAllocate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "GetThreadRWCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dontAllocate});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::EnterWriteLock
// Il2CppName: EnterWriteLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::EnterWriteLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "EnterWriteLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::TryEnterWriteLock
// Il2CppName: TryEnterWriteLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)(int)>(&System::Threading::ReaderWriterLockSlim::TryEnterWriteLock)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "TryEnterWriteLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::TryEnterWriteLock
// Il2CppName: TryEnterWriteLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)(::System::Threading::ReaderWriterLockSlim::TimeoutTracker)>(&System::Threading::ReaderWriterLockSlim::TryEnterWriteLock)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System.Threading", "ReaderWriterLockSlim/TimeoutTracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "TryEnterWriteLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::TryEnterWriteLockCore
// Il2CppName: TryEnterWriteLockCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)(::System::Threading::ReaderWriterLockSlim::TimeoutTracker)>(&System::Threading::ReaderWriterLockSlim::TryEnterWriteLockCore)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System.Threading", "ReaderWriterLockSlim/TimeoutTracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "TryEnterWriteLockCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::EnterUpgradeableReadLock
// Il2CppName: EnterUpgradeableReadLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::EnterUpgradeableReadLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "EnterUpgradeableReadLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock
// Il2CppName: TryEnterUpgradeableReadLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)(int)>(&System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock)> {
  static const MethodInfo* get() {
    static auto* millisecondsTimeout = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "TryEnterUpgradeableReadLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{millisecondsTimeout});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock
// Il2CppName: TryEnterUpgradeableReadLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)(::System::Threading::ReaderWriterLockSlim::TimeoutTracker)>(&System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLock)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System.Threading", "ReaderWriterLockSlim/TimeoutTracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "TryEnterUpgradeableReadLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLockCore
// Il2CppName: TryEnterUpgradeableReadLockCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)(::System::Threading::ReaderWriterLockSlim::TimeoutTracker)>(&System::Threading::ReaderWriterLockSlim::TryEnterUpgradeableReadLockCore)> {
  static const MethodInfo* get() {
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System.Threading", "ReaderWriterLockSlim/TimeoutTracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "TryEnterUpgradeableReadLockCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeout});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ExitWriteLock
// Il2CppName: ExitWriteLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ExitWriteLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ExitWriteLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ExitUpgradeableReadLock
// Il2CppName: ExitUpgradeableReadLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ExitUpgradeableReadLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ExitUpgradeableReadLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::LazyCreateEvent
// Il2CppName: LazyCreateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)(ByRef<::System::Threading::EventWaitHandle*>, bool)>(&System::Threading::ReaderWriterLockSlim::LazyCreateEvent)> {
  static const MethodInfo* get() {
    static auto* waitEvent = &::il2cpp_utils::GetClassFromName("System.Threading", "EventWaitHandle")->this_arg;
    static auto* makeAutoResetEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "LazyCreateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{waitEvent, makeAutoResetEvent});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::WaitOnEvent
// Il2CppName: WaitOnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)(::System::Threading::EventWaitHandle*, ByRef<uint>, ::System::Threading::ReaderWriterLockSlim::TimeoutTracker, bool)>(&System::Threading::ReaderWriterLockSlim::WaitOnEvent)> {
  static const MethodInfo* get() {
    static auto* waitEvent = &::il2cpp_utils::GetClassFromName("System.Threading", "EventWaitHandle")->byval_arg;
    static auto* numWaiters = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System.Threading", "ReaderWriterLockSlim/TimeoutTracker")->byval_arg;
    static auto* isWriteWaiter = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "WaitOnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{waitEvent, numWaiters, timeout, isWriteWaiter});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaiters
// Il2CppName: ExitAndWakeUpAppropriateWaiters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaiters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ExitAndWakeUpAppropriateWaiters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaitersPreferringWriters
// Il2CppName: ExitAndWakeUpAppropriateWaitersPreferringWriters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateWaitersPreferringWriters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ExitAndWakeUpAppropriateWaitersPreferringWriters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateReadWaiters
// Il2CppName: ExitAndWakeUpAppropriateReadWaiters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ExitAndWakeUpAppropriateReadWaiters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ExitAndWakeUpAppropriateReadWaiters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::IsWriterAcquired
// Il2CppName: IsWriterAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::IsWriterAcquired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "IsWriterAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::SetWriterAcquired
// Il2CppName: SetWriterAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::SetWriterAcquired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "SetWriterAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ClearWriterAcquired
// Il2CppName: ClearWriterAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ClearWriterAcquired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ClearWriterAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::SetWritersWaiting
// Il2CppName: SetWritersWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::SetWritersWaiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "SetWritersWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ClearWritersWaiting
// Il2CppName: ClearWritersWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ClearWritersWaiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ClearWritersWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::SetUpgraderWaiting
// Il2CppName: SetUpgraderWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::SetUpgraderWaiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "SetUpgraderWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ClearUpgraderWaiting
// Il2CppName: ClearUpgraderWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ClearUpgraderWaiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ClearUpgraderWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::GetNumReaders
// Il2CppName: GetNumReaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::GetNumReaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "GetNumReaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::EnterMyLock
// Il2CppName: EnterMyLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::EnterMyLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "EnterMyLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::EnterMyLockSpin
// Il2CppName: EnterMyLockSpin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::EnterMyLockSpin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "EnterMyLockSpin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::ExitMyLock
// Il2CppName: ExitMyLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::ExitMyLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "ExitMyLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::SpinWait
// Il2CppName: SpinWait
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&System::Threading::ReaderWriterLockSlim::SpinWait)> {
  static const MethodInfo* get() {
    static auto* SpinCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "SpinWait", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{SpinCount});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)()>(&System::Threading::ReaderWriterLockSlim::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Threading::ReaderWriterLockSlim::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Threading::ReaderWriterLockSlim::*)(bool)>(&System::Threading::ReaderWriterLockSlim::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Threading::ReaderWriterLockSlim*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
