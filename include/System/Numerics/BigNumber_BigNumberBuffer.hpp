// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Numerics.BigNumber
#include "System/Numerics/BigNumber.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Numerics::BigNumber::BigNumberBuffer, "System.Numerics", "BigNumber/BigNumberBuffer");
// Type namespace: System.Numerics
namespace System::Numerics {
  // Size: 0x11
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Numerics.BigNumber/System.Numerics.BigNumberBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct BigNumber::BigNumberBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Text.StringBuilder digits
    // Size: 0x8
    // Offset: 0x0
    ::System::Text::StringBuilder* digits;
    // Field size check
    static_assert(sizeof(::System::Text::StringBuilder*) == 0x8);
    // public System.Int32 precision
    // Size: 0x4
    // Offset: 0x8
    int precision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 scale
    // Size: 0x4
    // Offset: 0xC
    int scale;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean sign
    // Size: 0x1
    // Offset: 0x10
    bool sign;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: BigNumberBuffer
    constexpr BigNumberBuffer(::System::Text::StringBuilder* digits_ = {}, int precision_ = {}, int scale_ = {}, bool sign_ = {}) noexcept : digits{digits_}, precision{precision_}, scale{scale_}, sign{sign_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Text.StringBuilder digits
    [[deprecated]] ::System::Text::StringBuilder*& dyn_digits();
    // Get instance field reference: public System.Int32 precision
    [[deprecated]] int& dyn_precision();
    // Get instance field reference: public System.Int32 scale
    [[deprecated]] int& dyn_scale();
    // Get instance field reference: public System.Boolean sign
    [[deprecated]] bool& dyn_sign();
    // static public System.Numerics.BigNumber/System.Numerics.BigNumberBuffer Create()
    // Offset: 0x1893040
    static ::System::Numerics::BigNumber::BigNumberBuffer Create();
  }; // System.Numerics.BigNumber/System.Numerics.BigNumberBuffer
  #pragma pack(pop)
  static check_size<sizeof(BigNumber::BigNumberBuffer), 16 + sizeof(bool)> __System_Numerics_BigNumber_BigNumberBufferSizeCheck;
  static_assert(sizeof(BigNumber::BigNumberBuffer) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Numerics::BigNumber::BigNumberBuffer::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Numerics::BigNumber::BigNumberBuffer (*)()>(&System::Numerics::BigNumber::BigNumberBuffer::Create)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigNumber::BigNumberBuffer), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
