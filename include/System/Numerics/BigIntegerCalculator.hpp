// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System.Numerics
namespace System::Numerics {
  // Forward declaring type: BigIntegerCalculator
  class BigIntegerCalculator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Numerics::BigIntegerCalculator);
DEFINE_IL2CPP_ARG_TYPE(::System::Numerics::BigIntegerCalculator*, "System.Numerics", "BigIntegerCalculator");
// Type namespace: System.Numerics
namespace System::Numerics {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Numerics.BigIntegerCalculator
  // [TokenAttribute] Offset: FFFFFFFF
  class BigIntegerCalculator : public ::Il2CppObject {
    public:
    // Get static field: static private System.Int32 ReducerThreshold
    static int _get_ReducerThreshold();
    // Set static field: static private System.Int32 ReducerThreshold
    static void _set_ReducerThreshold(int value);
    // Get static field: static private System.Int32 SquareThreshold
    static int _get_SquareThreshold();
    // Set static field: static private System.Int32 SquareThreshold
    static void _set_SquareThreshold(int value);
    // Get static field: static private System.Int32 AllocationThreshold
    static int _get_AllocationThreshold();
    // Set static field: static private System.Int32 AllocationThreshold
    static void _set_AllocationThreshold(int value);
    // Get static field: static private System.Int32 MultiplyThreshold
    static int _get_MultiplyThreshold();
    // Set static field: static private System.Int32 MultiplyThreshold
    static void _set_MultiplyThreshold(int value);
    // static private System.Void .cctor()
    // Offset: 0x1892CEC
    static void _cctor();
    // static public System.UInt32[] Add(System.UInt32[] left, System.UInt32 right)
    // Offset: 0x18908B4
    static ::ArrayW<uint> Add(::ArrayW<uint> left, uint right);
    // static public System.UInt32[] Add(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x18909B0
    static ::ArrayW<uint> Add(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static private System.Void Add(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x18922E8
    static void Add(uint* left, int leftLength, uint* right, int rightLength, uint* bits, int bitsLength);
    // static private System.Void AddSelf(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength)
    // Offset: 0x189236C
    static void AddSelf(uint* left, int leftLength, uint* right, int rightLength);
    // static public System.UInt32[] Subtract(System.UInt32[] left, System.UInt32 right)
    // Offset: 0x1890D50
    static ::ArrayW<uint> Subtract(::ArrayW<uint> left, uint right);
    // static public System.UInt32[] Subtract(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x1890EB8
    static ::ArrayW<uint> Subtract(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static private System.Void Subtract(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x18923D8
    static void Subtract(uint* left, int leftLength, uint* right, int rightLength, uint* bits, int bitsLength);
    // static public System.Int32 Compare(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x1890E2C
    static int Compare(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static public System.UInt32[] Square(System.UInt32[] value)
    // Offset: 0x1891E08
    static ::ArrayW<uint> Square(::ArrayW<uint> value);
    // static private System.Void Square(System.UInt32* value, System.Int32 valueLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x1892450
    static void Square(uint* value, int valueLength, uint* bits, int bitsLength);
    // static public System.UInt32[] Multiply(System.UInt32[] left, System.UInt32 right)
    // Offset: 0x1891D10
    static ::ArrayW<uint> Multiply(::ArrayW<uint> left, uint right);
    // static public System.UInt32[] Multiply(System.UInt32[] left, System.UInt32[] right)
    // Offset: 0x1891ED8
    static ::ArrayW<uint> Multiply(::ArrayW<uint> left, ::ArrayW<uint> right);
    // static private System.Void Multiply(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* bits, System.Int32 bitsLength)
    // Offset: 0x189289C
    static void Multiply(uint* left, int leftLength, uint* right, int rightLength, uint* bits, int bitsLength);
    // static private System.Void SubtractCore(System.UInt32* left, System.Int32 leftLength, System.UInt32* right, System.Int32 rightLength, System.UInt32* core, System.Int32 coreLength)
    // Offset: 0x18927DC
    static void SubtractCore(uint* left, int leftLength, uint* right, int rightLength, uint* core, int coreLength);
  }; // System.Numerics.BigIntegerCalculator
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Numerics::BigIntegerCalculator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, uint)>(&System::Numerics::BigIntegerCalculator::Add)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Add)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Add)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::AddSelf
// Il2CppName: AddSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::AddSelf)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "AddSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Subtract
// Il2CppName: Subtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, uint)>(&System::Numerics::BigIntegerCalculator::Subtract)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Subtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Subtract
// Il2CppName: Subtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Subtract)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Subtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Subtract
// Il2CppName: Subtract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Subtract)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Subtract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Compare)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Square
// Il2CppName: Square
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Square)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Square", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Square
// Il2CppName: Square
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Square)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* valueLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Square", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, valueLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, uint)>(&System::Numerics::BigIntegerCalculator::Multiply)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (*)(::ArrayW<uint>, ::ArrayW<uint>)>(&System::Numerics::BigIntegerCalculator::Multiply)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* right = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::Multiply
// Il2CppName: Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::Multiply)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bits = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* bitsLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, bits, bitsLength});
  }
};
// Writing MetadataGetter for method: System::Numerics::BigIntegerCalculator::SubtractCore
// Il2CppName: SubtractCore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint*, int, uint*, int, uint*, int)>(&System::Numerics::BigIntegerCalculator::SubtractCore)> {
  static const MethodInfo* get() {
    static auto* left = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* leftLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* right = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* rightLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* core = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "UInt32"))->byval_arg;
    static auto* coreLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Numerics::BigIntegerCalculator*), "SubtractCore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, leftLength, right, rightLength, core, coreLength});
  }
};
