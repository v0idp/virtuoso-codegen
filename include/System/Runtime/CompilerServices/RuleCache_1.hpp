// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: RuleCache`1<T>
  template<typename T>
  class RuleCache_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Runtime::CompilerServices::RuleCache_1, "System.Runtime.CompilerServices", "RuleCache`1");
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Runtime.CompilerServices.RuleCache`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DebuggerStepThroughAttribute] Offset: FFFFFFFF
  // [EditorBrowsableAttribute] Offset: 6A1874
  template<typename T>
  class RuleCache_1 : public ::Il2CppObject {
    public:
    public:
    // private T[] _rules
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> rules;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private readonly System.Object _cacheLock
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* cacheLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private T[] _rules
    [[deprecated]] ::ArrayW<T>& dyn__rules() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::RuleCache_1::dyn__rules");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rules"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Object _cacheLock
    [[deprecated]] ::Il2CppObject*& dyn__cacheLock() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::RuleCache_1::dyn__cacheLock");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_cacheLock"))->offset;
      return *reinterpret_cast<::Il2CppObject**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // T[] GetRules()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> GetRules() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::RuleCache_1::GetRules");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
    }
    // System.Void MoveRule(T rule, System.Int32 i)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void MoveRule(T rule, int i) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::RuleCache_1::MoveRule");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveRule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rule), ::il2cpp_utils::ExtractType(i)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, rule, i);
    }
    // System.Void AddRule(T newRule)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddRule(T newRule) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::RuleCache_1::AddRule");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRule", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newRule)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, newRule);
    }
    // static private T[] AddOrInsert(T[] rules, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::ArrayW<T> AddOrInsert(::ArrayW<T> rules, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::RuleCache_1::AddOrInsert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<RuleCache_1<T>*>::get(), "AddOrInsert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rules), ::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, rules, item);
    }
    // System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuleCache_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::RuleCache_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuleCache_1<T>*, creationType>()));
    }
  }; // System.Runtime.CompilerServices.RuleCache`1
  // Could not write size check! Type: System.Runtime.CompilerServices.RuleCache`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
