// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: CallSiteBinder
  class CallSiteBinder;
}
// Completed forward declares
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: CallSite
  class CallSite;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Runtime::CompilerServices::CallSite);
DEFINE_IL2CPP_ARG_TYPE(::System::Runtime::CompilerServices::CallSite*, "System.Runtime.CompilerServices", "CallSite");
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.CompilerServices.CallSite
  // [TokenAttribute] Offset: FFFFFFFF
  class CallSite : public ::Il2CppObject {
    public:
    public:
    // readonly System.Runtime.CompilerServices.CallSiteBinder _binder
    // Size: 0x8
    // Offset: 0x10
    ::System::Runtime::CompilerServices::CallSiteBinder* binder;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::CallSiteBinder*) == 0x8);
    // System.Boolean _match
    // Size: 0x1
    // Offset: 0x18
    bool match;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: readonly System.Runtime.CompilerServices.CallSiteBinder _binder
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::CallSiteBinder*& dyn__binder();
    // Get instance field reference: System.Boolean _match
    [[deprecated("Use field access instead!")]] bool& dyn__match();
    // public System.Runtime.CompilerServices.CallSiteBinder get_Binder()
    // Offset: 0x11F7CD4
    ::System::Runtime::CompilerServices::CallSiteBinder* get_Binder();
    // System.Void .ctor(System.Runtime.CompilerServices.CallSiteBinder binder)
    // Offset: 0x11F7CA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallSite* New_ctor(::System::Runtime::CompilerServices::CallSiteBinder* binder) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::CallSite::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallSite*, creationType>(binder)));
    }
  }; // System.Runtime.CompilerServices.CallSite
  #pragma pack(pop)
  static check_size<sizeof(CallSite), 24 + sizeof(bool)> __System_Runtime_CompilerServices_CallSiteSizeCheck;
  static_assert(sizeof(CallSite) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Runtime::CompilerServices::CallSite::get_Binder
// Il2CppName: get_Binder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::CompilerServices::CallSiteBinder* (System::Runtime::CompilerServices::CallSite::*)()>(&System::Runtime::CompilerServices::CallSite::get_Binder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Runtime::CompilerServices::CallSite*), "get_Binder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Runtime::CompilerServices::CallSite::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
