// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.CompilerServices.ICriticalNotifyCompletion
#include "System/Runtime/CompilerServices/ICriticalNotifyCompletion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: TaskAwaiter`1<TResult>
  template<typename TResult>
  struct TaskAwaiter_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::System::Runtime::CompilerServices::TaskAwaiter_1, "System.Runtime.CompilerServices", "TaskAwaiter`1");
// Type namespace: System.Runtime.CompilerServices
namespace System::Runtime::CompilerServices {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Runtime.CompilerServices.TaskAwaiter`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TResult>
  struct TaskAwaiter_1/*, public ::System::ValueType, public ::System::Runtime::CompilerServices::ICriticalNotifyCompletion*/ {
    public:
    public:
    // private readonly System.Threading.Tasks.Task`1<TResult> m_task
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::Tasks::Task_1<TResult>* m_task;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task_1<TResult>*) == 0x8);
    public:
    // Creating value type constructor for type: TaskAwaiter_1
    constexpr TaskAwaiter_1(::System::Threading::Tasks::Task_1<TResult>* m_task_ = {}) noexcept : m_task{m_task_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::CompilerServices::ICriticalNotifyCompletion
    operator ::System::Runtime::CompilerServices::ICriticalNotifyCompletion() noexcept {
      return *reinterpret_cast<::System::Runtime::CompilerServices::ICriticalNotifyCompletion*>(this);
    }
    // Creating conversion operator: operator ::System::Threading::Tasks::Task_1<TResult>*
    constexpr operator ::System::Threading::Tasks::Task_1<TResult>*() const noexcept {
      return m_task;
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Threading.Tasks.Task`1<TResult> m_task
    [[deprecated]] ::System::Threading::Tasks::Task_1<TResult>*& dyn_m_task() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::TaskAwaiter_1::dyn_m_task");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_task"))->offset;
      return *reinterpret_cast<::System::Threading::Tasks::Task_1<TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Boolean get_IsCompleted()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCompleted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::TaskAwaiter_1::get_IsCompleted");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_IsCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // System.Void .ctor(System.Threading.Tasks.Task`1<TResult> task)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // ABORTED: conflicts with another method.  TaskAwaiter_1(::System::Threading::Tasks::Task_1<TResult>* task)
    // public System.Void OnCompleted(System.Action continuation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnCompleted(::System::Action* continuation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::TaskAwaiter_1::OnCompleted");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Runtime::CompilerServices::TaskAwaiter_1<TResult>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuation);
    }
    // public System.Void UnsafeOnCompleted(System.Action continuation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnsafeOnCompleted(::System::Action* continuation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::TaskAwaiter_1::UnsafeOnCompleted");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::Runtime::CompilerServices::TaskAwaiter_1<TResult>), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, continuation);
    }
    // public TResult GetResult()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TResult GetResult() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Runtime::CompilerServices::TaskAwaiter_1::GetResult");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetResult", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<TResult, false>(this, ___internal__method);
    }
  }; // System.Runtime.CompilerServices.TaskAwaiter`1
  // Could not write size check! Type: System.Runtime.CompilerServices.TaskAwaiter`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
