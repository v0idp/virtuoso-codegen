// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.AutoIncrementValue
#include "System/Data/AutoIncrementValue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Numerics
namespace System::Numerics {
  // Forward declaring type: BigInteger
  struct BigInteger;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: AutoIncrementInt64
  class AutoIncrementInt64;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::AutoIncrementInt64);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::AutoIncrementInt64*, "System.Data", "AutoIncrementInt64");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.AutoIncrementInt64
  // [TokenAttribute] Offset: FFFFFFFF
  class AutoIncrementInt64 : public ::System::Data::AutoIncrementValue {
    public:
    // Writing base type padding for base size: 0x11 to desired offset: 0x18
    char ___base_padding[0x7] = {};
    public:
    // private System.Int64 _current
    // Size: 0x8
    // Offset: 0x18
    int64_t current;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _seed
    // Size: 0x8
    // Offset: 0x20
    int64_t seed;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _step
    // Size: 0x8
    // Offset: 0x28
    int64_t step;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Deleting conversion operator: operator bool
    constexpr operator bool() const noexcept = delete;
    // Get instance field reference: private System.Int64 _current
    [[deprecated]] int64_t& dyn__current();
    // Get instance field reference: private System.Int64 _seed
    [[deprecated]] int64_t& dyn__seed();
    // Get instance field reference: private System.Int64 _step
    [[deprecated]] int64_t& dyn__step();
    // private System.Boolean BoundaryCheck(System.Numerics.BigInteger value)
    // Offset: 0x14A36D8
    bool BoundaryCheck(::System::Numerics::BigInteger value);
    // override System.Object get_Current()
    // Offset: 0x14A34D0
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Object AutoIncrementValue::get_Current()
    ::Il2CppObject* get_Current();
    // override System.Void set_Current(System.Object value)
    // Offset: 0x14A3530
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Void AutoIncrementValue::set_Current(System.Object value)
    void set_Current(::Il2CppObject* value);
    // override System.Type get_DataType()
    // Offset: 0x14A35B4
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Type AutoIncrementValue::get_DataType()
    ::System::Type* get_DataType();
    // override System.Int64 get_Seed()
    // Offset: 0x14A362C
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Int64 AutoIncrementValue::get_Seed()
    int64_t get_Seed();
    // override System.Void set_Seed(System.Int64 value)
    // Offset: 0x14A3634
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Void AutoIncrementValue::set_Seed(System.Int64 value)
    void set_Seed(int64_t value);
    // override System.Int64 get_Step()
    // Offset: 0x14A37C4
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Int64 AutoIncrementValue::get_Step()
    int64_t get_Step();
    // override System.Void set_Step(System.Int64 value)
    // Offset: 0x14A37CC
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Void AutoIncrementValue::set_Step(System.Int64 value)
    void set_Step(int64_t value);
    // public System.Void .ctor()
    // Offset: 0x14A3A74
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Void AutoIncrementValue::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AutoIncrementInt64* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::AutoIncrementInt64::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AutoIncrementInt64*, creationType>()));
    }
    // override System.Void MoveAfter()
    // Offset: 0x14A385C
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Void AutoIncrementValue::MoveAfter()
    void MoveAfter();
    // override System.Void SetCurrent(System.Object value, System.IFormatProvider formatProvider)
    // Offset: 0x14A3870
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Void AutoIncrementValue::SetCurrent(System.Object value, System.IFormatProvider formatProvider)
    void SetCurrent(::Il2CppObject* value, ::System::IFormatProvider* formatProvider);
    // override System.Void SetCurrentAndIncrement(System.Object value)
    // Offset: 0x14A38F0
    // Implemented from: System.Data.AutoIncrementValue
    // Base method: System.Void AutoIncrementValue::SetCurrentAndIncrement(System.Object value)
    void SetCurrentAndIncrement(::Il2CppObject* value);
  }; // System.Data.AutoIncrementInt64
  #pragma pack(pop)
  static check_size<sizeof(AutoIncrementInt64), 40 + sizeof(int64_t)> __System_Data_AutoIncrementInt64SizeCheck;
  static_assert(sizeof(AutoIncrementInt64) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::BoundaryCheck
// Il2CppName: BoundaryCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::AutoIncrementInt64::*)(::System::Numerics::BigInteger)>(&System::Data::AutoIncrementInt64::BoundaryCheck)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Numerics", "BigInteger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "BoundaryCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::AutoIncrementInt64::*)()>(&System::Data::AutoIncrementInt64::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::set_Current
// Il2CppName: set_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::AutoIncrementInt64::*)(::Il2CppObject*)>(&System::Data::AutoIncrementInt64::set_Current)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "set_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::get_DataType
// Il2CppName: get_DataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Data::AutoIncrementInt64::*)()>(&System::Data::AutoIncrementInt64::get_DataType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "get_DataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::get_Seed
// Il2CppName: get_Seed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Data::AutoIncrementInt64::*)()>(&System::Data::AutoIncrementInt64::get_Seed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "get_Seed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::set_Seed
// Il2CppName: set_Seed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::AutoIncrementInt64::*)(int64_t)>(&System::Data::AutoIncrementInt64::set_Seed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "set_Seed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::get_Step
// Il2CppName: get_Step
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (System::Data::AutoIncrementInt64::*)()>(&System::Data::AutoIncrementInt64::get_Step)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "get_Step", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::set_Step
// Il2CppName: set_Step
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::AutoIncrementInt64::*)(int64_t)>(&System::Data::AutoIncrementInt64::set_Step)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "set_Step", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::MoveAfter
// Il2CppName: MoveAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::AutoIncrementInt64::*)()>(&System::Data::AutoIncrementInt64::MoveAfter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "MoveAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::SetCurrent
// Il2CppName: SetCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::AutoIncrementInt64::*)(::Il2CppObject*, ::System::IFormatProvider*)>(&System::Data::AutoIncrementInt64::SetCurrent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* formatProvider = &::il2cpp_utils::GetClassFromName("System", "IFormatProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "SetCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, formatProvider});
  }
};
// Writing MetadataGetter for method: System::Data::AutoIncrementInt64::SetCurrentAndIncrement
// Il2CppName: SetCurrentAndIncrement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::AutoIncrementInt64::*)(::Il2CppObject*)>(&System::Data::AutoIncrementInt64::SetCurrentAndIncrement)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::AutoIncrementInt64*), "SetCurrentAndIncrement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
