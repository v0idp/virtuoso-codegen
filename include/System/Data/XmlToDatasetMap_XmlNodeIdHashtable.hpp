// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.XmlToDatasetMap
#include "System/Data/XmlToDatasetMap.hpp"
// Including type: System.Collections.Hashtable
#include "System/Collections/Hashtable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNode
  class XmlNode;
  // Forward declaring type: XmlReader
  class XmlReader;
}
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::XmlToDatasetMap::XmlNodeIdHashtable);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::XmlToDatasetMap::XmlNodeIdHashtable*, "System.Data", "XmlToDatasetMap/XmlNodeIdHashtable");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.XmlToDatasetMap/System.Data.XmlNodeIdHashtable
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6BA570
  class XmlToDatasetMap::XmlNodeIdHashtable : public ::System::Collections::Hashtable {
    public:
    public:
    // private System.Data.XmlToDatasetMap/System.Data.XmlNodeIdentety _id
    // Size: 0x8
    // Offset: 0x50
    ::System::Data::XmlToDatasetMap::XmlNodeIdentety* id;
    // Field size check
    static_assert(sizeof(::System::Data::XmlToDatasetMap::XmlNodeIdentety*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Data::XmlToDatasetMap::XmlNodeIdentety*
    constexpr operator ::System::Data::XmlToDatasetMap::XmlNodeIdentety*() const noexcept {
      return id;
    }
    // Get instance field reference: private System.Data.XmlToDatasetMap/System.Data.XmlNodeIdentety _id
    [[deprecated]] ::System::Data::XmlToDatasetMap::XmlNodeIdentety*& dyn__id();
    // public System.Object get_Item(System.Xml.XmlNode node)
    // Offset: 0x18CE810
    ::Il2CppObject* get_Item(::System::Xml::XmlNode* node);
    // public System.Object get_Item(System.Xml.XmlReader dataReader)
    // Offset: 0x18CE894
    ::Il2CppObject* get_Item(::System::Xml::XmlReader* dataReader);
    // public System.Object get_Item(System.Data.DataTable table)
    // Offset: 0x18CE910
    ::Il2CppObject* get_Item(::System::Data::DataTable* table);
    // public System.Object get_Item(System.String name)
    // Offset: 0x18CE984
    ::Il2CppObject* get_Item(::StringW name);
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x18CE740
    // Implemented from: System.Collections.Hashtable
    // Base method: System.Void Hashtable::.ctor(System.Int32 capacity)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlToDatasetMap::XmlNodeIdHashtable* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XmlToDatasetMap::XmlNodeIdHashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlToDatasetMap::XmlNodeIdHashtable*, creationType>(capacity)));
    }
  }; // System.Data.XmlToDatasetMap/System.Data.XmlNodeIdHashtable
  #pragma pack(pop)
  static check_size<sizeof(XmlToDatasetMap::XmlNodeIdHashtable), 80 + sizeof(::System::Data::XmlToDatasetMap::XmlNodeIdentety*)> __System_Data_XmlToDatasetMap_XmlNodeIdHashtableSizeCheck;
  static_assert(sizeof(XmlToDatasetMap::XmlNodeIdHashtable) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::XmlNodeIdHashtable::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::XmlToDatasetMap::XmlNodeIdHashtable::*)(::System::Xml::XmlNode*)>(&System::Data::XmlToDatasetMap::XmlNodeIdHashtable::get_Item)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap::XmlNodeIdHashtable*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::XmlNodeIdHashtable::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::XmlToDatasetMap::XmlNodeIdHashtable::*)(::System::Xml::XmlReader*)>(&System::Data::XmlToDatasetMap::XmlNodeIdHashtable::get_Item)> {
  static const MethodInfo* get() {
    static auto* dataReader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap::XmlNodeIdHashtable*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataReader});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::XmlNodeIdHashtable::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::XmlToDatasetMap::XmlNodeIdHashtable::*)(::System::Data::DataTable*)>(&System::Data::XmlToDatasetMap::XmlNodeIdHashtable::get_Item)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap::XmlNodeIdHashtable*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::XmlNodeIdHashtable::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::XmlToDatasetMap::XmlNodeIdHashtable::*)(::StringW)>(&System::Data::XmlToDatasetMap::XmlNodeIdHashtable::get_Item)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap::XmlNodeIdHashtable*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::XmlNodeIdHashtable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
