// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.Index
#include "System/Data/Index.hpp"
// Including type: System.Data.RBTree`1
#include "System/Data/RBTree_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::Index::IndexTree);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::Index::IndexTree*, "System.Data", "Index/IndexTree");
// Type namespace: System.Data
namespace System::Data {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Data.Index/System.Data.IndexTree
  // [TokenAttribute] Offset: FFFFFFFF
  class Index::IndexTree : public ::System::Data::RBTree_1<int> {
    public:
    public:
    // private readonly System.Data.Index _index
    // Size: 0x8
    // Offset: 0x40
    ::System::Data::Index* index;
    // Field size check
    static_assert(sizeof(::System::Data::Index*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Data::Index*
    constexpr operator ::System::Data::Index*() const noexcept {
      return index;
    }
    // Get instance field reference: private readonly System.Data.Index _index
    [[deprecated]] ::System::Data::Index*& dyn__index();
    // System.Void .ctor(System.Data.Index index)
    // Offset: 0x18CE250
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Index::IndexTree* New_ctor(::System::Data::Index* index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Index::IndexTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Index::IndexTree*, creationType>(index)));
    }
    // protected System.Int32 CompareNode(System.Int32 record1, System.Int32 record2)
    // Offset: 0x18CE2B4
    int CompareNode(int record1, int record2);
    // protected System.Int32 CompareSateliteTreeNode(System.Int32 record1, System.Int32 record2)
    // Offset: 0x18CE2D0
    int CompareSateliteTreeNode(int record1, int record2);
  }; // System.Data.Index/System.Data.IndexTree
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::Index::IndexTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::Index::IndexTree::CompareNode
// Il2CppName: CompareNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::IndexTree::*)(int, int)>(&System::Data::Index::IndexTree::CompareNode)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index::IndexTree*), "CompareNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, record2});
  }
};
// Writing MetadataGetter for method: System::Data::Index::IndexTree::CompareSateliteTreeNode
// Il2CppName: CompareSateliteTreeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::IndexTree::*)(int, int)>(&System::Data::Index::IndexTree::CompareSateliteTreeNode)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index::IndexTree*), "CompareSateliteTreeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, record2});
  }
};
