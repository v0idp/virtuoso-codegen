// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.DataTable
#include "System/Data/DataTable.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Data::DataTable::RowDiffIdUsageSection, "System.Data", "DataTable/RowDiffIdUsageSection");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Data.DataTable/System.Data.RowDiffIdUsageSection
  // [TokenAttribute] Offset: FFFFFFFF
  struct DataTable::RowDiffIdUsageSection/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Data.DataTable _targetTable
    // Size: 0x8
    // Offset: 0x0
    ::System::Data::DataTable* targetTable;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    public:
    // Creating value type constructor for type: RowDiffIdUsageSection
    constexpr RowDiffIdUsageSection(::System::Data::DataTable* targetTable_ = {}) noexcept : targetTable{targetTable_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::Data::DataTable*
    constexpr operator ::System::Data::DataTable*() const noexcept {
      return targetTable;
    }
    // Get instance field reference: private System.Data.DataTable _targetTable
    [[deprecated]] ::System::Data::DataTable*& dyn__targetTable();
    // System.Void Prepare(System.Data.DataTable table)
    // Offset: 0x18CE0D4
    void Prepare(::System::Data::DataTable* table);
  }; // System.Data.DataTable/System.Data.RowDiffIdUsageSection
  #pragma pack(pop)
  static check_size<sizeof(DataTable::RowDiffIdUsageSection), 0 + sizeof(::System::Data::DataTable*)> __System_Data_DataTable_RowDiffIdUsageSectionSizeCheck;
  static_assert(sizeof(DataTable::RowDiffIdUsageSection) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::DataTable::RowDiffIdUsageSection::Prepare
// Il2CppName: Prepare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::RowDiffIdUsageSection::*)(::System::Data::DataTable*)>(&System::Data::DataTable::RowDiffIdUsageSection::Prepare)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable::RowDiffIdUsageSection), "Prepare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
