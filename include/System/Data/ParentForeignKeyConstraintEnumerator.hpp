// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.ForeignKeyConstraintEnumerator
#include "System/Data/ForeignKeyConstraintEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataSet
  class DataSet;
  // Forward declaring type: Constraint
  class Constraint;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: ParentForeignKeyConstraintEnumerator
  class ParentForeignKeyConstraintEnumerator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::ParentForeignKeyConstraintEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::ParentForeignKeyConstraintEnumerator*, "System.Data", "ParentForeignKeyConstraintEnumerator");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.ParentForeignKeyConstraintEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class ParentForeignKeyConstraintEnumerator : public ::System::Data::ForeignKeyConstraintEnumerator {
    public:
    public:
    // private readonly System.Data.DataTable _table
    // Size: 0x8
    // Offset: 0x28
    ::System::Data::DataTable* table;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Data::DataTable*
    constexpr operator ::System::Data::DataTable*() const noexcept {
      return table;
    }
    // Get instance field reference: private readonly System.Data.DataTable _table
    [[deprecated]] ::System::Data::DataTable*& dyn__table();
    // public System.Void .ctor(System.Data.DataSet dataSet, System.Data.DataTable inTable)
    // Offset: 0x13C1F8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParentForeignKeyConstraintEnumerator* New_ctor(::System::Data::DataSet* dataSet, ::System::Data::DataTable* inTable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::ParentForeignKeyConstraintEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParentForeignKeyConstraintEnumerator*, creationType>(dataSet, inTable)));
    }
    // protected override System.Boolean IsValidCandidate(System.Data.Constraint constraint)
    // Offset: 0x13C1FB8
    // Implemented from: System.Data.ForeignKeyConstraintEnumerator
    // Base method: System.Boolean ForeignKeyConstraintEnumerator::IsValidCandidate(System.Data.Constraint constraint)
    bool IsValidCandidate(::System::Data::Constraint* constraint);
  }; // System.Data.ParentForeignKeyConstraintEnumerator
  #pragma pack(pop)
  static check_size<sizeof(ParentForeignKeyConstraintEnumerator), 40 + sizeof(::System::Data::DataTable*)> __System_Data_ParentForeignKeyConstraintEnumeratorSizeCheck;
  static_assert(sizeof(ParentForeignKeyConstraintEnumerator) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::ParentForeignKeyConstraintEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::ParentForeignKeyConstraintEnumerator::IsValidCandidate
// Il2CppName: IsValidCandidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::ParentForeignKeyConstraintEnumerator::*)(::System::Data::Constraint*)>(&System::Data::ParentForeignKeyConstraintEnumerator::IsValidCandidate)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System.Data", "Constraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ParentForeignKeyConstraintEnumerator*), "IsValidCandidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
