// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.DataView
#include "System/Data/DataView.hpp"
// Including type: System.Collections.Generic.IEqualityComparer`1
#include "System/Collections/Generic/IEqualityComparer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataRow
  class DataRow;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::DataView::DataRowReferenceComparer);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::DataView::DataRowReferenceComparer*, "System.Data", "DataView/DataRowReferenceComparer");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.DataView/System.Data.DataRowReferenceComparer
  // [TokenAttribute] Offset: FFFFFFFF
  class DataView::DataRowReferenceComparer : public ::Il2CppObject/*, public ::System::Collections::Generic::IEqualityComparer_1<::System::Data::DataRow*>*/ {
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEqualityComparer_1<::System::Data::DataRow*>
    operator ::System::Collections::Generic::IEqualityComparer_1<::System::Data::DataRow*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<::System::Data::DataRow*>*>(this);
    }
    // Get static field: static readonly System.Data.DataView/System.Data.DataRowReferenceComparer s_default
    static ::System::Data::DataView::DataRowReferenceComparer* _get_s_default();
    // Set static field: static readonly System.Data.DataView/System.Data.DataRowReferenceComparer s_default
    static void _set_s_default(::System::Data::DataView::DataRowReferenceComparer* value);
    // static private System.Void .cctor()
    // Offset: 0x18CE11C
    static void _cctor();
    // public System.Boolean Equals(System.Data.DataRow x, System.Data.DataRow y)
    // Offset: 0x18CE0F8
    bool Equals(::System::Data::DataRow* x, ::System::Data::DataRow* y);
    // public System.Int32 GetHashCode(System.Data.DataRow obj)
    // Offset: 0x18CE104
    int GetHashCode(::System::Data::DataRow* obj);
    // private System.Void .ctor()
    // Offset: 0x18CE0F0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataView::DataRowReferenceComparer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::DataView::DataRowReferenceComparer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataView::DataRowReferenceComparer*, creationType>()));
    }
  }; // System.Data.DataView/System.Data.DataRowReferenceComparer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::DataView::DataRowReferenceComparer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Data::DataView::DataRowReferenceComparer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataView::DataRowReferenceComparer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataView::DataRowReferenceComparer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataView::DataRowReferenceComparer::*)(::System::Data::DataRow*, ::System::Data::DataRow*)>(&System::Data::DataView::DataRowReferenceComparer::Equals)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataView::DataRowReferenceComparer*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::Data::DataView::DataRowReferenceComparer::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataView::DataRowReferenceComparer::*)(::System::Data::DataRow*)>(&System::Data::DataView::DataRowReferenceComparer::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataView::DataRowReferenceComparer*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Data::DataView::DataRowReferenceComparer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
