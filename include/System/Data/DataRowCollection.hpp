// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.InternalDataCollectionBase
#include "System/Data/InternalDataCollectionBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataRow
  class DataRow;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: DataRowCollection
  class DataRowCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::DataRowCollection);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::DataRowCollection*, "System.Data", "DataRowCollection");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.DataRowCollection
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6BA120
  class DataRowCollection : public ::System::Data::InternalDataCollectionBase {
    public:
    // Nested type: ::System::Data::DataRowCollection::DataRowTree
    class DataRowTree;
    public:
    // private readonly System.Data.DataTable _table
    // Size: 0x8
    // Offset: 0x10
    ::System::Data::DataTable* table;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    // private readonly System.Data.DataRowCollection/System.Data.DataRowTree _list
    // Size: 0x8
    // Offset: 0x18
    ::System::Data::DataRowCollection::DataRowTree* list;
    // Field size check
    static_assert(sizeof(::System::Data::DataRowCollection::DataRowTree*) == 0x8);
    // System.Int32 _nullInList
    // Size: 0x4
    // Offset: 0x20
    int nullInList;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private readonly System.Data.DataTable _table
    [[deprecated]] ::System::Data::DataTable*& dyn__table();
    // Get instance field reference: private readonly System.Data.DataRowCollection/System.Data.DataRowTree _list
    [[deprecated]] ::System::Data::DataRowCollection::DataRowTree*& dyn__list();
    // Get instance field reference: System.Int32 _nullInList
    [[deprecated]] int& dyn__nullInList();
    // public System.Data.DataRow get_Item(System.Int32 index)
    // Offset: 0xF96818
    ::System::Data::DataRow* get_Item(int index);
    // System.Void .ctor(System.Data.DataTable table)
    // Offset: 0xFA1D5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataRowCollection* New_ctor(::System::Data::DataTable* table) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::DataRowCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataRowCollection*, creationType>(table)));
    }
    // public System.Void Add(System.Data.DataRow row)
    // Offset: 0xFA1E54
    void Add(::System::Data::DataRow* row);
    // System.Void DiffInsertAt(System.Data.DataRow row, System.Int32 pos)
    // Offset: 0xFA1E74
    void DiffInsertAt(::System::Data::DataRow* row, int pos);
    // public System.Int32 IndexOf(System.Data.DataRow row)
    // Offset: 0xFA2094
    int IndexOf(::System::Data::DataRow* row);
    // System.Data.DataRow AddWithColumnEvents(params System.Object[] values)
    // Offset: 0xFA213C
    ::System::Data::DataRow* AddWithColumnEvents(::ArrayW<::Il2CppObject*> values);
    // System.Void ArrayAdd(System.Data.DataRow row)
    // Offset: 0xFA21A8
    void ArrayAdd(::System::Data::DataRow* row);
    // System.Void ArrayInsert(System.Data.DataRow row, System.Int32 pos)
    // Offset: 0xFA221C
    void ArrayInsert(::System::Data::DataRow* row, int pos);
    // System.Void ArrayClear()
    // Offset: 0xFA2298
    void ArrayClear();
    // System.Void ArrayRemove(System.Data.DataRow row)
    // Offset: 0xFA22EC
    void ArrayRemove(::System::Data::DataRow* row);
    // public System.Void CopyTo(System.Data.DataRow[] array, System.Int32 index)
    // Offset: 0xFA23F8
    void CopyTo(::ArrayW<::System::Data::DataRow*> array, int index);
    // public override System.Int32 get_Count()
    // Offset: 0xFA1E00
    // Implemented from: System.Data.InternalDataCollectionBase
    // Base method: System.Int32 InternalDataCollectionBase::get_Count()
    int get_Count();
    // public override System.Void CopyTo(System.Array ar, System.Int32 index)
    // Offset: 0xFA238C
    // Implemented from: System.Data.InternalDataCollectionBase
    // Base method: System.Void InternalDataCollectionBase::CopyTo(System.Array ar, System.Int32 index)
    void CopyTo(::System::Array* ar, int index);
    // public override System.Collections.IEnumerator GetEnumerator()
    // Offset: 0xFA2464
    // Implemented from: System.Data.InternalDataCollectionBase
    // Base method: System.Collections.IEnumerator InternalDataCollectionBase::GetEnumerator()
    ::System::Collections::IEnumerator* GetEnumerator();
  }; // System.Data.DataRowCollection
  #pragma pack(pop)
  static check_size<sizeof(DataRowCollection), 32 + sizeof(int)> __System_Data_DataRowCollectionSizeCheck;
  static_assert(sizeof(DataRowCollection) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::DataRowCollection::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataRowCollection::*)(int)>(&System::Data::DataRowCollection::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::DataRowCollection::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataRowCollection::*)(::System::Data::DataRow*)>(&System::Data::DataRowCollection::Add)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::DiffInsertAt
// Il2CppName: DiffInsertAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataRowCollection::*)(::System::Data::DataRow*, int)>(&System::Data::DataRowCollection::DiffInsertAt)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "DiffInsertAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, pos});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataRowCollection::*)(::System::Data::DataRow*)>(&System::Data::DataRowCollection::IndexOf)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::AddWithColumnEvents
// Il2CppName: AddWithColumnEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataRowCollection::*)(::ArrayW<::Il2CppObject*>)>(&System::Data::DataRowCollection::AddWithColumnEvents)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "AddWithColumnEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::ArrayAdd
// Il2CppName: ArrayAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataRowCollection::*)(::System::Data::DataRow*)>(&System::Data::DataRowCollection::ArrayAdd)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "ArrayAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::ArrayInsert
// Il2CppName: ArrayInsert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataRowCollection::*)(::System::Data::DataRow*, int)>(&System::Data::DataRowCollection::ArrayInsert)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "ArrayInsert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, pos});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::ArrayClear
// Il2CppName: ArrayClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataRowCollection::*)()>(&System::Data::DataRowCollection::ArrayClear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "ArrayClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::ArrayRemove
// Il2CppName: ArrayRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataRowCollection::*)(::System::Data::DataRow*)>(&System::Data::DataRowCollection::ArrayRemove)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "ArrayRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataRowCollection::*)(::ArrayW<::System::Data::DataRow*>, int)>(&System::Data::DataRowCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "DataRow"), 1)->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{array, index});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataRowCollection::*)()>(&System::Data::DataRowCollection::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataRowCollection::*)(::System::Array*, int)>(&System::Data::DataRowCollection::CopyTo)> {
  static const MethodInfo* get() {
    static auto* ar = &::il2cpp_utils::GetClassFromName("System", "Array")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ar, index});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (System::Data::DataRowCollection::*)()>(&System::Data::DataRowCollection::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
