// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.ExpressionNode
#include "System/Data/ExpressionNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: Function
  class Function;
  // Forward declaring type: FunctionId
  struct FunctionId;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataRow
  class DataRow;
  // Forward declaring type: DataRowVersion
  struct DataRowVersion;
  // Forward declaring type: DataColumn
  class DataColumn;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: FunctionNode
  class FunctionNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::FunctionNode);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::FunctionNode*, "System.Data", "FunctionNode");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.FunctionNode
  // [TokenAttribute] Offset: FFFFFFFF
  class FunctionNode : public ::System::Data::ExpressionNode {
    public:
    public:
    // readonly System.String _name
    // Size: 0x8
    // Offset: 0x18
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // readonly System.Int32 _info
    // Size: 0x4
    // Offset: 0x20
    int info;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Int32 _argumentCount
    // Size: 0x4
    // Offset: 0x24
    int argumentCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Data.ExpressionNode[] _arguments
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::System::Data::ExpressionNode*> arguments;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::ExpressionNode*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Data::DataTable*
    constexpr operator ::System::Data::DataTable*() const noexcept = delete;
    // Get static field: static private readonly System.Data.Function[] s_funcs
    static ::ArrayW<::System::Data::Function*> _get_s_funcs();
    // Set static field: static private readonly System.Data.Function[] s_funcs
    static void _set_s_funcs(::ArrayW<::System::Data::Function*> value);
    // Get instance field reference: readonly System.String _name
    [[deprecated]] ::StringW& dyn__name();
    // Get instance field reference: readonly System.Int32 _info
    [[deprecated]] int& dyn__info();
    // Get instance field reference: System.Int32 _argumentCount
    [[deprecated]] int& dyn__argumentCount();
    // Get instance field reference: System.Data.ExpressionNode[] _arguments
    [[deprecated]] ::ArrayW<::System::Data::ExpressionNode*>& dyn__arguments();
    // System.Data.FunctionId get_Aggregate()
    // Offset: 0x13AEA7C
    ::System::Data::FunctionId get_Aggregate();
    // System.Boolean get_IsAggregate()
    // Offset: 0x13AEB2C
    bool get_IsAggregate();
    // System.Void .ctor(System.Data.DataTable table, System.String name)
    // Offset: 0x13AB710
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FunctionNode* New_ctor(::System::Data::DataTable* table, ::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::FunctionNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FunctionNode*, creationType>(table, name)));
    }
    // static private System.Void .cctor()
    // Offset: 0x13AEDA4
    static void _cctor();
    // System.Void AddArgument(System.Data.ExpressionNode argument)
    // Offset: 0x13AB860
    void AddArgument(::System::Data::ExpressionNode* argument);
    // private System.Type GetDataType(System.Data.ExpressionNode node)
    // Offset: 0x13ACA40
    ::System::Type* GetDataType(::System::Data::ExpressionNode* node);
    // private System.Object EvalFunction(System.Data.FunctionId id, System.Object[] argumentValues, System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0x13ACD40
    ::Il2CppObject* EvalFunction(::System::Data::FunctionId id, ::ArrayW<::Il2CppObject*> argumentValues, ::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
    // System.Void Check()
    // Offset: 0x13ABD64
    void Check();
    // override System.Void Bind(System.Data.DataTable table, System.Collections.Generic.List`1<System.Data.DataColumn> list)
    // Offset: 0x13ABA6C
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Void ExpressionNode::Bind(System.Data.DataTable table, System.Collections.Generic.List`1<System.Data.DataColumn> list)
    void Bind(::System::Data::DataTable* table, ::System::Collections::Generic::List_1<::System::Data::DataColumn*>* list);
    // override System.Object Eval()
    // Offset: 0x13ABF98
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Object ExpressionNode::Eval()
    ::Il2CppObject* Eval();
    // override System.Object Eval(System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0x13ABFAC
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Object ExpressionNode::Eval(System.Data.DataRow row, System.Data.DataRowVersion version)
    ::Il2CppObject* Eval(::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
    // override System.Object Eval(System.Int32[] recordNos)
    // Offset: 0x13AE5A0
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Object ExpressionNode::Eval(System.Int32[] recordNos)
    ::Il2CppObject* Eval(::ArrayW<int> recordNos);
    // override System.Boolean IsConstant()
    // Offset: 0x13AE5DC
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::IsConstant()
    bool IsConstant();
    // override System.Boolean IsTableConstant()
    // Offset: 0x13AE678
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::IsTableConstant()
    bool IsTableConstant();
    // override System.Boolean HasLocalAggregate()
    // Offset: 0x13AE700
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::HasLocalAggregate()
    bool HasLocalAggregate();
    // override System.Boolean HasRemoteAggregate()
    // Offset: 0x13AE788
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::HasRemoteAggregate()
    bool HasRemoteAggregate();
    // override System.Boolean DependsOn(System.Data.DataColumn column)
    // Offset: 0x13AE810
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::DependsOn(System.Data.DataColumn column)
    bool DependsOn(::System::Data::DataColumn* column);
    // override System.Data.ExpressionNode Optimize()
    // Offset: 0x13AE8AC
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Data.ExpressionNode ExpressionNode::Optimize()
    ::System::Data::ExpressionNode* Optimize();
  }; // System.Data.FunctionNode
  #pragma pack(pop)
  static check_size<sizeof(FunctionNode), 40 + sizeof(::ArrayW<::System::Data::ExpressionNode*>)> __System_Data_FunctionNodeSizeCheck;
  static_assert(sizeof(FunctionNode) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::FunctionNode::get_Aggregate
// Il2CppName: get_Aggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::FunctionId (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::get_Aggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "get_Aggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::get_IsAggregate
// Il2CppName: get_IsAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::get_IsAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "get_IsAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::FunctionNode::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Data::FunctionNode::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::AddArgument
// Il2CppName: AddArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::FunctionNode::*)(::System::Data::ExpressionNode*)>(&System::Data::FunctionNode::AddArgument)> {
  static const MethodInfo* get() {
    static auto* argument = &::il2cpp_utils::GetClassFromName("System.Data", "ExpressionNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "AddArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{argument});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::GetDataType
// Il2CppName: GetDataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Data::FunctionNode::*)(::System::Data::ExpressionNode*)>(&System::Data::FunctionNode::GetDataType)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Data", "ExpressionNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "GetDataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::EvalFunction
// Il2CppName: EvalFunction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::FunctionNode::*)(::System::Data::FunctionId, ::ArrayW<::Il2CppObject*>, ::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::FunctionNode::EvalFunction)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System.Data", "FunctionId")->byval_arg;
    static auto* argumentValues = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "EvalFunction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, argumentValues, row, version});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::Check
// Il2CppName: Check
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::Check)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "Check", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::FunctionNode::*)(::System::Data::DataTable*, ::System::Collections::Generic::List_1<::System::Data::DataColumn*>*)>(&System::Data::FunctionNode::Bind)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, list});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::Eval
// Il2CppName: Eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::Eval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "Eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::Eval
// Il2CppName: Eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::FunctionNode::*)(::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::FunctionNode::Eval)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "Eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, version});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::Eval
// Il2CppName: Eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::FunctionNode::*)(::ArrayW<int>)>(&System::Data::FunctionNode::Eval)> {
  static const MethodInfo* get() {
    static auto* recordNos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "Eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordNos});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::IsConstant
// Il2CppName: IsConstant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::IsConstant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "IsConstant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::IsTableConstant
// Il2CppName: IsTableConstant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::IsTableConstant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "IsTableConstant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::HasLocalAggregate
// Il2CppName: HasLocalAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::HasLocalAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "HasLocalAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::HasRemoteAggregate
// Il2CppName: HasRemoteAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::HasRemoteAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "HasRemoteAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::DependsOn
// Il2CppName: DependsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::FunctionNode::*)(::System::Data::DataColumn*)>(&System::Data::FunctionNode::DependsOn)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "DependsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::FunctionNode::Optimize
// Il2CppName: Optimize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::ExpressionNode* (System::Data::FunctionNode::*)()>(&System::Data::FunctionNode::Optimize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::FunctionNode*), "Optimize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
