// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: ConstraintTable
  class ConstraintTable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::ConstraintTable);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::ConstraintTable*, "System.Data", "ConstraintTable");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.ConstraintTable
  // [TokenAttribute] Offset: FFFFFFFF
  class ConstraintTable : public ::Il2CppObject {
    public:
    public:
    // public System.Data.DataTable table
    // Size: 0x8
    // Offset: 0x10
    ::System::Data::DataTable* table;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    // public System.Xml.Schema.XmlSchemaIdentityConstraint constraint
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::XmlSchemaIdentityConstraint* constraint;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaIdentityConstraint*) == 0x8);
    public:
    // Get instance field reference: public System.Data.DataTable table
    [[deprecated("Use field access instead!")]] ::System::Data::DataTable*& dyn_table();
    // Get instance field reference: public System.Xml.Schema.XmlSchemaIdentityConstraint constraint
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaIdentityConstraint*& dyn_constraint();
    // public System.Void .ctor(System.Data.DataTable t, System.Xml.Schema.XmlSchemaIdentityConstraint c)
    // Offset: 0x14B52E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConstraintTable* New_ctor(::System::Data::DataTable* t, ::System::Xml::Schema::XmlSchemaIdentityConstraint* c) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::ConstraintTable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConstraintTable*, creationType>(t, c)));
    }
  }; // System.Data.ConstraintTable
  #pragma pack(pop)
  static check_size<sizeof(ConstraintTable), 24 + sizeof(::System::Xml::Schema::XmlSchemaIdentityConstraint*)> __System_Data_ConstraintTableSizeCheck;
  static_assert(sizeof(ConstraintTable) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::ConstraintTable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
