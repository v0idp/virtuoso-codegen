// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.XMLSchema
#include "System/Data/XMLSchema.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataSet
  class DataSet;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataColumn
  class DataColumn;
  // Forward declaring type: AcceptRejectRule
  struct AcceptRejectRule;
  // Forward declaring type: Rule
  struct Rule;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
  // Forward declaring type: XmlSchemaElement
  class XmlSchemaElement;
  // Forward declaring type: XmlSchemaObjectCollection
  class XmlSchemaObjectCollection;
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaAnnotated
  class XmlSchemaAnnotated;
  // Forward declaring type: XmlSchemaParticle
  class XmlSchemaParticle;
  // Forward declaring type: XmlSchemaAnnotation
  class XmlSchemaAnnotation;
  // Forward declaring type: XmlSchemaAttributeGroup
  class XmlSchemaAttributeGroup;
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
  // Forward declaring type: XmlSchemaIdentityConstraint
  class XmlSchemaIdentityConstraint;
  // Forward declaring type: XmlSchemaKeyref
  class XmlSchemaKeyref;
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
  // Forward declaring type: XmlSchemaAttribute
  class XmlSchemaAttribute;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlAttribute
  class XmlAttribute;
  // Forward declaring type: XmlAttributeCollection
  class XmlAttributeCollection;
  // Forward declaring type: XmlElement
  class XmlElement;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: XSDSchema
  class XSDSchema;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::XSDSchema);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::XSDSchema*, "System.Data", "XSDSchema");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0xA1
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.XSDSchema
  // [TokenAttribute] Offset: FFFFFFFF
  class XSDSchema : public ::System::Data::XMLSchema {
    public:
    // Nested type: ::System::Data::XSDSchema::NameType
    class NameType;
    public:
    // private System.Xml.Schema.XmlSchemaSet _schemaSet
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::Schema::XmlSchemaSet* schemaSet;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaSet*) == 0x8);
    // private System.Xml.Schema.XmlSchemaElement _dsElement
    // Size: 0x8
    // Offset: 0x18
    ::System::Xml::Schema::XmlSchemaElement* dsElement;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaElement*) == 0x8);
    // private System.Data.DataSet _ds
    // Size: 0x8
    // Offset: 0x20
    ::System::Data::DataSet* ds;
    // Field size check
    static_assert(sizeof(::System::Data::DataSet*) == 0x8);
    // private System.String _schemaName
    // Size: 0x8
    // Offset: 0x28
    ::StringW schemaName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.ArrayList _columnExpressions
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::ArrayList* columnExpressions;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.Hashtable _constraintNodes
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Hashtable* constraintNodes;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.ArrayList _refTables
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::ArrayList* refTables;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList _complexTypes
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::ArrayList* complexTypes;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectCollection _annotations
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::Schema::XmlSchemaObjectCollection* annotations;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectCollection*) == 0x8);
    // private System.Xml.Schema.XmlSchemaObjectCollection _elements
    // Size: 0x8
    // Offset: 0x58
    ::System::Xml::Schema::XmlSchemaObjectCollection* elements;
    // Field size check
    static_assert(sizeof(::System::Xml::Schema::XmlSchemaObjectCollection*) == 0x8);
    // private System.Collections.Hashtable _attributes
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Hashtable* attributes;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _elementsTable
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Hashtable* elementsTable;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _attributeGroups
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Hashtable* attributeGroups;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _schemaTypes
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Hashtable* schemaTypes;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _expressions
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Hashtable* expressions;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Data.DataTable,System.Collections.Generic.List`1<System.Data.DataTable>> _tableDictionary
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::Dictionary_2<::System::Data::DataTable*, ::System::Collections::Generic::List_1<::System::Data::DataTable*>*>* tableDictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Data::DataTable*, ::System::Collections::Generic::List_1<::System::Data::DataTable*>*>*) == 0x8);
    // private System.Collections.Hashtable _udSimpleTypes
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Hashtable* udSimpleTypes;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _existingSimpleTypeMap
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Hashtable* existingSimpleTypeMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Boolean _fromInference
    // Size: 0x1
    // Offset: 0xA0
    bool fromInference;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private readonly System.Data.XSDSchema/System.Data.NameType[] s_mapNameTypeXsd
    static ::ArrayW<::System::Data::XSDSchema::NameType*> _get_s_mapNameTypeXsd();
    // Set static field: static private readonly System.Data.XSDSchema/System.Data.NameType[] s_mapNameTypeXsd
    static void _set_s_mapNameTypeXsd(::ArrayW<::System::Data::XSDSchema::NameType*> value);
    // Get instance field reference: private System.Xml.Schema.XmlSchemaSet _schemaSet
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaSet*& dyn__schemaSet();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaElement _dsElement
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaElement*& dyn__dsElement();
    // Get instance field reference: private System.Data.DataSet _ds
    [[deprecated("Use field access instead!")]] ::System::Data::DataSet*& dyn__ds();
    // Get instance field reference: private System.String _schemaName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__schemaName();
    // Get instance field reference: private System.Collections.ArrayList _columnExpressions
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__columnExpressions();
    // Get instance field reference: private System.Collections.Hashtable _constraintNodes
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__constraintNodes();
    // Get instance field reference: private System.Collections.ArrayList _refTables
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__refTables();
    // Get instance field reference: private System.Collections.ArrayList _complexTypes
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__complexTypes();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectCollection _annotations
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectCollection*& dyn__annotations();
    // Get instance field reference: private System.Xml.Schema.XmlSchemaObjectCollection _elements
    [[deprecated("Use field access instead!")]] ::System::Xml::Schema::XmlSchemaObjectCollection*& dyn__elements();
    // Get instance field reference: private System.Collections.Hashtable _attributes
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__attributes();
    // Get instance field reference: private System.Collections.Hashtable _elementsTable
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__elementsTable();
    // Get instance field reference: private System.Collections.Hashtable _attributeGroups
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__attributeGroups();
    // Get instance field reference: private System.Collections.Hashtable _schemaTypes
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__schemaTypes();
    // Get instance field reference: private System.Collections.Hashtable _expressions
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__expressions();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Data.DataTable,System.Collections.Generic.List`1<System.Data.DataTable>> _tableDictionary
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Data::DataTable*, ::System::Collections::Generic::List_1<::System::Data::DataTable*>*>*& dyn__tableDictionary();
    // Get instance field reference: private System.Collections.Hashtable _udSimpleTypes
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__udSimpleTypes();
    // Get instance field reference: private System.Collections.Hashtable _existingSimpleTypeMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__existingSimpleTypeMap();
    // Get instance field reference: private System.Boolean _fromInference
    [[deprecated("Use field access instead!")]] bool& dyn__fromInference();
    // System.Boolean get_FromInference()
    // Offset: 0x11C5208
    bool get_FromInference();
    // System.Void set_FromInference(System.Boolean value)
    // Offset: 0x11C5210
    void set_FromInference(bool value);
    // static private System.Void .cctor()
    // Offset: 0x11D3E04
    static void _cctor();
    // private System.Void CollectElementsAnnotations(System.Xml.Schema.XmlSchema schema)
    // Offset: 0x11C521C
    void CollectElementsAnnotations(::System::Xml::Schema::XmlSchema* schema);
    // private System.Void CollectElementsAnnotations(System.Xml.Schema.XmlSchema schema, System.Collections.ArrayList schemaList)
    // Offset: 0x11C52A8
    void CollectElementsAnnotations(::System::Xml::Schema::XmlSchema* schema, ::System::Collections::ArrayList* schemaList);
    // static System.String QualifiedName(System.String name)
    // Offset: 0x11C5CD4
    static ::StringW QualifiedName(::StringW name);
    // static System.Void SetProperties(System.Object instance, System.Xml.XmlAttribute[] attrs)
    // Offset: 0x11C5D54
    static void SetProperties(::Il2CppObject* instance, ::ArrayW<::System::Xml::XmlAttribute*> attrs);
    // static private System.Void SetExtProperties(System.Object instance, System.Xml.XmlAttribute[] attrs)
    // Offset: 0x11C62D8
    static void SetExtProperties(::Il2CppObject* instance, ::ArrayW<::System::Xml::XmlAttribute*> attrs);
    // private System.Void HandleColumnExpression(System.Object instance, System.Xml.XmlAttribute[] attrs)
    // Offset: 0x11C6684
    void HandleColumnExpression(::Il2CppObject* instance, ::ArrayW<::System::Xml::XmlAttribute*> attrs);
    // static System.String GetMsdataAttribute(System.Xml.Schema.XmlSchemaAnnotated node, System.String ln)
    // Offset: 0x11C5BA0
    static ::StringW GetMsdataAttribute(::System::Xml::Schema::XmlSchemaAnnotated* node, ::StringW ln);
    // static private System.Void SetExtProperties(System.Object instance, System.Xml.XmlAttributeCollection attrs)
    // Offset: 0x11C688C
    static void SetExtProperties(::Il2CppObject* instance, ::System::Xml::XmlAttributeCollection* attrs);
    // System.Void HandleRefTableProperties(System.Collections.ArrayList RefTables, System.Xml.Schema.XmlSchemaElement element)
    // Offset: 0x11C6AE4
    void HandleRefTableProperties(::System::Collections::ArrayList* RefTables, ::System::Xml::Schema::XmlSchemaElement* element);
    // System.Void HandleRelation(System.Xml.XmlElement node, System.Boolean fNested)
    // Offset: 0x11C6CC0
    void HandleRelation(::System::Xml::XmlElement* node, bool fNested);
    // private System.Boolean HasAttributes(System.Xml.Schema.XmlSchemaObjectCollection attributes)
    // Offset: 0x11C74DC
    bool HasAttributes(::System::Xml::Schema::XmlSchemaObjectCollection* attributes);
    // private System.Boolean IsDatasetParticle(System.Xml.Schema.XmlSchemaParticle pt)
    // Offset: 0x11C7744
    bool IsDatasetParticle(::System::Xml::Schema::XmlSchemaParticle* pt);
    // private System.Int32 DatasetElementCount(System.Xml.Schema.XmlSchemaObjectCollection elements)
    // Offset: 0x11C8144
    int DatasetElementCount(::System::Xml::Schema::XmlSchemaObjectCollection* elements);
    // private System.Xml.Schema.XmlSchemaElement FindDatasetElement(System.Xml.Schema.XmlSchemaObjectCollection elements)
    // Offset: 0x11C84A4
    ::System::Xml::Schema::XmlSchemaElement* FindDatasetElement(::System::Xml::Schema::XmlSchemaObjectCollection* elements);
    // public System.Void LoadSchema(System.Xml.Schema.XmlSchemaSet schemaSet, System.Data.DataTable dt)
    // Offset: 0x11C8A60
    void LoadSchema(::System::Xml::Schema::XmlSchemaSet* schemaSet, ::System::Data::DataTable* dt);
    // public System.Void LoadSchema(System.Xml.Schema.XmlSchemaSet schemaSet, System.Data.DataSet ds)
    // Offset: 0x11C8A80
    void LoadSchema(::System::Xml::Schema::XmlSchemaSet* schemaSet, ::System::Data::DataSet* ds);
    // private System.Void HandleRelations(System.Xml.Schema.XmlSchemaAnnotation ann, System.Boolean fNested)
    // Offset: 0x11CBEF4
    void HandleRelations(::System::Xml::Schema::XmlSchemaAnnotation* ann, bool fNested);
    // System.Xml.Schema.XmlSchemaObjectCollection GetParticleItems(System.Xml.Schema.XmlSchemaParticle pt)
    // Offset: 0x11C7CAC
    ::System::Xml::Schema::XmlSchemaObjectCollection* GetParticleItems(::System::Xml::Schema::XmlSchemaParticle* pt);
    // System.Void HandleParticle(System.Xml.Schema.XmlSchemaParticle pt, System.Data.DataTable table, System.Collections.ArrayList tableChildren, System.Boolean isBase)
    // Offset: 0x11CC1E8
    void HandleParticle(::System::Xml::Schema::XmlSchemaParticle* pt, ::System::Data::DataTable* table, ::System::Collections::ArrayList* tableChildren, bool isBase);
    // System.Void HandleAttributes(System.Xml.Schema.XmlSchemaObjectCollection attributes, System.Data.DataTable table, System.Boolean isBase)
    // Offset: 0x11CD8FC
    void HandleAttributes(::System::Xml::Schema::XmlSchemaObjectCollection* attributes, ::System::Data::DataTable* table, bool isBase);
    // private System.Void HandleAttributeGroup(System.Xml.Schema.XmlSchemaAttributeGroup attributeGroup, System.Data.DataTable table, System.Boolean isBase)
    // Offset: 0x11CE5B4
    void HandleAttributeGroup(::System::Xml::Schema::XmlSchemaAttributeGroup* attributeGroup, ::System::Data::DataTable* table, bool isBase);
    // System.Void HandleComplexType(System.Xml.Schema.XmlSchemaComplexType ct, System.Data.DataTable table, System.Collections.ArrayList tableChildren, System.Boolean isNillable)
    // Offset: 0x11CE940
    void HandleComplexType(::System::Xml::Schema::XmlSchemaComplexType* ct, ::System::Data::DataTable* table, ::System::Collections::ArrayList* tableChildren, bool isNillable);
    // System.Xml.Schema.XmlSchemaParticle GetParticle(System.Xml.Schema.XmlSchemaComplexType ct)
    // Offset: 0x11C8918
    ::System::Xml::Schema::XmlSchemaParticle* GetParticle(::System::Xml::Schema::XmlSchemaComplexType* ct);
    // System.Data.DataColumn FindField(System.Data.DataTable table, System.String field)
    // Offset: 0x11D00B8
    ::System::Data::DataColumn* FindField(::System::Data::DataTable* table, ::StringW field);
    // System.Data.DataColumn[] BuildKey(System.Xml.Schema.XmlSchemaIdentityConstraint keyNode, System.Data.DataTable table)
    // Offset: 0x11D0280
    ::ArrayW<::System::Data::DataColumn*> BuildKey(::System::Xml::Schema::XmlSchemaIdentityConstraint* keyNode, ::System::Data::DataTable* table);
    // System.Boolean GetBooleanAttribute(System.Xml.Schema.XmlSchemaAnnotated element, System.String attrName, System.Boolean defVal)
    // Offset: 0x11C8340
    bool GetBooleanAttribute(::System::Xml::Schema::XmlSchemaAnnotated* element, ::StringW attrName, bool defVal);
    // System.String GetStringAttribute(System.Xml.Schema.XmlSchemaAnnotated element, System.String attrName, System.String defVal)
    // Offset: 0x11CA894
    ::StringW GetStringAttribute(::System::Xml::Schema::XmlSchemaAnnotated* element, ::StringW attrName, ::StringW defVal);
    // static System.Data.AcceptRejectRule TranslateAcceptRejectRule(System.String strRule)
    // Offset: 0x11D0510
    static ::System::Data::AcceptRejectRule TranslateAcceptRejectRule(::StringW strRule);
    // static System.Data.Rule TranslateRule(System.String strRule)
    // Offset: 0x11D0598
    static ::System::Data::Rule TranslateRule(::StringW strRule);
    // System.Void HandleKeyref(System.Xml.Schema.XmlSchemaKeyref keyref)
    // Offset: 0x11D0688
    void HandleKeyref(::System::Xml::Schema::XmlSchemaKeyref* keyref);
    // System.Void HandleConstraint(System.Xml.Schema.XmlSchemaIdentityConstraint keyNode)
    // Offset: 0x11D0F68
    void HandleConstraint(::System::Xml::Schema::XmlSchemaIdentityConstraint* keyNode);
    // System.Data.DataTable InstantiateSimpleTable(System.Xml.Schema.XmlSchemaElement node)
    // Offset: 0x11D13C8
    ::System::Data::DataTable* InstantiateSimpleTable(::System::Xml::Schema::XmlSchemaElement* node);
    // System.String GetInstanceName(System.Xml.Schema.XmlSchemaAnnotated node)
    // Offset: 0x11C6BE4
    ::StringW GetInstanceName(::System::Xml::Schema::XmlSchemaAnnotated* node);
    // System.Data.DataTable InstantiateTable(System.Xml.Schema.XmlSchemaElement node, System.Xml.Schema.XmlSchemaComplexType typeNode, System.Boolean isRef)
    // Offset: 0x11D1ECC
    ::System::Data::DataTable* InstantiateTable(::System::Xml::Schema::XmlSchemaElement* node, ::System::Xml::Schema::XmlSchemaComplexType* typeNode, bool isRef);
    // static public System.Type XsdtoClr(System.String xsdTypeName)
    // Offset: 0x11D3468
    static ::System::Type* XsdtoClr(::StringW xsdTypeName);
    // static private System.Data.XSDSchema/System.Data.NameType FindNameType(System.String name)
    // Offset: 0x11D3568
    static ::System::Data::XSDSchema::NameType* FindNameType(::StringW name);
    // private System.Type ParseDataType(System.String dt)
    // Offset: 0x11D3660
    ::System::Type* ParseDataType(::StringW dt);
    // static System.Boolean IsXsdType(System.String name)
    // Offset: 0x11D37DC
    static bool IsXsdType(::StringW name);
    // System.Xml.Schema.XmlSchemaAnnotated FindTypeNode(System.Xml.Schema.XmlSchemaAnnotated node)
    // Offset: 0x11CA924
    ::System::Xml::Schema::XmlSchemaAnnotated* FindTypeNode(::System::Xml::Schema::XmlSchemaAnnotated* node);
    // System.Void HandleSimpleTypeSimpleContentColumn(System.Xml.Schema.XmlSchemaSimpleType typeNode, System.String strType, System.Data.DataTable table, System.Boolean isBase, System.Xml.XmlAttribute[] attrs, System.Boolean isNillable)
    // Offset: 0x11CF6FC
    void HandleSimpleTypeSimpleContentColumn(::System::Xml::Schema::XmlSchemaSimpleType* typeNode, ::StringW strType, ::System::Data::DataTable* table, bool isBase, ::ArrayW<::System::Xml::XmlAttribute*> attrs, bool isNillable);
    // System.Void HandleSimpleContentColumn(System.String strType, System.Data.DataTable table, System.Boolean isBase, System.Xml.XmlAttribute[] attrs, System.Boolean isNillable)
    // Offset: 0x11CEF40
    void HandleSimpleContentColumn(::StringW strType, ::System::Data::DataTable* table, bool isBase, ::ArrayW<::System::Xml::XmlAttribute*> attrs, bool isNillable);
    // System.Void HandleAttributeColumn(System.Xml.Schema.XmlSchemaAttribute attrib, System.Data.DataTable table, System.Boolean isBase)
    // Offset: 0x11CDBA8
    void HandleAttributeColumn(::System::Xml::Schema::XmlSchemaAttribute* attrib, ::System::Data::DataTable* table, bool isBase);
    // System.Void HandleElementColumn(System.Xml.Schema.XmlSchemaElement elem, System.Data.DataTable table, System.Boolean isBase)
    // Offset: 0x11CCB5C
    void HandleElementColumn(::System::Xml::Schema::XmlSchemaElement* elem, ::System::Data::DataTable* table, bool isBase);
    // System.Void HandleDataSet(System.Xml.Schema.XmlSchemaElement node, System.Boolean isNewDataSet)
    // Offset: 0x11CADD4
    void HandleDataSet(::System::Xml::Schema::XmlSchemaElement* node, bool isNewDataSet);
    // private System.Void AddTablesToList(System.Collections.Generic.List`1<System.Data.DataTable> tableList, System.Data.DataTable dt)
    // Offset: 0x11D3858
    void AddTablesToList(::System::Collections::Generic::List_1<::System::Data::DataTable*>* tableList, ::System::Data::DataTable* dt);
    // private System.String GetPrefix(System.String ns)
    // Offset: 0x11D1AC4
    ::StringW GetPrefix(::StringW ns);
    // private System.String GetNamespaceFromPrefix(System.String prefix)
    // Offset: 0x11D39EC
    ::StringW GetNamespaceFromPrefix(::StringW prefix);
    // private System.String GetTableNamespace(System.Xml.Schema.XmlSchemaIdentityConstraint key)
    // Offset: 0x11D328C
    ::StringW GetTableNamespace(::System::Xml::Schema::XmlSchemaIdentityConstraint* key);
    // private System.String GetTableName(System.Xml.Schema.XmlSchemaIdentityConstraint key)
    // Offset: 0x11D0E3C
    ::StringW GetTableName(::System::Xml::Schema::XmlSchemaIdentityConstraint* key);
    // System.Boolean IsTable(System.Xml.Schema.XmlSchemaElement node)
    // Offset: 0x11C7EBC
    bool IsTable(::System::Xml::Schema::XmlSchemaElement* node);
    // System.Data.DataTable HandleTable(System.Xml.Schema.XmlSchemaElement node)
    // Offset: 0x11CAC48
    ::System::Data::DataTable* HandleTable(::System::Xml::Schema::XmlSchemaElement* node);
    // public System.Void .ctor()
    // Offset: 0x11D3DFC
    // Implemented from: System.Data.XMLSchema
    // Base method: System.Void XMLSchema::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XSDSchema* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XSDSchema::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XSDSchema*, creationType>()));
    }
  }; // System.Data.XSDSchema
  #pragma pack(pop)
  static check_size<sizeof(XSDSchema), 160 + sizeof(bool)> __System_Data_XSDSchemaSizeCheck;
  static_assert(sizeof(XSDSchema) == 0xA1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::XSDSchema::get_FromInference
// Il2CppName: get_FromInference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XSDSchema::*)()>(&System::Data::XSDSchema::get_FromInference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "get_FromInference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::set_FromInference
// Il2CppName: set_FromInference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(bool)>(&System::Data::XSDSchema::set_FromInference)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "set_FromInference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Data::XSDSchema::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::CollectElementsAnnotations
// Il2CppName: CollectElementsAnnotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchema*)>(&System::Data::XSDSchema::CollectElementsAnnotations)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "CollectElementsAnnotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::CollectElementsAnnotations
// Il2CppName: CollectElementsAnnotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchema*, ::System::Collections::ArrayList*)>(&System::Data::XSDSchema::CollectElementsAnnotations)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchema")->byval_arg;
    static auto* schemaList = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "CollectElementsAnnotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, schemaList});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::QualifiedName
// Il2CppName: QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Data::XSDSchema::QualifiedName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::SetProperties
// Il2CppName: SetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::ArrayW<::System::Xml::XmlAttribute*>)>(&System::Data::XSDSchema::SetProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* attrs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "SetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, attrs});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::SetExtProperties
// Il2CppName: SetExtProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::ArrayW<::System::Xml::XmlAttribute*>)>(&System::Data::XSDSchema::SetExtProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* attrs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "SetExtProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, attrs});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleColumnExpression
// Il2CppName: HandleColumnExpression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::Il2CppObject*, ::ArrayW<::System::Xml::XmlAttribute*>)>(&System::Data::XSDSchema::HandleColumnExpression)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* attrs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleColumnExpression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, attrs});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetMsdataAttribute
// Il2CppName: GetMsdataAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Xml::Schema::XmlSchemaAnnotated*, ::StringW)>(&System::Data::XSDSchema::GetMsdataAttribute)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotated")->byval_arg;
    static auto* ln = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetMsdataAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, ln});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::SetExtProperties
// Il2CppName: SetExtProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::System::Xml::XmlAttributeCollection*)>(&System::Data::XSDSchema::SetExtProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* attrs = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttributeCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "SetExtProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, attrs});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleRefTableProperties
// Il2CppName: HandleRefTableProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Collections::ArrayList*, ::System::Xml::Schema::XmlSchemaElement*)>(&System::Data::XSDSchema::HandleRefTableProperties)> {
  static const MethodInfo* get() {
    static auto* RefTables = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleRefTableProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{RefTables, element});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleRelation
// Il2CppName: HandleRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::XmlElement*, bool)>(&System::Data::XSDSchema::HandleRelation)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* fNested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, fNested});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HasAttributes
// Il2CppName: HasAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Data::XSDSchema::HasAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HasAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::IsDatasetParticle
// Il2CppName: IsDatasetParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Data::XSDSchema::IsDatasetParticle)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "IsDatasetParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::DatasetElementCount
// Il2CppName: DatasetElementCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Data::XSDSchema::DatasetElementCount)> {
  static const MethodInfo* get() {
    static auto* elements = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "DatasetElementCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elements});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::FindDatasetElement
// Il2CppName: FindDatasetElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaElement* (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaObjectCollection*)>(&System::Data::XSDSchema::FindDatasetElement)> {
  static const MethodInfo* get() {
    static auto* elements = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "FindDatasetElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elements});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::LoadSchema
// Il2CppName: LoadSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaSet*, ::System::Data::DataTable*)>(&System::Data::XSDSchema::LoadSchema)> {
  static const MethodInfo* get() {
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "LoadSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaSet, dt});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::LoadSchema
// Il2CppName: LoadSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaSet*, ::System::Data::DataSet*)>(&System::Data::XSDSchema::LoadSchema)> {
  static const MethodInfo* get() {
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "LoadSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaSet, ds});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleRelations
// Il2CppName: HandleRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaAnnotation*, bool)>(&System::Data::XSDSchema::HandleRelations)> {
  static const MethodInfo* get() {
    static auto* ann = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotation")->byval_arg;
    static auto* fNested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ann, fNested});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetParticleItems
// Il2CppName: GetParticleItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaObjectCollection* (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaParticle*)>(&System::Data::XSDSchema::GetParticleItems)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetParticleItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleParticle
// Il2CppName: HandleParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaParticle*, ::System::Data::DataTable*, ::System::Collections::ArrayList*, bool)>(&System::Data::XSDSchema::HandleParticle)> {
  static const MethodInfo* get() {
    static auto* pt = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaParticle")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* tableChildren = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* isBase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pt, table, tableChildren, isBase});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleAttributes
// Il2CppName: HandleAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaObjectCollection*, ::System::Data::DataTable*, bool)>(&System::Data::XSDSchema::HandleAttributes)> {
  static const MethodInfo* get() {
    static auto* attributes = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaObjectCollection")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* isBase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes, table, isBase});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleAttributeGroup
// Il2CppName: HandleAttributeGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaAttributeGroup*, ::System::Data::DataTable*, bool)>(&System::Data::XSDSchema::HandleAttributeGroup)> {
  static const MethodInfo* get() {
    static auto* attributeGroup = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttributeGroup")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* isBase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleAttributeGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeGroup, table, isBase});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleComplexType
// Il2CppName: HandleComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaComplexType*, ::System::Data::DataTable*, ::System::Collections::ArrayList*, bool)>(&System::Data::XSDSchema::HandleComplexType)> {
  static const MethodInfo* get() {
    static auto* ct = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* tableChildren = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    static auto* isNillable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ct, table, tableChildren, isNillable});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetParticle
// Il2CppName: GetParticle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaParticle* (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaComplexType*)>(&System::Data::XSDSchema::GetParticle)> {
  static const MethodInfo* get() {
    static auto* ct = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetParticle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ct});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::FindField
// Il2CppName: FindField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataColumn* (System::Data::XSDSchema::*)(::System::Data::DataTable*, ::StringW)>(&System::Data::XSDSchema::FindField)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* field = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "FindField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, field});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::BuildKey
// Il2CppName: BuildKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataColumn*> (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaIdentityConstraint*, ::System::Data::DataTable*)>(&System::Data::XSDSchema::BuildKey)> {
  static const MethodInfo* get() {
    static auto* keyNode = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaIdentityConstraint")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "BuildKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyNode, table});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetBooleanAttribute
// Il2CppName: GetBooleanAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaAnnotated*, ::StringW, bool)>(&System::Data::XSDSchema::GetBooleanAttribute)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotated")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defVal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetBooleanAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, attrName, defVal});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetStringAttribute
// Il2CppName: GetStringAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaAnnotated*, ::StringW, ::StringW)>(&System::Data::XSDSchema::GetStringAttribute)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotated")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defVal = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetStringAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, attrName, defVal});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::TranslateAcceptRejectRule
// Il2CppName: TranslateAcceptRejectRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::AcceptRejectRule (*)(::StringW)>(&System::Data::XSDSchema::TranslateAcceptRejectRule)> {
  static const MethodInfo* get() {
    static auto* strRule = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "TranslateAcceptRejectRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strRule});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::TranslateRule
// Il2CppName: TranslateRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Rule (*)(::StringW)>(&System::Data::XSDSchema::TranslateRule)> {
  static const MethodInfo* get() {
    static auto* strRule = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "TranslateRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strRule});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleKeyref
// Il2CppName: HandleKeyref
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaKeyref*)>(&System::Data::XSDSchema::HandleKeyref)> {
  static const MethodInfo* get() {
    static auto* keyref = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaKeyref")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleKeyref", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyref});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleConstraint
// Il2CppName: HandleConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaIdentityConstraint*)>(&System::Data::XSDSchema::HandleConstraint)> {
  static const MethodInfo* get() {
    static auto* keyNode = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaIdentityConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyNode});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::InstantiateSimpleTable
// Il2CppName: InstantiateSimpleTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Data::XSDSchema::InstantiateSimpleTable)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "InstantiateSimpleTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetInstanceName
// Il2CppName: GetInstanceName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaAnnotated*)>(&System::Data::XSDSchema::GetInstanceName)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotated")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetInstanceName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::InstantiateTable
// Il2CppName: InstantiateTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaElement*, ::System::Xml::Schema::XmlSchemaComplexType*, bool)>(&System::Data::XSDSchema::InstantiateTable)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* typeNode = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaComplexType")->byval_arg;
    static auto* isRef = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "InstantiateTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, typeNode, isRef});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::XsdtoClr
// Il2CppName: XsdtoClr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (*)(::StringW)>(&System::Data::XSDSchema::XsdtoClr)> {
  static const MethodInfo* get() {
    static auto* xsdTypeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "XsdtoClr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xsdTypeName});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::FindNameType
// Il2CppName: FindNameType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::XSDSchema::NameType* (*)(::StringW)>(&System::Data::XSDSchema::FindNameType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "FindNameType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::ParseDataType
// Il2CppName: ParseDataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Data::XSDSchema::*)(::StringW)>(&System::Data::XSDSchema::ParseDataType)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "ParseDataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::IsXsdType
// Il2CppName: IsXsdType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&System::Data::XSDSchema::IsXsdType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "IsXsdType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::FindTypeNode
// Il2CppName: FindTypeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaAnnotated* (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaAnnotated*)>(&System::Data::XSDSchema::FindTypeNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAnnotated")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "FindTypeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleSimpleTypeSimpleContentColumn
// Il2CppName: HandleSimpleTypeSimpleContentColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaSimpleType*, ::StringW, ::System::Data::DataTable*, bool, ::ArrayW<::System::Xml::XmlAttribute*>, bool)>(&System::Data::XSDSchema::HandleSimpleTypeSimpleContentColumn)> {
  static const MethodInfo* get() {
    static auto* typeNode = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    static auto* strType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* isBase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* attrs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute"), 1)->byval_arg;
    static auto* isNillable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleSimpleTypeSimpleContentColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeNode, strType, table, isBase, attrs, isNillable});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleSimpleContentColumn
// Il2CppName: HandleSimpleContentColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::StringW, ::System::Data::DataTable*, bool, ::ArrayW<::System::Xml::XmlAttribute*>, bool)>(&System::Data::XSDSchema::HandleSimpleContentColumn)> {
  static const MethodInfo* get() {
    static auto* strType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* isBase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* attrs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Xml", "XmlAttribute"), 1)->byval_arg;
    static auto* isNillable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleSimpleContentColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strType, table, isBase, attrs, isNillable});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleAttributeColumn
// Il2CppName: HandleAttributeColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaAttribute*, ::System::Data::DataTable*, bool)>(&System::Data::XSDSchema::HandleAttributeColumn)> {
  static const MethodInfo* get() {
    static auto* attrib = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaAttribute")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* isBase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleAttributeColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attrib, table, isBase});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleElementColumn
// Il2CppName: HandleElementColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaElement*, ::System::Data::DataTable*, bool)>(&System::Data::XSDSchema::HandleElementColumn)> {
  static const MethodInfo* get() {
    static auto* elem = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* isBase = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleElementColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{elem, table, isBase});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleDataSet
// Il2CppName: HandleDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaElement*, bool)>(&System::Data::XSDSchema::HandleDataSet)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    static auto* isNewDataSet = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, isNewDataSet});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::AddTablesToList
// Il2CppName: AddTablesToList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XSDSchema::*)(::System::Collections::Generic::List_1<::System::Data::DataTable*>*, ::System::Data::DataTable*)>(&System::Data::XSDSchema::AddTablesToList)> {
  static const MethodInfo* get() {
    static auto* tableList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataTable")})->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "AddTablesToList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableList, dt});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetPrefix
// Il2CppName: GetPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::XSDSchema::*)(::StringW)>(&System::Data::XSDSchema::GetPrefix)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetNamespaceFromPrefix
// Il2CppName: GetNamespaceFromPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::XSDSchema::*)(::StringW)>(&System::Data::XSDSchema::GetNamespaceFromPrefix)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetNamespaceFromPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetTableNamespace
// Il2CppName: GetTableNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaIdentityConstraint*)>(&System::Data::XSDSchema::GetTableNamespace)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaIdentityConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetTableNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::GetTableName
// Il2CppName: GetTableName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaIdentityConstraint*)>(&System::Data::XSDSchema::GetTableName)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaIdentityConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "GetTableName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::IsTable
// Il2CppName: IsTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Data::XSDSchema::IsTable)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "IsTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::HandleTable
// Il2CppName: HandleTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::XSDSchema::*)(::System::Xml::Schema::XmlSchemaElement*)>(&System::Data::XSDSchema::HandleTable)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XSDSchema*), "HandleTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Data::XSDSchema::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
