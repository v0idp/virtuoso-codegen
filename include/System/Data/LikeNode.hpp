// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.BinaryNode
#include "System/Data/BinaryNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
  // Skipping declaration: ExpressionNode because it is already included!
  // Forward declaring type: DataRow
  class DataRow;
  // Forward declaring type: DataRowVersion
  struct DataRowVersion;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: LikeNode
  class LikeNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::LikeNode);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::LikeNode*, "System.Data", "LikeNode");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.LikeNode
  // [TokenAttribute] Offset: FFFFFFFF
  class LikeNode : public ::System::Data::BinaryNode {
    public:
    public:
    // private System.Int32 _kind
    // Size: 0x4
    // Offset: 0x30
    int kind;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: kind and: pattern
    char __padding0[0x4] = {};
    // private System.String _pattern
    // Size: 0x8
    // Offset: 0x38
    ::StringW pattern;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _kind
    [[deprecated("Use field access instead!")]] int& dyn__kind();
    // Get instance field reference: private System.String _pattern
    [[deprecated("Use field access instead!")]] ::StringW& dyn__pattern();
    // System.String AnalyzePattern(System.String pat)
    // Offset: 0x13B734C
    ::StringW AnalyzePattern(::StringW pat);
    // System.Void .ctor(System.Data.DataTable table, System.Int32 op, System.Data.ExpressionNode left, System.Data.ExpressionNode right)
    // Offset: 0x13B6D8C
    // Implemented from: System.Data.BinaryNode
    // Base method: System.Void BinaryNode::.ctor(System.Data.DataTable table, System.Int32 op, System.Data.ExpressionNode left, System.Data.ExpressionNode right)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LikeNode* New_ctor(::System::Data::DataTable* table, int op, ::System::Data::ExpressionNode* left, ::System::Data::ExpressionNode* right) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::LikeNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LikeNode*, creationType>(table, op, left, right)));
    }
    // override System.Object Eval(System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0x13B6D94
    // Implemented from: System.Data.BinaryNode
    // Base method: System.Object BinaryNode::Eval(System.Data.DataRow row, System.Data.DataRowVersion version)
    ::Il2CppObject* Eval(::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
  }; // System.Data.LikeNode
  #pragma pack(pop)
  static check_size<sizeof(LikeNode), 56 + sizeof(::StringW)> __System_Data_LikeNodeSizeCheck;
  static_assert(sizeof(LikeNode) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::LikeNode::AnalyzePattern
// Il2CppName: AnalyzePattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::LikeNode::*)(::StringW)>(&System::Data::LikeNode::AnalyzePattern)> {
  static const MethodInfo* get() {
    static auto* pat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::LikeNode*), "AnalyzePattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pat});
  }
};
// Writing MetadataGetter for method: System::Data::LikeNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::LikeNode::Eval
// Il2CppName: Eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::LikeNode::*)(::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::LikeNode::Eval)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::LikeNode*), "Eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, version});
  }
};
