// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: TypeCode
  struct TypeCode;
}
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataColumn
  class DataColumn;
  // Forward declaring type: UniqueConstraint
  class UniqueConstraint;
  // Forward declaring type: ForeignKeyConstraint
  class ForeignKeyConstraint;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: Constraint
  class Constraint;
  // Forward declaring type: DataSetDateTime
  struct DataSetDateTime;
  // Forward declaring type: DataRowState
  struct DataRowState;
  // Forward declaring type: SerializationFormat
  struct SerializationFormat;
  // Forward declaring type: AggregateType
  struct AggregateType;
  // Forward declaring type: RBTreeError
  struct RBTreeError;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: ExceptionBuilder
  class ExceptionBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::ExceptionBuilder);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::ExceptionBuilder*, "System.Data", "ExceptionBuilder");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.ExceptionBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class ExceptionBuilder : public ::Il2CppObject {
    public:
    // static private System.Void TraceException(System.String trace, System.Exception e)
    // Offset: 0x12ED6E0
    static void TraceException(::StringW trace, ::System::Exception* e);
    // static System.Exception TraceExceptionAsReturnValue(System.Exception e)
    // Offset: 0x12ED790
    static ::System::Exception* TraceExceptionAsReturnValue(::System::Exception* e);
    // static System.Exception TraceExceptionForCapture(System.Exception e)
    // Offset: 0x12ED7E4
    static ::System::Exception* TraceExceptionForCapture(::System::Exception* e);
    // static System.Exception TraceExceptionWithoutRethrow(System.Exception e)
    // Offset: 0x12E605C
    static ::System::Exception* TraceExceptionWithoutRethrow(::System::Exception* e);
    // static System.Exception _Argument(System.String error)
    // Offset: 0x12ED838
    static ::System::Exception* _Argument(::StringW error);
    // static System.Exception _Argument(System.String error, System.Exception innerException)
    // Offset: 0x12ED898
    static ::System::Exception* _Argument(::StringW error, ::System::Exception* innerException);
    // static private System.Exception _ArgumentNull(System.String paramName, System.String msg)
    // Offset: 0x12ED908
    static ::System::Exception* _ArgumentNull(::StringW paramName, ::StringW msg);
    // static System.Exception _ArgumentOutOfRange(System.String paramName, System.String msg)
    // Offset: 0x12ED978
    static ::System::Exception* _ArgumentOutOfRange(::StringW paramName, ::StringW msg);
    // static private System.Exception _IndexOutOfRange(System.String error)
    // Offset: 0x12ED9E8
    static ::System::Exception* _IndexOutOfRange(::StringW error);
    // static private System.Exception _InvalidOperation(System.String error)
    // Offset: 0x12EDA48
    static ::System::Exception* _InvalidOperation(::StringW error);
    // static private System.Exception _InvalidEnumArgumentException(System.String error)
    // Offset: 0x12EDAA8
    static ::System::Exception* _InvalidEnumArgumentException(::StringW error);
    // static private System.Exception _InvalidEnumArgumentException(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::System::Exception* _InvalidEnumArgumentException(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::ExceptionBuilder::_InvalidEnumArgumentException");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Data", "ExceptionBuilder", "_InvalidEnumArgumentException", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Exception*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value);
    }
    // static private System.Void ThrowDataException(System.String error, System.Exception innerException)
    // Offset: 0x12EDB08
    static void ThrowDataException(::StringW error, ::System::Exception* innerException);
    // static private System.Exception _Data(System.String error)
    // Offset: 0x12EDB64
    static ::System::Exception* _Data(::StringW error);
    // static private System.Exception _Constraint(System.String error)
    // Offset: 0x12EDBC4
    static ::System::Exception* _Constraint(::StringW error);
    // static private System.Exception _InvalidConstraint(System.String error)
    // Offset: 0x12EDC24
    static ::System::Exception* _InvalidConstraint(::StringW error);
    // static private System.Exception _DeletedRowInaccessible(System.String error)
    // Offset: 0x12EDC84
    static ::System::Exception* _DeletedRowInaccessible(::StringW error);
    // static private System.Exception _DuplicateName(System.String error)
    // Offset: 0x12EDCF0
    static ::System::Exception* _DuplicateName(::StringW error);
    // static private System.Exception _InRowChangingEvent(System.String error)
    // Offset: 0x12EDD5C
    static ::System::Exception* _InRowChangingEvent(::StringW error);
    // static private System.Exception _NoNullAllowed(System.String error)
    // Offset: 0x12EDDBC
    static ::System::Exception* _NoNullAllowed(::StringW error);
    // static private System.Exception _ReadOnly(System.String error)
    // Offset: 0x12EDE1C
    static ::System::Exception* _ReadOnly(::StringW error);
    // static private System.Exception _RowNotInTable(System.String error)
    // Offset: 0x12EDE7C
    static ::System::Exception* _RowNotInTable(::StringW error);
    // static private System.Exception _VersionNotFound(System.String error)
    // Offset: 0x12EDEDC
    static ::System::Exception* _VersionNotFound(::StringW error);
    // static public System.Exception ArgumentNull(System.String paramName)
    // Offset: 0x12E0BD4
    static ::System::Exception* ArgumentNull(::StringW paramName);
    // static public System.Exception ArgumentOutOfRange(System.String paramName)
    // Offset: 0x12EDF3C
    static ::System::Exception* ArgumentOutOfRange(::StringW paramName);
    // static public System.Exception BadObjectPropertyAccess(System.String error)
    // Offset: 0x12EDF98
    static ::System::Exception* BadObjectPropertyAccess(::StringW error);
    // static public System.Exception CaseInsensitiveNameConflict(System.String name)
    // Offset: 0x12E0A28
    static ::System::Exception* CaseInsensitiveNameConflict(::StringW name);
    // static public System.Exception NamespaceNameConflict(System.String name)
    // Offset: 0x12E0A7C
    static ::System::Exception* NamespaceNameConflict(::StringW name);
    // static public System.Exception InvalidOffsetLength()
    // Offset: 0x12EDFEC
    static ::System::Exception* InvalidOffsetLength();
    // static public System.Exception ColumnNotInTheTable(System.String column, System.String table)
    // Offset: 0x12EE030
    static ::System::Exception* ColumnNotInTheTable(::StringW column, ::StringW table);
    // static public System.Exception ColumnNotInAnyTable()
    // Offset: 0x12EE094
    static ::System::Exception* ColumnNotInAnyTable();
    // static public System.Exception ColumnOutOfRange(System.Int32 index)
    // Offset: 0x12EE0D8
    static ::System::Exception* ColumnOutOfRange(int index);
    // static public System.Exception ColumnOutOfRange(System.String column)
    // Offset: 0x12EE178
    static ::System::Exception* ColumnOutOfRange(::StringW column);
    // static public System.Exception CannotAddColumn1(System.String column)
    // Offset: 0x12EE1CC
    static ::System::Exception* CannotAddColumn1(::StringW column);
    // static public System.Exception CannotAddColumn2(System.String column)
    // Offset: 0x12EE220
    static ::System::Exception* CannotAddColumn2(::StringW column);
    // static public System.Exception CannotAddColumn3()
    // Offset: 0x12EE274
    static ::System::Exception* CannotAddColumn3();
    // static public System.Exception CannotAddColumn4(System.String column)
    // Offset: 0x12EE2B8
    static ::System::Exception* CannotAddColumn4(::StringW column);
    // static public System.Exception CannotAddDuplicate(System.String column)
    // Offset: 0x12EE30C
    static ::System::Exception* CannotAddDuplicate(::StringW column);
    // static public System.Exception CannotAddDuplicate2(System.String table)
    // Offset: 0x12EE360
    static ::System::Exception* CannotAddDuplicate2(::StringW table);
    // static public System.Exception CannotAddDuplicate3(System.String table)
    // Offset: 0x12EE3B4
    static ::System::Exception* CannotAddDuplicate3(::StringW table);
    // static public System.Exception CannotRemoveColumn()
    // Offset: 0x12EE408
    static ::System::Exception* CannotRemoveColumn();
    // static public System.Exception CannotRemovePrimaryKey()
    // Offset: 0x12EE44C
    static ::System::Exception* CannotRemovePrimaryKey();
    // static public System.Exception CannotRemoveChildKey(System.String relation)
    // Offset: 0x12EE490
    static ::System::Exception* CannotRemoveChildKey(::StringW relation);
    // static public System.Exception CannotRemoveConstraint(System.String constraint, System.String table)
    // Offset: 0x12EE4E4
    static ::System::Exception* CannotRemoveConstraint(::StringW constraint, ::StringW table);
    // static public System.Exception CannotRemoveExpression(System.String column, System.String expression)
    // Offset: 0x12EE548
    static ::System::Exception* CannotRemoveExpression(::StringW column, ::StringW expression);
    // static public System.Exception AddPrimaryKeyConstraint()
    // Offset: 0x12EE5AC
    static ::System::Exception* AddPrimaryKeyConstraint();
    // static public System.Exception NoConstraintName()
    // Offset: 0x12EE5F0
    static ::System::Exception* NoConstraintName();
    // static public System.Exception ConstraintViolation(System.String constraint)
    // Offset: 0x12EE634
    static ::System::Exception* ConstraintViolation(::StringW constraint);
    // static public System.String KeysToString(System.Object[] keys)
    // Offset: 0x12EE688
    static ::StringW KeysToString(::ArrayW<::Il2CppObject*> keys);
    // static public System.String UniqueConstraintViolationText(System.Data.DataColumn[] columns, System.Object[] values)
    // Offset: 0x12EE7CC
    static ::StringW UniqueConstraintViolationText(::ArrayW<::System::Data::DataColumn*> columns, ::ArrayW<::Il2CppObject*> values);
    // static public System.Exception ConstraintViolation(System.Data.DataColumn[] columns, System.Object[] values)
    // Offset: 0x12EE958
    static ::System::Exception* ConstraintViolation(::ArrayW<::System::Data::DataColumn*> columns, ::ArrayW<::Il2CppObject*> values);
    // static public System.Exception ConstraintOutOfRange(System.Int32 index)
    // Offset: 0x12EE96C
    static ::System::Exception* ConstraintOutOfRange(int index);
    // static public System.Exception DuplicateConstraint(System.String constraint)
    // Offset: 0x12EEA0C
    static ::System::Exception* DuplicateConstraint(::StringW constraint);
    // static public System.Exception DuplicateConstraintName(System.String constraint)
    // Offset: 0x12EEA60
    static ::System::Exception* DuplicateConstraintName(::StringW constraint);
    // static public System.Exception NeededForForeignKeyConstraint(System.Data.UniqueConstraint key, System.Data.ForeignKeyConstraint fk)
    // Offset: 0x12EEAB4
    static ::System::Exception* NeededForForeignKeyConstraint(::System::Data::UniqueConstraint* key, ::System::Data::ForeignKeyConstraint* fk);
    // static public System.Exception UniqueConstraintViolation()
    // Offset: 0x12EEB4C
    static ::System::Exception* UniqueConstraintViolation();
    // static public System.Exception ConstraintForeignTable()
    // Offset: 0x12EEB90
    static ::System::Exception* ConstraintForeignTable();
    // static public System.Exception ConstraintParentValues()
    // Offset: 0x12EEBD4
    static ::System::Exception* ConstraintParentValues();
    // static public System.Exception ConstraintAddFailed(System.Data.DataTable table)
    // Offset: 0x12EEC18
    static ::System::Exception* ConstraintAddFailed(::System::Data::DataTable* table);
    // static public System.Exception ConstraintRemoveFailed()
    // Offset: 0x12EEC74
    static ::System::Exception* ConstraintRemoveFailed();
    // static public System.Exception FailedCascadeDelete(System.String constraint)
    // Offset: 0x12EECB8
    static ::System::Exception* FailedCascadeDelete(::StringW constraint);
    // static public System.Exception FailedCascadeUpdate(System.String constraint)
    // Offset: 0x12EED0C
    static ::System::Exception* FailedCascadeUpdate(::StringW constraint);
    // static public System.Exception FailedClearParentTable(System.String table, System.String constraint, System.String childTable)
    // Offset: 0x12EED60
    static ::System::Exception* FailedClearParentTable(::StringW table, ::StringW constraint, ::StringW childTable);
    // static public System.Exception ForeignKeyViolation(System.String constraint, System.Object[] keys)
    // Offset: 0x12EEDCC
    static ::System::Exception* ForeignKeyViolation(::StringW constraint, ::ArrayW<::Il2CppObject*> keys);
    // static public System.Exception RemoveParentRow(System.Data.ForeignKeyConstraint constraint)
    // Offset: 0x12EEE3C
    static ::System::Exception* RemoveParentRow(::System::Data::ForeignKeyConstraint* constraint);
    // static public System.String MaxLengthViolationText(System.String columnName)
    // Offset: 0x12EEEAC
    static ::StringW MaxLengthViolationText(::StringW columnName);
    // static public System.String NotAllowDBNullViolationText(System.String columnName)
    // Offset: 0x12EEEFC
    static ::StringW NotAllowDBNullViolationText(::StringW columnName);
    // static public System.Exception CantAddConstraintToMultipleNestedTable(System.String tableName)
    // Offset: 0x12EEF4C
    static ::System::Exception* CantAddConstraintToMultipleNestedTable(::StringW tableName);
    // static public System.Exception AutoIncrementAndExpression()
    // Offset: 0x12EEFA0
    static ::System::Exception* AutoIncrementAndExpression();
    // static public System.Exception AutoIncrementAndDefaultValue()
    // Offset: 0x12EEFE4
    static ::System::Exception* AutoIncrementAndDefaultValue();
    // static public System.Exception AutoIncrementSeed()
    // Offset: 0x12EF028
    static ::System::Exception* AutoIncrementSeed();
    // static public System.Exception CantChangeDataType()
    // Offset: 0x12EF06C
    static ::System::Exception* CantChangeDataType();
    // static public System.Exception NullDataType()
    // Offset: 0x12EF0B0
    static ::System::Exception* NullDataType();
    // static public System.Exception ColumnNameRequired()
    // Offset: 0x12EF0F4
    static ::System::Exception* ColumnNameRequired();
    // static public System.Exception DefaultValueAndAutoIncrement()
    // Offset: 0x12EF138
    static ::System::Exception* DefaultValueAndAutoIncrement();
    // static public System.Exception DefaultValueDataType(System.String column, System.Type defaultType, System.Type columnType, System.Exception inner)
    // Offset: 0x12EF17C
    static ::System::Exception* DefaultValueDataType(::StringW column, ::System::Type* defaultType, ::System::Type* columnType, ::System::Exception* inner);
    // static public System.Exception DefaultValueColumnDataType(System.String column, System.Type defaultType, System.Type columnType, System.Exception inner)
    // Offset: 0x12EF268
    static ::System::Exception* DefaultValueColumnDataType(::StringW column, ::System::Type* defaultType, ::System::Type* columnType, ::System::Exception* inner);
    // static public System.Exception ExpressionAndUnique()
    // Offset: 0x12EF320
    static ::System::Exception* ExpressionAndUnique();
    // static public System.Exception ExpressionAndReadOnly()
    // Offset: 0x12EF364
    static ::System::Exception* ExpressionAndReadOnly();
    // static public System.Exception ExpressionAndConstraint(System.Data.DataColumn column, System.Data.Constraint constraint)
    // Offset: 0x12EF3A8
    static ::System::Exception* ExpressionAndConstraint(::System::Data::DataColumn* column, ::System::Data::Constraint* constraint);
    // static public System.Exception ExpressionInConstraint(System.Data.DataColumn column)
    // Offset: 0x12EF430
    static ::System::Exception* ExpressionInConstraint(::System::Data::DataColumn* column);
    // static public System.Exception ExpressionCircular()
    // Offset: 0x12EF48C
    static ::System::Exception* ExpressionCircular();
    // static public System.Exception NonUniqueValues(System.String column)
    // Offset: 0x12EF4D0
    static ::System::Exception* NonUniqueValues(::StringW column);
    // static public System.Exception NullKeyValues(System.String column)
    // Offset: 0x12EF524
    static ::System::Exception* NullKeyValues(::StringW column);
    // static public System.Exception NullValues(System.String column)
    // Offset: 0x12EF578
    static ::System::Exception* NullValues(::StringW column);
    // static public System.Exception ReadOnlyAndExpression()
    // Offset: 0x12EF5CC
    static ::System::Exception* ReadOnlyAndExpression();
    // static public System.Exception ReadOnly(System.String column)
    // Offset: 0x12EF610
    static ::System::Exception* ReadOnly(::StringW column);
    // static public System.Exception UniqueAndExpression()
    // Offset: 0x12EF664
    static ::System::Exception* UniqueAndExpression();
    // static public System.Exception SetFailed(System.Object value, System.Data.DataColumn column, System.Type type, System.Exception innerException)
    // Offset: 0x12EF6A8
    static ::System::Exception* SetFailed(::Il2CppObject* value, ::System::Data::DataColumn* column, ::System::Type* type, ::System::Exception* innerException);
    // static public System.Exception CannotSetToNull(System.Data.DataColumn column)
    // Offset: 0x12EF788
    static ::System::Exception* CannotSetToNull(::System::Data::DataColumn* column);
    // static public System.Exception LongerThanMaxLength(System.Data.DataColumn column)
    // Offset: 0x12EF7E4
    static ::System::Exception* LongerThanMaxLength(::System::Data::DataColumn* column);
    // static public System.Exception CannotSetMaxLength(System.Data.DataColumn column, System.Int32 value)
    // Offset: 0x12EF840
    static ::System::Exception* CannotSetMaxLength(::System::Data::DataColumn* column, int value);
    // static public System.Exception CannotSetMaxLength2(System.Data.DataColumn column)
    // Offset: 0x12EF8FC
    static ::System::Exception* CannotSetMaxLength2(::System::Data::DataColumn* column);
    // static public System.Exception CannotSetSimpleContentType(System.String columnName, System.Type type)
    // Offset: 0x12EF958
    static ::System::Exception* CannotSetSimpleContentType(::StringW columnName, ::System::Type* type);
    // static public System.Exception CannotSetSimpleContent(System.String columnName, System.Type type)
    // Offset: 0x12EF9BC
    static ::System::Exception* CannotSetSimpleContent(::StringW columnName, ::System::Type* type);
    // static public System.Exception CannotChangeNamespace(System.String columnName)
    // Offset: 0x12EFA20
    static ::System::Exception* CannotChangeNamespace(::StringW columnName);
    // static public System.Exception HasToBeStringType(System.Data.DataColumn column)
    // Offset: 0x12EFA74
    static ::System::Exception* HasToBeStringType(::System::Data::DataColumn* column);
    // static public System.Exception AutoIncrementCannotSetIfHasData(System.String typeName)
    // Offset: 0x12EFAD0
    static ::System::Exception* AutoIncrementCannotSetIfHasData(::StringW typeName);
    // static public System.Exception INullableUDTwithoutStaticNull(System.String typeName)
    // Offset: 0x12EFB24
    static ::System::Exception* INullableUDTwithoutStaticNull(::StringW typeName);
    // static public System.Exception IComparableNotImplemented(System.String typeName)
    // Offset: 0x12EFB78
    static ::System::Exception* IComparableNotImplemented(::StringW typeName);
    // static public System.Exception UDTImplementsIChangeTrackingButnotIRevertible(System.String typeName)
    // Offset: 0x12EFBCC
    static ::System::Exception* UDTImplementsIChangeTrackingButnotIRevertible(::StringW typeName);
    // static public System.Exception InvalidDataColumnMapping(System.Type type)
    // Offset: 0x12EFC20
    static ::System::Exception* InvalidDataColumnMapping(::System::Type* type);
    // static public System.Exception CannotSetDateTimeModeForNonDateTimeColumns()
    // Offset: 0x12EFC94
    static ::System::Exception* CannotSetDateTimeModeForNonDateTimeColumns();
    // static public System.Exception InvalidDateTimeMode(System.Data.DataSetDateTime mode)
    // Offset: 0x12EA0C0
    static ::System::Exception* InvalidDateTimeMode(::System::Data::DataSetDateTime mode);
    // static public System.Exception CantChangeDateTimeMode(System.Data.DataSetDateTime oldValue, System.Data.DataSetDateTime newValue)
    // Offset: 0x12EFCD8
    static ::System::Exception* CantChangeDateTimeMode(::System::Data::DataSetDateTime oldValue, ::System::Data::DataSetDateTime newValue);
    // static public System.Exception ColumnTypeNotSupported()
    // Offset: 0x12EFDBC
    static ::System::Exception* ColumnTypeNotSupported();
    // static public System.Exception SetFailed(System.String name)
    // Offset: 0x12EFE30
    static ::System::Exception* SetFailed(::StringW name);
    // static public System.Exception CanNotUse()
    // Offset: 0x12E6328
    static ::System::Exception* CanNotUse();
    // static public System.Exception SetIListObject()
    // Offset: 0x12E42A4
    static ::System::Exception* SetIListObject();
    // static public System.Exception AddNewNotAllowNull()
    // Offset: 0x12E46F8
    static ::System::Exception* AddNewNotAllowNull();
    // static public System.Exception NotOpen()
    // Offset: 0x12E4810
    static ::System::Exception* NotOpen();
    // static public System.Exception CreateChildView()
    // Offset: 0x12EFE84
    static ::System::Exception* CreateChildView();
    // static public System.Exception CanNotDelete()
    // Offset: 0x12E4FAC
    static ::System::Exception* CanNotDelete();
    // static public System.Exception GetElementIndex(System.Int32 index)
    // Offset: 0x12E5684
    static ::System::Exception* GetElementIndex(int index);
    // static public System.Exception AddExternalObject()
    // Offset: 0x12E5114
    static ::System::Exception* AddExternalObject();
    // static public System.Exception CanNotClear()
    // Offset: 0x12E5184
    static ::System::Exception* CanNotClear();
    // static public System.Exception InsertExternalObject()
    // Offset: 0x12E5374
    static ::System::Exception* InsertExternalObject();
    // static public System.Exception RemoveExternalObject()
    // Offset: 0x12E54E8
    static ::System::Exception* RemoveExternalObject();
    // static public System.Exception KeyTableMismatch()
    // Offset: 0x12EFEC8
    static ::System::Exception* KeyTableMismatch();
    // static public System.Exception KeyNoColumns()
    // Offset: 0x12EFF0C
    static ::System::Exception* KeyNoColumns();
    // static public System.Exception KeyTooManyColumns(System.Int32 cols)
    // Offset: 0x12EFF50
    static ::System::Exception* KeyTooManyColumns(int cols);
    // static public System.Exception KeyDuplicateColumns(System.String columnName)
    // Offset: 0x12EFFF0
    static ::System::Exception* KeyDuplicateColumns(::StringW columnName);
    // static public System.Exception RelationDataSetMismatch()
    // Offset: 0x12F0044
    static ::System::Exception* RelationDataSetMismatch();
    // static public System.Exception ColumnsTypeMismatch()
    // Offset: 0x12F0088
    static ::System::Exception* ColumnsTypeMismatch();
    // static public System.Exception KeyLengthMismatch()
    // Offset: 0x12F00CC
    static ::System::Exception* KeyLengthMismatch();
    // static public System.Exception KeyLengthZero()
    // Offset: 0x12F0110
    static ::System::Exception* KeyLengthZero();
    // static public System.Exception ForeignRelation()
    // Offset: 0x12F0154
    static ::System::Exception* ForeignRelation();
    // static public System.Exception KeyColumnsIdentical()
    // Offset: 0x12F0198
    static ::System::Exception* KeyColumnsIdentical();
    // static public System.Exception RelationForeignTable(System.String t1, System.String t2)
    // Offset: 0x12F01DC
    static ::System::Exception* RelationForeignTable(::StringW t1, ::StringW t2);
    // static public System.Exception GetParentRowTableMismatch(System.String t1, System.String t2)
    // Offset: 0x12F0240
    static ::System::Exception* GetParentRowTableMismatch(::StringW t1, ::StringW t2);
    // static public System.Exception SetParentRowTableMismatch(System.String t1, System.String t2)
    // Offset: 0x12F02A4
    static ::System::Exception* SetParentRowTableMismatch(::StringW t1, ::StringW t2);
    // static public System.Exception RelationForeignRow()
    // Offset: 0x12F0308
    static ::System::Exception* RelationForeignRow();
    // static public System.Exception RelationNestedReadOnly()
    // Offset: 0x12F034C
    static ::System::Exception* RelationNestedReadOnly();
    // static public System.Exception TableCantBeNestedInTwoTables(System.String tableName)
    // Offset: 0x12F0390
    static ::System::Exception* TableCantBeNestedInTwoTables(::StringW tableName);
    // static public System.Exception LoopInNestedRelations(System.String tableName)
    // Offset: 0x12F03E4
    static ::System::Exception* LoopInNestedRelations(::StringW tableName);
    // static public System.Exception RelationDoesNotExist()
    // Offset: 0x12F0438
    static ::System::Exception* RelationDoesNotExist();
    // static public System.Exception ParentOrChildColumnsDoNotHaveDataSet()
    // Offset: 0x12F047C
    static ::System::Exception* ParentOrChildColumnsDoNotHaveDataSet();
    // static public System.Exception InValidNestedRelation(System.String childTableName)
    // Offset: 0x12F04C0
    static ::System::Exception* InValidNestedRelation(::StringW childTableName);
    // static public System.Exception InvalidParentNamespaceinNestedRelation(System.String childTableName)
    // Offset: 0x12F0514
    static ::System::Exception* InvalidParentNamespaceinNestedRelation(::StringW childTableName);
    // static public System.Exception RowNotInTheDataSet()
    // Offset: 0x12F0568
    static ::System::Exception* RowNotInTheDataSet();
    // static public System.Exception RowNotInTheTable()
    // Offset: 0x12F05AC
    static ::System::Exception* RowNotInTheTable();
    // static public System.Exception EditInRowChanging()
    // Offset: 0x12F05F0
    static ::System::Exception* EditInRowChanging();
    // static public System.Exception EndEditInRowChanging()
    // Offset: 0x12F0634
    static ::System::Exception* EndEditInRowChanging();
    // static public System.Exception BeginEditInRowChanging()
    // Offset: 0x12F0678
    static ::System::Exception* BeginEditInRowChanging();
    // static public System.Exception CancelEditInRowChanging()
    // Offset: 0x12F06BC
    static ::System::Exception* CancelEditInRowChanging();
    // static public System.Exception DeleteInRowDeleting()
    // Offset: 0x12F0700
    static ::System::Exception* DeleteInRowDeleting();
    // static public System.Exception ValueArrayLength()
    // Offset: 0x12F0744
    static ::System::Exception* ValueArrayLength();
    // static public System.Exception NoCurrentData()
    // Offset: 0x12F0788
    static ::System::Exception* NoCurrentData();
    // static public System.Exception NoOriginalData()
    // Offset: 0x12F07CC
    static ::System::Exception* NoOriginalData();
    // static public System.Exception NoProposedData()
    // Offset: 0x12F0810
    static ::System::Exception* NoProposedData();
    // static public System.Exception RowRemovedFromTheTable()
    // Offset: 0x12F0854
    static ::System::Exception* RowRemovedFromTheTable();
    // static public System.Exception DeletedRowInaccessible()
    // Offset: 0x12F0898
    static ::System::Exception* DeletedRowInaccessible();
    // static public System.Exception RowAlreadyDeleted()
    // Offset: 0x12F08DC
    static ::System::Exception* RowAlreadyDeleted();
    // static public System.Exception RowEmpty()
    // Offset: 0x12F0920
    static ::System::Exception* RowEmpty();
    // static public System.Exception InvalidRowVersion()
    // Offset: 0x12F0964
    static ::System::Exception* InvalidRowVersion();
    // static public System.Exception RowOutOfRange(System.Int32 index)
    // Offset: 0x12E55E4
    static ::System::Exception* RowOutOfRange(int index);
    // static public System.Exception RowInsertTwice(System.Int32 index, System.String tableName)
    // Offset: 0x12F09A8
    static ::System::Exception* RowInsertTwice(int index, ::StringW tableName);
    // static public System.Exception RowInsertMissing(System.String tableName)
    // Offset: 0x12F0A58
    static ::System::Exception* RowInsertMissing(::StringW tableName);
    // static public System.Exception RowAlreadyRemoved()
    // Offset: 0x12F0AAC
    static ::System::Exception* RowAlreadyRemoved();
    // static public System.Exception MultipleParents()
    // Offset: 0x12F0AF0
    static ::System::Exception* MultipleParents();
    // static public System.Exception InvalidRowState(System.Data.DataRowState state)
    // Offset: 0x12F0B34
    static ::System::Exception* InvalidRowState(::System::Data::DataRowState state);
    // static public System.Exception InvalidRowBitPattern()
    // Offset: 0x12F0B80
    static ::System::Exception* InvalidRowBitPattern();
    // static System.Exception SetDataSetNameToEmpty()
    // Offset: 0x12F0BC4
    static ::System::Exception* SetDataSetNameToEmpty();
    // static System.Exception SetDataSetNameConflicting(System.String name)
    // Offset: 0x12F0C08
    static ::System::Exception* SetDataSetNameConflicting(::StringW name);
    // static public System.Exception DataSetUnsupportedSchema(System.String ns)
    // Offset: 0x12F0C5C
    static ::System::Exception* DataSetUnsupportedSchema(::StringW ns);
    // static public System.Exception MergeMissingDefinition(System.String obj)
    // Offset: 0x12F0CB0
    static ::System::Exception* MergeMissingDefinition(::StringW obj);
    // static public System.Exception TablesInDifferentSets()
    // Offset: 0x12F0D04
    static ::System::Exception* TablesInDifferentSets();
    // static public System.Exception RelationAlreadyExists()
    // Offset: 0x12F0D48
    static ::System::Exception* RelationAlreadyExists();
    // static public System.Exception RowAlreadyInOtherCollection()
    // Offset: 0x12F0D8C
    static ::System::Exception* RowAlreadyInOtherCollection();
    // static public System.Exception RowAlreadyInTheCollection()
    // Offset: 0x12F0DD0
    static ::System::Exception* RowAlreadyInTheCollection();
    // static public System.Exception RecordStateRange()
    // Offset: 0x12F0E14
    static ::System::Exception* RecordStateRange();
    // static public System.Exception IndexKeyLength(System.Int32 length, System.Int32 keyLength)
    // Offset: 0x12F0E58
    static ::System::Exception* IndexKeyLength(int length, int keyLength);
    // static public System.Exception RemovePrimaryKey(System.Data.DataTable table)
    // Offset: 0x12F0F50
    static ::System::Exception* RemovePrimaryKey(::System::Data::DataTable* table);
    // static public System.Exception RelationAlreadyInOtherDataSet()
    // Offset: 0x12F0FD4
    static ::System::Exception* RelationAlreadyInOtherDataSet();
    // static public System.Exception RelationAlreadyInTheDataSet()
    // Offset: 0x12F1018
    static ::System::Exception* RelationAlreadyInTheDataSet();
    // static public System.Exception RelationNotInTheDataSet(System.String relation)
    // Offset: 0x12F105C
    static ::System::Exception* RelationNotInTheDataSet(::StringW relation);
    // static public System.Exception RelationOutOfRange(System.Object index)
    // Offset: 0x12F10B0
    static ::System::Exception* RelationOutOfRange(::Il2CppObject* index);
    // static public System.Exception DuplicateRelation(System.String relation)
    // Offset: 0x12F1144
    static ::System::Exception* DuplicateRelation(::StringW relation);
    // static public System.Exception RelationTableNull()
    // Offset: 0x12F1198
    static ::System::Exception* RelationTableNull();
    // static public System.Exception RelationDataSetNull()
    // Offset: 0x12F11DC
    static ::System::Exception* RelationDataSetNull();
    // static public System.Exception RelationTableWasRemoved()
    // Offset: 0x12F1220
    static ::System::Exception* RelationTableWasRemoved();
    // static public System.Exception ParentTableMismatch()
    // Offset: 0x12F1264
    static ::System::Exception* ParentTableMismatch();
    // static public System.Exception ChildTableMismatch()
    // Offset: 0x12F12A8
    static ::System::Exception* ChildTableMismatch();
    // static public System.Exception EnforceConstraint()
    // Offset: 0x12F12EC
    static ::System::Exception* EnforceConstraint();
    // static public System.Exception CaseLocaleMismatch()
    // Offset: 0x12F1330
    static ::System::Exception* CaseLocaleMismatch();
    // static public System.Exception CannotChangeCaseLocale()
    // Offset: 0x12F1374
    static ::System::Exception* CannotChangeCaseLocale();
    // static public System.Exception CannotChangeCaseLocale(System.Exception innerException)
    // Offset: 0x12F137C
    static ::System::Exception* CannotChangeCaseLocale(::System::Exception* innerException);
    // static public System.Exception InvalidRemotingFormat(System.Data.SerializationFormat mode)
    // Offset: 0x12F13C8
    static ::System::Exception* InvalidRemotingFormat(::System::Data::SerializationFormat mode);
    // static public System.Exception TableForeignPrimaryKey()
    // Offset: 0x12F1414
    static ::System::Exception* TableForeignPrimaryKey();
    // static public System.Exception TableCannotAddToSimpleContent()
    // Offset: 0x12F1458
    static ::System::Exception* TableCannotAddToSimpleContent();
    // static public System.Exception NoTableName()
    // Offset: 0x12F149C
    static ::System::Exception* NoTableName();
    // static public System.Exception MultipleTextOnlyColumns()
    // Offset: 0x12F14E0
    static ::System::Exception* MultipleTextOnlyColumns();
    // static public System.Exception InvalidSortString(System.String sort)
    // Offset: 0x12F1524
    static ::System::Exception* InvalidSortString(::StringW sort);
    // static public System.Exception DuplicateTableName(System.String table)
    // Offset: 0x12E2A50
    static ::System::Exception* DuplicateTableName(::StringW table);
    // static public System.Exception DuplicateTableName2(System.String table, System.String ns)
    // Offset: 0x12F1578
    static ::System::Exception* DuplicateTableName2(::StringW table, ::StringW ns);
    // static public System.Exception SelfnestedDatasetConflictingName(System.String table)
    // Offset: 0x12F15DC
    static ::System::Exception* SelfnestedDatasetConflictingName(::StringW table);
    // static public System.Exception DatasetConflictingName(System.String table)
    // Offset: 0x12E1778
    static ::System::Exception* DatasetConflictingName(::StringW table);
    // static public System.Exception TableAlreadyInOtherDataSet()
    // Offset: 0x12E1734
    static ::System::Exception* TableAlreadyInOtherDataSet();
    // static public System.Exception TableAlreadyInTheDataSet()
    // Offset: 0x12E16F0
    static ::System::Exception* TableAlreadyInTheDataSet();
    // static public System.Exception TableOutOfRange(System.Int32 index)
    // Offset: 0x12E06AC
    static ::System::Exception* TableOutOfRange(int index);
    // static public System.Exception TableNotInTheDataSet(System.String table)
    // Offset: 0x12E21DC
    static ::System::Exception* TableNotInTheDataSet(::StringW table);
    // static public System.Exception TableInRelation()
    // Offset: 0x12E2230
    static ::System::Exception* TableInRelation();
    // static public System.Exception TableInConstraint(System.Data.DataTable table, System.Data.Constraint constraint)
    // Offset: 0x12E2274
    static ::System::Exception* TableInConstraint(::System::Data::DataTable* table, ::System::Data::Constraint* constraint);
    // static public System.Exception CanNotSerializeDataTableHierarchy()
    // Offset: 0x12F1630
    static ::System::Exception* CanNotSerializeDataTableHierarchy();
    // static public System.Exception CanNotRemoteDataTable()
    // Offset: 0x12F1674
    static ::System::Exception* CanNotRemoteDataTable();
    // static public System.Exception CanNotSetRemotingFormat()
    // Offset: 0x12F16B8
    static ::System::Exception* CanNotSetRemotingFormat();
    // static public System.Exception CanNotSerializeDataTableWithEmptyName()
    // Offset: 0x12F16FC
    static ::System::Exception* CanNotSerializeDataTableWithEmptyName();
    // static public System.Exception TableNotFound(System.String tableName)
    // Offset: 0x12F1740
    static ::System::Exception* TableNotFound(::StringW tableName);
    // static public System.Exception AggregateException(System.Data.AggregateType aggregateType, System.Type type)
    // Offset: 0x12E8450
    static ::System::Exception* AggregateException(::System::Data::AggregateType aggregateType, ::System::Type* type);
    // static public System.Exception InvalidStorageType(System.TypeCode typecode)
    // Offset: 0x12F1794
    static ::System::Exception* InvalidStorageType(::System::TypeCode typecode);
    // static public System.Exception RangeArgument(System.Int32 min, System.Int32 max)
    // Offset: 0x12F1840
    static ::System::Exception* RangeArgument(int min, int max);
    // static public System.Exception NullRange()
    // Offset: 0x12F1904
    static ::System::Exception* NullRange();
    // static public System.Exception NegativeMinimumCapacity()
    // Offset: 0x12F1948
    static ::System::Exception* NegativeMinimumCapacity();
    // static public System.Exception ProblematicChars(System.Char charValue)
    // Offset: 0x12F198C
    static ::System::Exception* ProblematicChars(::Il2CppChar charValue);
    // static public System.Exception StorageSetFailed()
    // Offset: 0x12F1A78
    static ::System::Exception* StorageSetFailed();
    // static public System.Exception SimpleTypeNotSupported()
    // Offset: 0x12F1ABC
    static ::System::Exception* SimpleTypeNotSupported();
    // static public System.Exception MissingAttribute(System.String attribute)
    // Offset: 0x12F1B00
    static ::System::Exception* MissingAttribute(::StringW attribute);
    // static public System.Exception MissingAttribute(System.String element, System.String attribute)
    // Offset: 0x12F1B54
    static ::System::Exception* MissingAttribute(::StringW element, ::StringW attribute);
    // static public System.Exception InvalidAttributeValue(System.String name, System.String value)
    // Offset: 0x12F1BB8
    static ::System::Exception* InvalidAttributeValue(::StringW name, ::StringW value);
    // static public System.Exception AttributeValues(System.String name, System.String value1, System.String value2)
    // Offset: 0x12F1C1C
    static ::System::Exception* AttributeValues(::StringW name, ::StringW value1, ::StringW value2);
    // static public System.Exception ElementTypeNotFound(System.String name)
    // Offset: 0x12F1C88
    static ::System::Exception* ElementTypeNotFound(::StringW name);
    // static public System.Exception RelationParentNameMissing(System.String rel)
    // Offset: 0x12F1CDC
    static ::System::Exception* RelationParentNameMissing(::StringW rel);
    // static public System.Exception RelationChildNameMissing(System.String rel)
    // Offset: 0x12F1D30
    static ::System::Exception* RelationChildNameMissing(::StringW rel);
    // static public System.Exception RelationTableKeyMissing(System.String rel)
    // Offset: 0x12F1D84
    static ::System::Exception* RelationTableKeyMissing(::StringW rel);
    // static public System.Exception RelationChildKeyMissing(System.String rel)
    // Offset: 0x12F1DD8
    static ::System::Exception* RelationChildKeyMissing(::StringW rel);
    // static public System.Exception UndefinedDatatype(System.String name)
    // Offset: 0x12F1E2C
    static ::System::Exception* UndefinedDatatype(::StringW name);
    // static public System.Exception DatatypeNotDefined()
    // Offset: 0x12F1E80
    static ::System::Exception* DatatypeNotDefined();
    // static public System.Exception MismatchKeyLength()
    // Offset: 0x12F1EC4
    static ::System::Exception* MismatchKeyLength();
    // static public System.Exception InvalidField(System.String name)
    // Offset: 0x12F1F08
    static ::System::Exception* InvalidField(::StringW name);
    // static public System.Exception InvalidSelector(System.String name)
    // Offset: 0x12F1F5C
    static ::System::Exception* InvalidSelector(::StringW name);
    // static public System.Exception CircularComplexType(System.String name)
    // Offset: 0x12F1FB0
    static ::System::Exception* CircularComplexType(::StringW name);
    // static public System.Exception CannotInstantiateAbstract(System.String name)
    // Offset: 0x12F2004
    static ::System::Exception* CannotInstantiateAbstract(::StringW name);
    // static public System.Exception InvalidKey(System.String name)
    // Offset: 0x12F2058
    static ::System::Exception* InvalidKey(::StringW name);
    // static public System.Exception DiffgramMissingTable(System.String name)
    // Offset: 0x12F20AC
    static ::System::Exception* DiffgramMissingTable(::StringW name);
    // static public System.Exception DiffgramMissingSQL()
    // Offset: 0x12F2100
    static ::System::Exception* DiffgramMissingSQL();
    // static public System.Exception DuplicateConstraintRead(System.String str)
    // Offset: 0x12F2144
    static ::System::Exception* DuplicateConstraintRead(::StringW str);
    // static public System.Exception ColumnTypeConflict(System.String name)
    // Offset: 0x12F2198
    static ::System::Exception* ColumnTypeConflict(::StringW name);
    // static public System.Exception CannotConvert(System.String name, System.String type)
    // Offset: 0x12F21EC
    static ::System::Exception* CannotConvert(::StringW name, ::StringW type);
    // static public System.Exception MissingRefer(System.String name)
    // Offset: 0x12F2250
    static ::System::Exception* MissingRefer(::StringW name);
    // static public System.Exception InvalidPrefix(System.String name)
    // Offset: 0x12F22D4
    static ::System::Exception* InvalidPrefix(::StringW name);
    // static public System.Exception CanNotDeserializeObjectType()
    // Offset: 0x12F2328
    static ::System::Exception* CanNotDeserializeObjectType();
    // static public System.Exception IsDataSetAttributeMissingInSchema()
    // Offset: 0x12F236C
    static ::System::Exception* IsDataSetAttributeMissingInSchema();
    // static public System.Exception TooManyIsDataSetAtributeInSchema()
    // Offset: 0x12F23B0
    static ::System::Exception* TooManyIsDataSetAtributeInSchema();
    // static public System.Exception NestedCircular(System.String name)
    // Offset: 0x12F23F4
    static ::System::Exception* NestedCircular(::StringW name);
    // static public System.Exception MultipleParentRows(System.String tableQName)
    // Offset: 0x12F2448
    static ::System::Exception* MultipleParentRows(::StringW tableQName);
    // static public System.Exception PolymorphismNotSupported(System.String typeName)
    // Offset: 0x12F249C
    static ::System::Exception* PolymorphismNotSupported(::StringW typeName);
    // static public System.Exception DataTableInferenceNotSupported()
    // Offset: 0x12F24F0
    static ::System::Exception* DataTableInferenceNotSupported();
    // static System.Void ThrowMultipleTargetConverter(System.Exception innerException)
    // Offset: 0x12F2534
    static void ThrowMultipleTargetConverter(::System::Exception* innerException);
    // static public System.Exception DuplicateDeclaration(System.String name)
    // Offset: 0x12F2594
    static ::System::Exception* DuplicateDeclaration(::StringW name);
    // static public System.Exception FoundEntity()
    // Offset: 0x12F25E8
    static ::System::Exception* FoundEntity();
    // static public System.Exception MergeFailed(System.String name)
    // Offset: 0x12F262C
    static ::System::Exception* MergeFailed(::StringW name);
    // static public System.Exception ConvertFailed(System.Type type1, System.Type type2)
    // Offset: 0x12F2630
    static ::System::Exception* ConvertFailed(::System::Type* type1, ::System::Type* type2);
    // static System.Exception InvalidDuplicateNamedSimpleTypeDelaration(System.String stName, System.String errorStr)
    // Offset: 0x12F26D0
    static ::System::Exception* InvalidDuplicateNamedSimpleTypeDelaration(::StringW stName, ::StringW errorStr);
    // static System.Exception InternalRBTreeError(System.Data.RBTreeError internalError)
    // Offset: 0x12F2734
    static ::System::Exception* InternalRBTreeError(::System::Data::RBTreeError internalError);
    // static public System.Exception EnumeratorModified()
    // Offset: 0x12F27BC
    static ::System::Exception* EnumeratorModified();
  }; // System.Data.ExceptionBuilder
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TraceException
// Il2CppName: TraceException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Exception*)>(&System::Data::ExceptionBuilder::TraceException)> {
  static const MethodInfo* get() {
    static auto* trace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TraceException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trace, e});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TraceExceptionAsReturnValue
// Il2CppName: TraceExceptionAsReturnValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Exception*)>(&System::Data::ExceptionBuilder::TraceExceptionAsReturnValue)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TraceExceptionAsReturnValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TraceExceptionForCapture
// Il2CppName: TraceExceptionForCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Exception*)>(&System::Data::ExceptionBuilder::TraceExceptionForCapture)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TraceExceptionForCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TraceExceptionWithoutRethrow
// Il2CppName: TraceExceptionWithoutRethrow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Exception*)>(&System::Data::ExceptionBuilder::TraceExceptionWithoutRethrow)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TraceExceptionWithoutRethrow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_Argument
// Il2CppName: _Argument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_Argument)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_Argument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_Argument
// Il2CppName: _Argument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::System::Exception*)>(&System::Data::ExceptionBuilder::_Argument)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_Argument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error, innerException});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_ArgumentNull
// Il2CppName: _ArgumentNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::_ArgumentNull)> {
  static const MethodInfo* get() {
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_ArgumentNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramName, msg});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_ArgumentOutOfRange
// Il2CppName: _ArgumentOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::_ArgumentOutOfRange)> {
  static const MethodInfo* get() {
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_ArgumentOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramName, msg});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_IndexOutOfRange
// Il2CppName: _IndexOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_IndexOutOfRange)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_IndexOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_InvalidOperation
// Il2CppName: _InvalidOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_InvalidOperation)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_InvalidOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_InvalidEnumArgumentException
// Il2CppName: _InvalidEnumArgumentException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_InvalidEnumArgumentException)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_InvalidEnumArgumentException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_InvalidEnumArgumentException
// Il2CppName: _InvalidEnumArgumentException
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ThrowDataException
// Il2CppName: ThrowDataException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::System::Exception*)>(&System::Data::ExceptionBuilder::ThrowDataException)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ThrowDataException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error, innerException});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_Data
// Il2CppName: _Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_Data)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_Constraint
// Il2CppName: _Constraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_Constraint)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_Constraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_InvalidConstraint
// Il2CppName: _InvalidConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_InvalidConstraint)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_InvalidConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_DeletedRowInaccessible
// Il2CppName: _DeletedRowInaccessible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_DeletedRowInaccessible)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_DeletedRowInaccessible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_DuplicateName
// Il2CppName: _DuplicateName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_DuplicateName)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_DuplicateName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_InRowChangingEvent
// Il2CppName: _InRowChangingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_InRowChangingEvent)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_InRowChangingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_NoNullAllowed
// Il2CppName: _NoNullAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_NoNullAllowed)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_NoNullAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_ReadOnly
// Il2CppName: _ReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_ReadOnly)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_ReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_RowNotInTable
// Il2CppName: _RowNotInTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_RowNotInTable)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_RowNotInTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::_VersionNotFound
// Il2CppName: _VersionNotFound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::_VersionNotFound)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "_VersionNotFound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ArgumentNull
// Il2CppName: ArgumentNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::ArgumentNull)> {
  static const MethodInfo* get() {
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ArgumentNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ArgumentOutOfRange
// Il2CppName: ArgumentOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::ArgumentOutOfRange)> {
  static const MethodInfo* get() {
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ArgumentOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paramName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::BadObjectPropertyAccess
// Il2CppName: BadObjectPropertyAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::BadObjectPropertyAccess)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "BadObjectPropertyAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CaseInsensitiveNameConflict
// Il2CppName: CaseInsensitiveNameConflict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CaseInsensitiveNameConflict)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CaseInsensitiveNameConflict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NamespaceNameConflict
// Il2CppName: NamespaceNameConflict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::NamespaceNameConflict)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NamespaceNameConflict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidOffsetLength
// Il2CppName: InvalidOffsetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::InvalidOffsetLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidOffsetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ColumnNotInTheTable
// Il2CppName: ColumnNotInTheTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::ColumnNotInTheTable)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ColumnNotInTheTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ColumnNotInAnyTable
// Il2CppName: ColumnNotInAnyTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ColumnNotInAnyTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ColumnNotInAnyTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ColumnOutOfRange
// Il2CppName: ColumnOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int)>(&System::Data::ExceptionBuilder::ColumnOutOfRange)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ColumnOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ColumnOutOfRange
// Il2CppName: ColumnOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::ColumnOutOfRange)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ColumnOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotAddColumn1
// Il2CppName: CannotAddColumn1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotAddColumn1)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotAddColumn1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotAddColumn2
// Il2CppName: CannotAddColumn2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotAddColumn2)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotAddColumn2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotAddColumn3
// Il2CppName: CannotAddColumn3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CannotAddColumn3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotAddColumn3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotAddColumn4
// Il2CppName: CannotAddColumn4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotAddColumn4)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotAddColumn4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotAddDuplicate
// Il2CppName: CannotAddDuplicate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotAddDuplicate)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotAddDuplicate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotAddDuplicate2
// Il2CppName: CannotAddDuplicate2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotAddDuplicate2)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotAddDuplicate2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotAddDuplicate3
// Il2CppName: CannotAddDuplicate3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotAddDuplicate3)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotAddDuplicate3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotRemoveColumn
// Il2CppName: CannotRemoveColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CannotRemoveColumn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotRemoveColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotRemovePrimaryKey
// Il2CppName: CannotRemovePrimaryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CannotRemovePrimaryKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotRemovePrimaryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotRemoveChildKey
// Il2CppName: CannotRemoveChildKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotRemoveChildKey)> {
  static const MethodInfo* get() {
    static auto* relation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotRemoveChildKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relation});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotRemoveConstraint
// Il2CppName: CannotRemoveConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::CannotRemoveConstraint)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotRemoveConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint, table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotRemoveExpression
// Il2CppName: CannotRemoveExpression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::CannotRemoveExpression)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* expression = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotRemoveExpression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, expression});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AddPrimaryKeyConstraint
// Il2CppName: AddPrimaryKeyConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::AddPrimaryKeyConstraint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AddPrimaryKeyConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NoConstraintName
// Il2CppName: NoConstraintName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NoConstraintName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NoConstraintName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ConstraintViolation
// Il2CppName: ConstraintViolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::ConstraintViolation)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ConstraintViolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::KeysToString
// Il2CppName: KeysToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<::Il2CppObject*>)>(&System::Data::ExceptionBuilder::KeysToString)> {
  static const MethodInfo* get() {
    static auto* keys = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "KeysToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keys});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::UniqueConstraintViolationText
// Il2CppName: UniqueConstraintViolationText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::ArrayW<::System::Data::DataColumn*>, ::ArrayW<::Il2CppObject*>)>(&System::Data::ExceptionBuilder::UniqueConstraintViolationText)> {
  static const MethodInfo* get() {
    static auto* columns = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "DataColumn"), 1)->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "UniqueConstraintViolationText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columns, values});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ConstraintViolation
// Il2CppName: ConstraintViolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::ArrayW<::System::Data::DataColumn*>, ::ArrayW<::Il2CppObject*>)>(&System::Data::ExceptionBuilder::ConstraintViolation)> {
  static const MethodInfo* get() {
    static auto* columns = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "DataColumn"), 1)->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ConstraintViolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columns, values});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ConstraintOutOfRange
// Il2CppName: ConstraintOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int)>(&System::Data::ExceptionBuilder::ConstraintOutOfRange)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ConstraintOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DuplicateConstraint
// Il2CppName: DuplicateConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DuplicateConstraint)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DuplicateConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DuplicateConstraintName
// Il2CppName: DuplicateConstraintName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DuplicateConstraintName)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DuplicateConstraintName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NeededForForeignKeyConstraint
// Il2CppName: NeededForForeignKeyConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::UniqueConstraint*, ::System::Data::ForeignKeyConstraint*)>(&System::Data::ExceptionBuilder::NeededForForeignKeyConstraint)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System.Data", "UniqueConstraint")->byval_arg;
    static auto* fk = &::il2cpp_utils::GetClassFromName("System.Data", "ForeignKeyConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NeededForForeignKeyConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, fk});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::UniqueConstraintViolation
// Il2CppName: UniqueConstraintViolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::UniqueConstraintViolation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "UniqueConstraintViolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ConstraintForeignTable
// Il2CppName: ConstraintForeignTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ConstraintForeignTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ConstraintForeignTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ConstraintParentValues
// Il2CppName: ConstraintParentValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ConstraintParentValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ConstraintParentValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ConstraintAddFailed
// Il2CppName: ConstraintAddFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataTable*)>(&System::Data::ExceptionBuilder::ConstraintAddFailed)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ConstraintAddFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ConstraintRemoveFailed
// Il2CppName: ConstraintRemoveFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ConstraintRemoveFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ConstraintRemoveFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::FailedCascadeDelete
// Il2CppName: FailedCascadeDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::FailedCascadeDelete)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "FailedCascadeDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::FailedCascadeUpdate
// Il2CppName: FailedCascadeUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::FailedCascadeUpdate)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "FailedCascadeUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::FailedClearParentTable
// Il2CppName: FailedClearParentTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW, ::StringW)>(&System::Data::ExceptionBuilder::FailedClearParentTable)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* childTable = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "FailedClearParentTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, constraint, childTable});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ForeignKeyViolation
// Il2CppName: ForeignKeyViolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&System::Data::ExceptionBuilder::ForeignKeyViolation)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* keys = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ForeignKeyViolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint, keys});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RemoveParentRow
// Il2CppName: RemoveParentRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::ForeignKeyConstraint*)>(&System::Data::ExceptionBuilder::RemoveParentRow)> {
  static const MethodInfo* get() {
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System.Data", "ForeignKeyConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RemoveParentRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{constraint});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MaxLengthViolationText
// Il2CppName: MaxLengthViolationText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Data::ExceptionBuilder::MaxLengthViolationText)> {
  static const MethodInfo* get() {
    static auto* columnName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MaxLengthViolationText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columnName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NotAllowDBNullViolationText
// Il2CppName: NotAllowDBNullViolationText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&System::Data::ExceptionBuilder::NotAllowDBNullViolationText)> {
  static const MethodInfo* get() {
    static auto* columnName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NotAllowDBNullViolationText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columnName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CantAddConstraintToMultipleNestedTable
// Il2CppName: CantAddConstraintToMultipleNestedTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CantAddConstraintToMultipleNestedTable)> {
  static const MethodInfo* get() {
    static auto* tableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CantAddConstraintToMultipleNestedTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AutoIncrementAndExpression
// Il2CppName: AutoIncrementAndExpression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::AutoIncrementAndExpression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AutoIncrementAndExpression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AutoIncrementAndDefaultValue
// Il2CppName: AutoIncrementAndDefaultValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::AutoIncrementAndDefaultValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AutoIncrementAndDefaultValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AutoIncrementSeed
// Il2CppName: AutoIncrementSeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::AutoIncrementSeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AutoIncrementSeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CantChangeDataType
// Il2CppName: CantChangeDataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CantChangeDataType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CantChangeDataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NullDataType
// Il2CppName: NullDataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NullDataType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NullDataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ColumnNameRequired
// Il2CppName: ColumnNameRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ColumnNameRequired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ColumnNameRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DefaultValueAndAutoIncrement
// Il2CppName: DefaultValueAndAutoIncrement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::DefaultValueAndAutoIncrement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DefaultValueAndAutoIncrement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DefaultValueDataType
// Il2CppName: DefaultValueDataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::System::Type*, ::System::Type*, ::System::Exception*)>(&System::Data::ExceptionBuilder::DefaultValueDataType)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* columnType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inner = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DefaultValueDataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, defaultType, columnType, inner});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DefaultValueColumnDataType
// Il2CppName: DefaultValueColumnDataType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::System::Type*, ::System::Type*, ::System::Exception*)>(&System::Data::ExceptionBuilder::DefaultValueColumnDataType)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* defaultType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* columnType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* inner = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DefaultValueColumnDataType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, defaultType, columnType, inner});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ExpressionAndUnique
// Il2CppName: ExpressionAndUnique
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ExpressionAndUnique)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ExpressionAndUnique", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ExpressionAndReadOnly
// Il2CppName: ExpressionAndReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ExpressionAndReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ExpressionAndReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ExpressionAndConstraint
// Il2CppName: ExpressionAndConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataColumn*, ::System::Data::Constraint*)>(&System::Data::ExceptionBuilder::ExpressionAndConstraint)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System.Data", "Constraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ExpressionAndConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, constraint});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ExpressionInConstraint
// Il2CppName: ExpressionInConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataColumn*)>(&System::Data::ExceptionBuilder::ExpressionInConstraint)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ExpressionInConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ExpressionCircular
// Il2CppName: ExpressionCircular
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ExpressionCircular)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ExpressionCircular", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NonUniqueValues
// Il2CppName: NonUniqueValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::NonUniqueValues)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NonUniqueValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NullKeyValues
// Il2CppName: NullKeyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::NullKeyValues)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NullKeyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NullValues
// Il2CppName: NullValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::NullValues)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NullValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ReadOnlyAndExpression
// Il2CppName: ReadOnlyAndExpression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ReadOnlyAndExpression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ReadOnlyAndExpression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ReadOnly
// Il2CppName: ReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::ReadOnly)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::UniqueAndExpression
// Il2CppName: UniqueAndExpression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::UniqueAndExpression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "UniqueAndExpression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::SetFailed
// Il2CppName: SetFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::Il2CppObject*, ::System::Data::DataColumn*, ::System::Type*, ::System::Exception*)>(&System::Data::ExceptionBuilder::SetFailed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "SetFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, column, type, innerException});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotSetToNull
// Il2CppName: CannotSetToNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataColumn*)>(&System::Data::ExceptionBuilder::CannotSetToNull)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotSetToNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::LongerThanMaxLength
// Il2CppName: LongerThanMaxLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataColumn*)>(&System::Data::ExceptionBuilder::LongerThanMaxLength)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "LongerThanMaxLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotSetMaxLength
// Il2CppName: CannotSetMaxLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataColumn*, int)>(&System::Data::ExceptionBuilder::CannotSetMaxLength)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotSetMaxLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column, value});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotSetMaxLength2
// Il2CppName: CannotSetMaxLength2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataColumn*)>(&System::Data::ExceptionBuilder::CannotSetMaxLength2)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotSetMaxLength2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotSetSimpleContentType
// Il2CppName: CannotSetSimpleContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::System::Type*)>(&System::Data::ExceptionBuilder::CannotSetSimpleContentType)> {
  static const MethodInfo* get() {
    static auto* columnName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotSetSimpleContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columnName, type});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotSetSimpleContent
// Il2CppName: CannotSetSimpleContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::System::Type*)>(&System::Data::ExceptionBuilder::CannotSetSimpleContent)> {
  static const MethodInfo* get() {
    static auto* columnName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotSetSimpleContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columnName, type});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotChangeNamespace
// Il2CppName: CannotChangeNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotChangeNamespace)> {
  static const MethodInfo* get() {
    static auto* columnName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotChangeNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columnName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::HasToBeStringType
// Il2CppName: HasToBeStringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataColumn*)>(&System::Data::ExceptionBuilder::HasToBeStringType)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "HasToBeStringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AutoIncrementCannotSetIfHasData
// Il2CppName: AutoIncrementCannotSetIfHasData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::AutoIncrementCannotSetIfHasData)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AutoIncrementCannotSetIfHasData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::INullableUDTwithoutStaticNull
// Il2CppName: INullableUDTwithoutStaticNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::INullableUDTwithoutStaticNull)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "INullableUDTwithoutStaticNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::IComparableNotImplemented
// Il2CppName: IComparableNotImplemented
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::IComparableNotImplemented)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "IComparableNotImplemented", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::UDTImplementsIChangeTrackingButnotIRevertible
// Il2CppName: UDTImplementsIChangeTrackingButnotIRevertible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::UDTImplementsIChangeTrackingButnotIRevertible)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "UDTImplementsIChangeTrackingButnotIRevertible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidDataColumnMapping
// Il2CppName: InvalidDataColumnMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Type*)>(&System::Data::ExceptionBuilder::InvalidDataColumnMapping)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidDataColumnMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotSetDateTimeModeForNonDateTimeColumns
// Il2CppName: CannotSetDateTimeModeForNonDateTimeColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CannotSetDateTimeModeForNonDateTimeColumns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotSetDateTimeModeForNonDateTimeColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidDateTimeMode
// Il2CppName: InvalidDateTimeMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataSetDateTime)>(&System::Data::ExceptionBuilder::InvalidDateTimeMode)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Data", "DataSetDateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidDateTimeMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CantChangeDateTimeMode
// Il2CppName: CantChangeDateTimeMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataSetDateTime, ::System::Data::DataSetDateTime)>(&System::Data::ExceptionBuilder::CantChangeDateTimeMode)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System.Data", "DataSetDateTime")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System.Data", "DataSetDateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CantChangeDateTimeMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ColumnTypeNotSupported
// Il2CppName: ColumnTypeNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ColumnTypeNotSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ColumnTypeNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::SetFailed
// Il2CppName: SetFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::SetFailed)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "SetFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CanNotUse
// Il2CppName: CanNotUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CanNotUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CanNotUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::SetIListObject
// Il2CppName: SetIListObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::SetIListObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "SetIListObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AddNewNotAllowNull
// Il2CppName: AddNewNotAllowNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::AddNewNotAllowNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AddNewNotAllowNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NotOpen
// Il2CppName: NotOpen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NotOpen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NotOpen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CreateChildView
// Il2CppName: CreateChildView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CreateChildView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CreateChildView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CanNotDelete
// Il2CppName: CanNotDelete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CanNotDelete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CanNotDelete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::GetElementIndex
// Il2CppName: GetElementIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int)>(&System::Data::ExceptionBuilder::GetElementIndex)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "GetElementIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AddExternalObject
// Il2CppName: AddExternalObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::AddExternalObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AddExternalObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CanNotClear
// Il2CppName: CanNotClear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CanNotClear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CanNotClear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InsertExternalObject
// Il2CppName: InsertExternalObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::InsertExternalObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InsertExternalObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RemoveExternalObject
// Il2CppName: RemoveExternalObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RemoveExternalObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RemoveExternalObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::KeyTableMismatch
// Il2CppName: KeyTableMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::KeyTableMismatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "KeyTableMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::KeyNoColumns
// Il2CppName: KeyNoColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::KeyNoColumns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "KeyNoColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::KeyTooManyColumns
// Il2CppName: KeyTooManyColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int)>(&System::Data::ExceptionBuilder::KeyTooManyColumns)> {
  static const MethodInfo* get() {
    static auto* cols = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "KeyTooManyColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cols});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::KeyDuplicateColumns
// Il2CppName: KeyDuplicateColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::KeyDuplicateColumns)> {
  static const MethodInfo* get() {
    static auto* columnName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "KeyDuplicateColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columnName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationDataSetMismatch
// Il2CppName: RelationDataSetMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationDataSetMismatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationDataSetMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ColumnsTypeMismatch
// Il2CppName: ColumnsTypeMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ColumnsTypeMismatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ColumnsTypeMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::KeyLengthMismatch
// Il2CppName: KeyLengthMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::KeyLengthMismatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "KeyLengthMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::KeyLengthZero
// Il2CppName: KeyLengthZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::KeyLengthZero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "KeyLengthZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ForeignRelation
// Il2CppName: ForeignRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ForeignRelation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ForeignRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::KeyColumnsIdentical
// Il2CppName: KeyColumnsIdentical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::KeyColumnsIdentical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "KeyColumnsIdentical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationForeignTable
// Il2CppName: RelationForeignTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::RelationForeignTable)> {
  static const MethodInfo* get() {
    static auto* t1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* t2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationForeignTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t1, t2});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::GetParentRowTableMismatch
// Il2CppName: GetParentRowTableMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::GetParentRowTableMismatch)> {
  static const MethodInfo* get() {
    static auto* t1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* t2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "GetParentRowTableMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t1, t2});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::SetParentRowTableMismatch
// Il2CppName: SetParentRowTableMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::SetParentRowTableMismatch)> {
  static const MethodInfo* get() {
    static auto* t1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* t2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "SetParentRowTableMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t1, t2});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationForeignRow
// Il2CppName: RelationForeignRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationForeignRow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationForeignRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationNestedReadOnly
// Il2CppName: RelationNestedReadOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationNestedReadOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationNestedReadOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableCantBeNestedInTwoTables
// Il2CppName: TableCantBeNestedInTwoTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::TableCantBeNestedInTwoTables)> {
  static const MethodInfo* get() {
    static auto* tableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableCantBeNestedInTwoTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::LoopInNestedRelations
// Il2CppName: LoopInNestedRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::LoopInNestedRelations)> {
  static const MethodInfo* get() {
    static auto* tableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "LoopInNestedRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationDoesNotExist
// Il2CppName: RelationDoesNotExist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationDoesNotExist)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationDoesNotExist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ParentOrChildColumnsDoNotHaveDataSet
// Il2CppName: ParentOrChildColumnsDoNotHaveDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ParentOrChildColumnsDoNotHaveDataSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ParentOrChildColumnsDoNotHaveDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InValidNestedRelation
// Il2CppName: InValidNestedRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::InValidNestedRelation)> {
  static const MethodInfo* get() {
    static auto* childTableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InValidNestedRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{childTableName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidParentNamespaceinNestedRelation
// Il2CppName: InvalidParentNamespaceinNestedRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::InvalidParentNamespaceinNestedRelation)> {
  static const MethodInfo* get() {
    static auto* childTableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidParentNamespaceinNestedRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{childTableName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowNotInTheDataSet
// Il2CppName: RowNotInTheDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RowNotInTheDataSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowNotInTheDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowNotInTheTable
// Il2CppName: RowNotInTheTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RowNotInTheTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowNotInTheTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::EditInRowChanging
// Il2CppName: EditInRowChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::EditInRowChanging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "EditInRowChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::EndEditInRowChanging
// Il2CppName: EndEditInRowChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::EndEditInRowChanging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "EndEditInRowChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::BeginEditInRowChanging
// Il2CppName: BeginEditInRowChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::BeginEditInRowChanging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "BeginEditInRowChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CancelEditInRowChanging
// Il2CppName: CancelEditInRowChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CancelEditInRowChanging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CancelEditInRowChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DeleteInRowDeleting
// Il2CppName: DeleteInRowDeleting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::DeleteInRowDeleting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DeleteInRowDeleting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ValueArrayLength
// Il2CppName: ValueArrayLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ValueArrayLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ValueArrayLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NoCurrentData
// Il2CppName: NoCurrentData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NoCurrentData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NoCurrentData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NoOriginalData
// Il2CppName: NoOriginalData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NoOriginalData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NoOriginalData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NoProposedData
// Il2CppName: NoProposedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NoProposedData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NoProposedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowRemovedFromTheTable
// Il2CppName: RowRemovedFromTheTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RowRemovedFromTheTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowRemovedFromTheTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DeletedRowInaccessible
// Il2CppName: DeletedRowInaccessible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::DeletedRowInaccessible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DeletedRowInaccessible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowAlreadyDeleted
// Il2CppName: RowAlreadyDeleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RowAlreadyDeleted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowAlreadyDeleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowEmpty
// Il2CppName: RowEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RowEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidRowVersion
// Il2CppName: InvalidRowVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::InvalidRowVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidRowVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowOutOfRange
// Il2CppName: RowOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int)>(&System::Data::ExceptionBuilder::RowOutOfRange)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowInsertTwice
// Il2CppName: RowInsertTwice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int, ::StringW)>(&System::Data::ExceptionBuilder::RowInsertTwice)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowInsertTwice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, tableName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowInsertMissing
// Il2CppName: RowInsertMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::RowInsertMissing)> {
  static const MethodInfo* get() {
    static auto* tableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowInsertMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowAlreadyRemoved
// Il2CppName: RowAlreadyRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RowAlreadyRemoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowAlreadyRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MultipleParents
// Il2CppName: MultipleParents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::MultipleParents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MultipleParents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidRowState
// Il2CppName: InvalidRowState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataRowState)>(&System::Data::ExceptionBuilder::InvalidRowState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidRowState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidRowBitPattern
// Il2CppName: InvalidRowBitPattern
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::InvalidRowBitPattern)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidRowBitPattern", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::SetDataSetNameToEmpty
// Il2CppName: SetDataSetNameToEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::SetDataSetNameToEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "SetDataSetNameToEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::SetDataSetNameConflicting
// Il2CppName: SetDataSetNameConflicting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::SetDataSetNameConflicting)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "SetDataSetNameConflicting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DataSetUnsupportedSchema
// Il2CppName: DataSetUnsupportedSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DataSetUnsupportedSchema)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DataSetUnsupportedSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MergeMissingDefinition
// Il2CppName: MergeMissingDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::MergeMissingDefinition)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MergeMissingDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TablesInDifferentSets
// Il2CppName: TablesInDifferentSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::TablesInDifferentSets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TablesInDifferentSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationAlreadyExists
// Il2CppName: RelationAlreadyExists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationAlreadyExists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationAlreadyExists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowAlreadyInOtherCollection
// Il2CppName: RowAlreadyInOtherCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RowAlreadyInOtherCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowAlreadyInOtherCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RowAlreadyInTheCollection
// Il2CppName: RowAlreadyInTheCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RowAlreadyInTheCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RowAlreadyInTheCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RecordStateRange
// Il2CppName: RecordStateRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RecordStateRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RecordStateRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::IndexKeyLength
// Il2CppName: IndexKeyLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int, int)>(&System::Data::ExceptionBuilder::IndexKeyLength)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* keyLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "IndexKeyLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length, keyLength});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RemovePrimaryKey
// Il2CppName: RemovePrimaryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataTable*)>(&System::Data::ExceptionBuilder::RemovePrimaryKey)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RemovePrimaryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationAlreadyInOtherDataSet
// Il2CppName: RelationAlreadyInOtherDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationAlreadyInOtherDataSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationAlreadyInOtherDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationAlreadyInTheDataSet
// Il2CppName: RelationAlreadyInTheDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationAlreadyInTheDataSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationAlreadyInTheDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationNotInTheDataSet
// Il2CppName: RelationNotInTheDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::RelationNotInTheDataSet)> {
  static const MethodInfo* get() {
    static auto* relation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationNotInTheDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relation});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationOutOfRange
// Il2CppName: RelationOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::Il2CppObject*)>(&System::Data::ExceptionBuilder::RelationOutOfRange)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DuplicateRelation
// Il2CppName: DuplicateRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DuplicateRelation)> {
  static const MethodInfo* get() {
    static auto* relation = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DuplicateRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relation});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationTableNull
// Il2CppName: RelationTableNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationTableNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationTableNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationDataSetNull
// Il2CppName: RelationDataSetNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationDataSetNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationDataSetNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationTableWasRemoved
// Il2CppName: RelationTableWasRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::RelationTableWasRemoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationTableWasRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ParentTableMismatch
// Il2CppName: ParentTableMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ParentTableMismatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ParentTableMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ChildTableMismatch
// Il2CppName: ChildTableMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::ChildTableMismatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ChildTableMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::EnforceConstraint
// Il2CppName: EnforceConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::EnforceConstraint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "EnforceConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CaseLocaleMismatch
// Il2CppName: CaseLocaleMismatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CaseLocaleMismatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CaseLocaleMismatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotChangeCaseLocale
// Il2CppName: CannotChangeCaseLocale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CannotChangeCaseLocale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotChangeCaseLocale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotChangeCaseLocale
// Il2CppName: CannotChangeCaseLocale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Exception*)>(&System::Data::ExceptionBuilder::CannotChangeCaseLocale)> {
  static const MethodInfo* get() {
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotChangeCaseLocale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerException});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidRemotingFormat
// Il2CppName: InvalidRemotingFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::SerializationFormat)>(&System::Data::ExceptionBuilder::InvalidRemotingFormat)> {
  static const MethodInfo* get() {
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Data", "SerializationFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidRemotingFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mode});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableForeignPrimaryKey
// Il2CppName: TableForeignPrimaryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::TableForeignPrimaryKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableForeignPrimaryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableCannotAddToSimpleContent
// Il2CppName: TableCannotAddToSimpleContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::TableCannotAddToSimpleContent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableCannotAddToSimpleContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NoTableName
// Il2CppName: NoTableName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NoTableName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NoTableName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MultipleTextOnlyColumns
// Il2CppName: MultipleTextOnlyColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::MultipleTextOnlyColumns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MultipleTextOnlyColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidSortString
// Il2CppName: InvalidSortString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::InvalidSortString)> {
  static const MethodInfo* get() {
    static auto* sort = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidSortString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sort});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DuplicateTableName
// Il2CppName: DuplicateTableName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DuplicateTableName)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DuplicateTableName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DuplicateTableName2
// Il2CppName: DuplicateTableName2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::DuplicateTableName2)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DuplicateTableName2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, ns});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::SelfnestedDatasetConflictingName
// Il2CppName: SelfnestedDatasetConflictingName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::SelfnestedDatasetConflictingName)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "SelfnestedDatasetConflictingName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DatasetConflictingName
// Il2CppName: DatasetConflictingName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DatasetConflictingName)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DatasetConflictingName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableAlreadyInOtherDataSet
// Il2CppName: TableAlreadyInOtherDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::TableAlreadyInOtherDataSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableAlreadyInOtherDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableAlreadyInTheDataSet
// Il2CppName: TableAlreadyInTheDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::TableAlreadyInTheDataSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableAlreadyInTheDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableOutOfRange
// Il2CppName: TableOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int)>(&System::Data::ExceptionBuilder::TableOutOfRange)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableNotInTheDataSet
// Il2CppName: TableNotInTheDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::TableNotInTheDataSet)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableNotInTheDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableInRelation
// Il2CppName: TableInRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::TableInRelation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableInRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableInConstraint
// Il2CppName: TableInConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::DataTable*, ::System::Data::Constraint*)>(&System::Data::ExceptionBuilder::TableInConstraint)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* constraint = &::il2cpp_utils::GetClassFromName("System.Data", "Constraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableInConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, constraint});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CanNotSerializeDataTableHierarchy
// Il2CppName: CanNotSerializeDataTableHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CanNotSerializeDataTableHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CanNotSerializeDataTableHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CanNotRemoteDataTable
// Il2CppName: CanNotRemoteDataTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CanNotRemoteDataTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CanNotRemoteDataTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CanNotSetRemotingFormat
// Il2CppName: CanNotSetRemotingFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CanNotSetRemotingFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CanNotSetRemotingFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CanNotSerializeDataTableWithEmptyName
// Il2CppName: CanNotSerializeDataTableWithEmptyName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CanNotSerializeDataTableWithEmptyName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CanNotSerializeDataTableWithEmptyName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TableNotFound
// Il2CppName: TableNotFound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::TableNotFound)> {
  static const MethodInfo* get() {
    static auto* tableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TableNotFound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AggregateException
// Il2CppName: AggregateException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::AggregateType, ::System::Type*)>(&System::Data::ExceptionBuilder::AggregateException)> {
  static const MethodInfo* get() {
    static auto* aggregateType = &::il2cpp_utils::GetClassFromName("System.Data", "AggregateType")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AggregateException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aggregateType, type});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidStorageType
// Il2CppName: InvalidStorageType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::TypeCode)>(&System::Data::ExceptionBuilder::InvalidStorageType)> {
  static const MethodInfo* get() {
    static auto* typecode = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidStorageType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typecode});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RangeArgument
// Il2CppName: RangeArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(int, int)>(&System::Data::ExceptionBuilder::RangeArgument)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RangeArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NullRange
// Il2CppName: NullRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NullRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NullRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NegativeMinimumCapacity
// Il2CppName: NegativeMinimumCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::NegativeMinimumCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NegativeMinimumCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ProblematicChars
// Il2CppName: ProblematicChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::Il2CppChar)>(&System::Data::ExceptionBuilder::ProblematicChars)> {
  static const MethodInfo* get() {
    static auto* charValue = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ProblematicChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{charValue});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::StorageSetFailed
// Il2CppName: StorageSetFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::StorageSetFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "StorageSetFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::SimpleTypeNotSupported
// Il2CppName: SimpleTypeNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::SimpleTypeNotSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "SimpleTypeNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MissingAttribute
// Il2CppName: MissingAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::MissingAttribute)> {
  static const MethodInfo* get() {
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MissingAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attribute});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MissingAttribute
// Il2CppName: MissingAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::MissingAttribute)> {
  static const MethodInfo* get() {
    static auto* element = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attribute = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MissingAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{element, attribute});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidAttributeValue
// Il2CppName: InvalidAttributeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::InvalidAttributeValue)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidAttributeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::AttributeValues
// Il2CppName: AttributeValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW, ::StringW)>(&System::Data::ExceptionBuilder::AttributeValues)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "AttributeValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value1, value2});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ElementTypeNotFound
// Il2CppName: ElementTypeNotFound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::ElementTypeNotFound)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ElementTypeNotFound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationParentNameMissing
// Il2CppName: RelationParentNameMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::RelationParentNameMissing)> {
  static const MethodInfo* get() {
    static auto* rel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationParentNameMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rel});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationChildNameMissing
// Il2CppName: RelationChildNameMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::RelationChildNameMissing)> {
  static const MethodInfo* get() {
    static auto* rel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationChildNameMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rel});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationTableKeyMissing
// Il2CppName: RelationTableKeyMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::RelationTableKeyMissing)> {
  static const MethodInfo* get() {
    static auto* rel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationTableKeyMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rel});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::RelationChildKeyMissing
// Il2CppName: RelationChildKeyMissing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::RelationChildKeyMissing)> {
  static const MethodInfo* get() {
    static auto* rel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "RelationChildKeyMissing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rel});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::UndefinedDatatype
// Il2CppName: UndefinedDatatype
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::UndefinedDatatype)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "UndefinedDatatype", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DatatypeNotDefined
// Il2CppName: DatatypeNotDefined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::DatatypeNotDefined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DatatypeNotDefined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MismatchKeyLength
// Il2CppName: MismatchKeyLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::MismatchKeyLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MismatchKeyLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidField
// Il2CppName: InvalidField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::InvalidField)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidSelector
// Il2CppName: InvalidSelector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::InvalidSelector)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidSelector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CircularComplexType
// Il2CppName: CircularComplexType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CircularComplexType)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CircularComplexType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotInstantiateAbstract
// Il2CppName: CannotInstantiateAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::CannotInstantiateAbstract)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotInstantiateAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidKey
// Il2CppName: InvalidKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::InvalidKey)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DiffgramMissingTable
// Il2CppName: DiffgramMissingTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DiffgramMissingTable)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DiffgramMissingTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DiffgramMissingSQL
// Il2CppName: DiffgramMissingSQL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::DiffgramMissingSQL)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DiffgramMissingSQL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DuplicateConstraintRead
// Il2CppName: DuplicateConstraintRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DuplicateConstraintRead)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DuplicateConstraintRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ColumnTypeConflict
// Il2CppName: ColumnTypeConflict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::ColumnTypeConflict)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ColumnTypeConflict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CannotConvert
// Il2CppName: CannotConvert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::CannotConvert)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CannotConvert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, type});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MissingRefer
// Il2CppName: MissingRefer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::MissingRefer)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MissingRefer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidPrefix
// Il2CppName: InvalidPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::InvalidPrefix)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::CanNotDeserializeObjectType
// Il2CppName: CanNotDeserializeObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::CanNotDeserializeObjectType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "CanNotDeserializeObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::IsDataSetAttributeMissingInSchema
// Il2CppName: IsDataSetAttributeMissingInSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::IsDataSetAttributeMissingInSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "IsDataSetAttributeMissingInSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::TooManyIsDataSetAtributeInSchema
// Il2CppName: TooManyIsDataSetAtributeInSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::TooManyIsDataSetAtributeInSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "TooManyIsDataSetAtributeInSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::NestedCircular
// Il2CppName: NestedCircular
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::NestedCircular)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "NestedCircular", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MultipleParentRows
// Il2CppName: MultipleParentRows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::MultipleParentRows)> {
  static const MethodInfo* get() {
    static auto* tableQName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MultipleParentRows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableQName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::PolymorphismNotSupported
// Il2CppName: PolymorphismNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::PolymorphismNotSupported)> {
  static const MethodInfo* get() {
    static auto* typeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "PolymorphismNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeName});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DataTableInferenceNotSupported
// Il2CppName: DataTableInferenceNotSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::DataTableInferenceNotSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DataTableInferenceNotSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ThrowMultipleTargetConverter
// Il2CppName: ThrowMultipleTargetConverter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Exception*)>(&System::Data::ExceptionBuilder::ThrowMultipleTargetConverter)> {
  static const MethodInfo* get() {
    static auto* innerException = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ThrowMultipleTargetConverter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{innerException});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::DuplicateDeclaration
// Il2CppName: DuplicateDeclaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::DuplicateDeclaration)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "DuplicateDeclaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::FoundEntity
// Il2CppName: FoundEntity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::FoundEntity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "FoundEntity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::MergeFailed
// Il2CppName: MergeFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW)>(&System::Data::ExceptionBuilder::MergeFailed)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "MergeFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::ConvertFailed
// Il2CppName: ConvertFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Type*, ::System::Type*)>(&System::Data::ExceptionBuilder::ConvertFailed)> {
  static const MethodInfo* get() {
    static auto* type1 = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* type2 = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "ConvertFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type1, type2});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InvalidDuplicateNamedSimpleTypeDelaration
// Il2CppName: InvalidDuplicateNamedSimpleTypeDelaration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::StringW, ::StringW)>(&System::Data::ExceptionBuilder::InvalidDuplicateNamedSimpleTypeDelaration)> {
  static const MethodInfo* get() {
    static auto* stName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* errorStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InvalidDuplicateNamedSimpleTypeDelaration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stName, errorStr});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::InternalRBTreeError
// Il2CppName: InternalRBTreeError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Data::RBTreeError)>(&System::Data::ExceptionBuilder::InternalRBTreeError)> {
  static const MethodInfo* get() {
    static auto* internalError = &::il2cpp_utils::GetClassFromName("System.Data", "RBTreeError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "InternalRBTreeError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{internalError});
  }
};
// Writing MetadataGetter for method: System::Data::ExceptionBuilder::EnumeratorModified
// Il2CppName: EnumeratorModified
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&System::Data::ExceptionBuilder::EnumeratorModified)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::ExceptionBuilder*), "EnumeratorModified", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
