// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.IFilter
#include "System/Data/IFilter.hpp"
// Including type: System.Data.Common.StorageType
#include "System/Data/Common/StorageType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: ExpressionNode
  class ExpressionNode;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataColumn
  class DataColumn;
  // Forward declaring type: DataRow
  class DataRow;
  // Forward declaring type: DataRowVersion
  struct DataRowVersion;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: DataExpression
  class DataExpression;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::DataExpression);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::DataExpression*, "System.Data", "DataExpression");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.DataExpression
  // [TokenAttribute] Offset: FFFFFFFF
  class DataExpression : public ::Il2CppObject/*, public ::System::Data::IFilter*/ {
    public:
    public:
    // System.String _originalExpression
    // Size: 0x8
    // Offset: 0x10
    ::StringW originalExpression;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _parsed
    // Size: 0x1
    // Offset: 0x18
    bool parsed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _bound
    // Size: 0x1
    // Offset: 0x19
    bool bound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bound and: expr
    char __padding2[0x6] = {};
    // private System.Data.ExpressionNode _expr
    // Size: 0x8
    // Offset: 0x20
    ::System::Data::ExpressionNode* expr;
    // Field size check
    static_assert(sizeof(::System::Data::ExpressionNode*) == 0x8);
    // private System.Data.DataTable _table
    // Size: 0x8
    // Offset: 0x28
    ::System::Data::DataTable* table;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    // private readonly System.Data.Common.StorageType _storageType
    // Size: 0x4
    // Offset: 0x30
    ::System::Data::Common::StorageType storageType;
    // Field size check
    static_assert(sizeof(::System::Data::Common::StorageType) == 0x4);
    // Padding between fields: storageType and: dataType
    char __padding5[0x4] = {};
    // private readonly System.Type _dataType
    // Size: 0x8
    // Offset: 0x38
    ::System::Type* dataType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    // private System.Data.DataColumn[] _dependency
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::System::Data::DataColumn*> dependency;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::DataColumn*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Data::IFilter
    operator ::System::Data::IFilter() noexcept {
      return *reinterpret_cast<::System::Data::IFilter*>(this);
    }
    // Get instance field reference: System.String _originalExpression
    [[deprecated("Use field access instead!")]] ::StringW& dyn__originalExpression();
    // Get instance field reference: private System.Boolean _parsed
    [[deprecated("Use field access instead!")]] bool& dyn__parsed();
    // Get instance field reference: private System.Boolean _bound
    [[deprecated("Use field access instead!")]] bool& dyn__bound();
    // Get instance field reference: private System.Data.ExpressionNode _expr
    [[deprecated("Use field access instead!")]] ::System::Data::ExpressionNode*& dyn__expr();
    // Get instance field reference: private System.Data.DataTable _table
    [[deprecated("Use field access instead!")]] ::System::Data::DataTable*& dyn__table();
    // Get instance field reference: private readonly System.Data.Common.StorageType _storageType
    [[deprecated("Use field access instead!")]] ::System::Data::Common::StorageType& dyn__storageType();
    // Get instance field reference: private readonly System.Type _dataType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn__dataType();
    // Get instance field reference: private System.Data.DataColumn[] _dependency
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Data::DataColumn*>& dyn__dependency();
    // System.String get_Expression()
    // Offset: 0xF983D4
    ::StringW get_Expression();
    // System.Boolean get_HasValue()
    // Offset: 0xF98428
    bool get_HasValue();
    // System.Void .ctor(System.Data.DataTable table, System.String expression)
    // Offset: 0xF980E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataExpression* New_ctor(::System::Data::DataTable* table, ::StringW expression) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::DataExpression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataExpression*, creationType>(table, expression)));
    }
    // System.Void .ctor(System.Data.DataTable table, System.String expression, System.Type type)
    // Offset: 0xF980EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataExpression* New_ctor(::System::Data::DataTable* table, ::StringW expression, ::System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::DataExpression::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataExpression*, creationType>(table, expression, type)));
    }
    // System.Void Bind(System.Data.DataTable table)
    // Offset: 0xF982E0
    void Bind(::System::Data::DataTable* table);
    // System.Boolean DependsOn(System.Data.DataColumn column)
    // Offset: 0xF95E20
    bool DependsOn(::System::Data::DataColumn* column);
    // System.Object Evaluate()
    // Offset: 0xF98438
    ::Il2CppObject* Evaluate();
    // System.Object Evaluate(System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0xF98444
    ::Il2CppObject* Evaluate(::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
    // public System.Boolean Invoke(System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0xF98664
    bool Invoke(::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
    // System.Data.DataColumn[] GetDependency()
    // Offset: 0xF98A3C
    ::ArrayW<::System::Data::DataColumn*> GetDependency();
    // System.Boolean IsTableAggregate()
    // Offset: 0xF98A44
    bool IsTableAggregate();
    // static System.Boolean IsUnknown(System.Object value)
    // Offset: 0xF98A5C
    static bool IsUnknown(::Il2CppObject* value);
    // System.Boolean HasLocalAggregate()
    // Offset: 0xF98AC0
    bool HasLocalAggregate();
    // System.Boolean HasRemoteAggregate()
    // Offset: 0xF98AD8
    bool HasRemoteAggregate();
    // static System.Boolean ToBoolean(System.Object value)
    // Offset: 0xF9874C
    static bool ToBoolean(::Il2CppObject* value);
  }; // System.Data.DataExpression
  #pragma pack(pop)
  static check_size<sizeof(DataExpression), 64 + sizeof(::ArrayW<::System::Data::DataColumn*>)> __System_Data_DataExpressionSizeCheck;
  static_assert(sizeof(DataExpression) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::DataExpression::get_Expression
// Il2CppName: get_Expression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataExpression::*)()>(&System::Data::DataExpression::get_Expression)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "get_Expression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::get_HasValue
// Il2CppName: get_HasValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataExpression::*)()>(&System::Data::DataExpression::get_HasValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "get_HasValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::DataExpression::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::DataExpression::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataExpression::*)(::System::Data::DataTable*)>(&System::Data::DataExpression::Bind)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::DependsOn
// Il2CppName: DependsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataExpression::*)(::System::Data::DataColumn*)>(&System::Data::DataExpression::DependsOn)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "DependsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::DataExpression::*)()>(&System::Data::DataExpression::Evaluate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::DataExpression::*)(::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::DataExpression::Evaluate)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, version});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataExpression::*)(::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::DataExpression::Invoke)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, version});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::GetDependency
// Il2CppName: GetDependency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataColumn*> (System::Data::DataExpression::*)()>(&System::Data::DataExpression::GetDependency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "GetDependency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::IsTableAggregate
// Il2CppName: IsTableAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataExpression::*)()>(&System::Data::DataExpression::IsTableAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "IsTableAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::IsUnknown
// Il2CppName: IsUnknown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*)>(&System::Data::DataExpression::IsUnknown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "IsUnknown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::HasLocalAggregate
// Il2CppName: HasLocalAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataExpression::*)()>(&System::Data::DataExpression::HasLocalAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "HasLocalAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::HasRemoteAggregate
// Il2CppName: HasRemoteAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataExpression::*)()>(&System::Data::DataExpression::HasRemoteAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "HasRemoteAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataExpression::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*)>(&System::Data::DataExpression::ToBoolean)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataExpression*), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
