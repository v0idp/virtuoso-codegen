// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.MarshalByValueComponent
#include "System/ComponentModel/MarshalByValueComponent.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataViewSettingCollection
  class DataViewSettingCollection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: NotSupportedException
  class NotSupportedException;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: DataViewManager
  class DataViewManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::DataViewManager);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::DataViewManager*, "System.Data", "DataViewManager");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.DataViewManager
  // [TokenAttribute] Offset: FFFFFFFF
  class DataViewManager : public ::System::ComponentModel::MarshalByValueComponent {
    public:
    public:
    // private System.Data.DataViewSettingCollection _dataViewSettingsCollection
    // Size: 0x8
    // Offset: 0x20
    ::System::Data::DataViewSettingCollection* dataViewSettingsCollection;
    // Field size check
    static_assert(sizeof(::System::Data::DataViewSettingCollection*) == 0x8);
    // System.Int32 _nViews
    // Size: 0x4
    // Offset: 0x28
    int nViews;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private System.NotSupportedException s_notSupported
    static ::System::NotSupportedException* _get_s_notSupported();
    // Set static field: static private System.NotSupportedException s_notSupported
    static void _set_s_notSupported(::System::NotSupportedException* value);
    // Get instance field reference: private System.Data.DataViewSettingCollection _dataViewSettingsCollection
    [[deprecated]] ::System::Data::DataViewSettingCollection*& dyn__dataViewSettingsCollection();
    // Get instance field reference: System.Int32 _nViews
    [[deprecated]] int& dyn__nViews();
    // public System.Data.DataViewSettingCollection get_DataViewSettings()
    // Offset: 0x12E7A34
    ::System::Data::DataViewSettingCollection* get_DataViewSettings();
    // static private System.Void .cctor()
    // Offset: 0x12E7A3C
    // Implemented from: System.ComponentModel.MarshalByValueComponent
    // Base method: System.Void MarshalByValueComponent::.cctor()
    static void _cctor();
  }; // System.Data.DataViewManager
  #pragma pack(pop)
  static check_size<sizeof(DataViewManager), 40 + sizeof(int)> __System_Data_DataViewManagerSizeCheck;
  static_assert(sizeof(DataViewManager) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::DataViewManager::get_DataViewSettings
// Il2CppName: get_DataViewSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataViewSettingCollection* (System::Data::DataViewManager::*)()>(&System::Data::DataViewManager::get_DataViewSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataViewManager*), "get_DataViewSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataViewManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Data::DataViewManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataViewManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
