// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.ExpressionNode
#include "System/Data/ExpressionNode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataRow
  class DataRow;
  // Forward declaring type: DataRowVersion
  struct DataRowVersion;
  // Forward declaring type: DataColumn
  class DataColumn;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Data::Common
namespace System::Data::Common {
  // Forward declaring type: StorageType
  struct StorageType;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CompareInfo
  class CompareInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: BinaryNode
  class BinaryNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::BinaryNode);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::BinaryNode*, "System.Data", "BinaryNode");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.BinaryNode
  // [TokenAttribute] Offset: FFFFFFFF
  class BinaryNode : public ::System::Data::ExpressionNode {
    public:
    // Nested type: ::System::Data::BinaryNode::DataTypePrecedence
    struct DataTypePrecedence;
    public:
    // System.Int32 _op
    // Size: 0x4
    // Offset: 0x18
    int op;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: op and: left
    char __padding0[0x4] = {};
    // System.Data.ExpressionNode _left
    // Size: 0x8
    // Offset: 0x20
    ::System::Data::ExpressionNode* left;
    // Field size check
    static_assert(sizeof(::System::Data::ExpressionNode*) == 0x8);
    // System.Data.ExpressionNode _right
    // Size: 0x8
    // Offset: 0x28
    ::System::Data::ExpressionNode* right;
    // Field size check
    static_assert(sizeof(::System::Data::ExpressionNode*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Data::DataTable*
    constexpr operator ::System::Data::DataTable*() const noexcept = delete;
    // Get instance field reference: System.Int32 _op
    [[deprecated]] int& dyn__op();
    // Get instance field reference: System.Data.ExpressionNode _left
    [[deprecated]] ::System::Data::ExpressionNode*& dyn__left();
    // Get instance field reference: System.Data.ExpressionNode _right
    [[deprecated]] ::System::Data::ExpressionNode*& dyn__right();
    // System.Void .ctor(System.Data.DataTable table, System.Int32 op, System.Data.ExpressionNode left, System.Data.ExpressionNode right)
    // Offset: 0x14A4F58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BinaryNode* New_ctor(::System::Data::DataTable* table, int op, ::System::Data::ExpressionNode* left, ::System::Data::ExpressionNode* right) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::BinaryNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BinaryNode*, creationType>(table, op, left, right)));
    }
    // System.Void SetTypeMismatchError(System.Int32 op, System.Type left, System.Type right)
    // Offset: 0x14AB4D8
    void SetTypeMismatchError(int op, ::System::Type* left, ::System::Type* right);
    // static private System.Object Eval(System.Data.ExpressionNode expr, System.Data.DataRow row, System.Data.DataRowVersion version, System.Int32[] recordNos)
    // Offset: 0x14AB514
    static ::Il2CppObject* Eval(::System::Data::ExpressionNode* expr, ::System::Data::DataRow* row, ::System::Data::DataRowVersion version, ::ArrayW<int> recordNos);
    // System.Int32 BinaryCompare(System.Object vLeft, System.Object vRight, System.Data.Common.StorageType resultType, System.Int32 op)
    // Offset: 0x14AB540
    int BinaryCompare(::Il2CppObject* vLeft, ::Il2CppObject* vRight, ::System::Data::Common::StorageType resultType, int op);
    // System.Int32 BinaryCompare(System.Object vLeft, System.Object vRight, System.Data.Common.StorageType resultType, System.Int32 op, System.Globalization.CompareInfo comparer)
    // Offset: 0x14AB548
    int BinaryCompare(::Il2CppObject* vLeft, ::Il2CppObject* vRight, ::System::Data::Common::StorageType resultType, int op, ::System::Globalization::CompareInfo* comparer);
    // private System.Object EvalBinaryOp(System.Int32 op, System.Data.ExpressionNode left, System.Data.ExpressionNode right, System.Data.DataRow row, System.Data.DataRowVersion version, System.Int32[] recordNos)
    // Offset: 0x14A5028
    ::Il2CppObject* EvalBinaryOp(int op, ::System::Data::ExpressionNode* left, ::System::Data::ExpressionNode* right, ::System::Data::DataRow* row, ::System::Data::DataRowVersion version, ::ArrayW<int> recordNos);
    // private System.Data.BinaryNode/System.Data.DataTypePrecedence GetPrecedence(System.Data.Common.StorageType storageType)
    // Offset: 0x14ACBA8
    ::System::Data::BinaryNode::DataTypePrecedence GetPrecedence(::System::Data::Common::StorageType storageType);
    // static private System.Data.Common.StorageType GetPrecedenceType(System.Data.BinaryNode/System.Data.DataTypePrecedence code)
    // Offset: 0x14ACBCC
    static ::System::Data::Common::StorageType GetPrecedenceType(::System::Data::BinaryNode::DataTypePrecedence code);
    // private System.Boolean IsMixed(System.Data.Common.StorageType left, System.Data.Common.StorageType right)
    // Offset: 0x14ACBF0
    bool IsMixed(::System::Data::Common::StorageType left, ::System::Data::Common::StorageType right);
    // private System.Boolean IsMixedSql(System.Data.Common.StorageType left, System.Data.Common.StorageType right)
    // Offset: 0x14ACC60
    bool IsMixedSql(::System::Data::Common::StorageType left, ::System::Data::Common::StorageType right);
    // System.Data.Common.StorageType ResultType(System.Data.Common.StorageType left, System.Data.Common.StorageType right, System.Boolean lc, System.Boolean rc, System.Int32 op)
    // Offset: 0x14AC7C0
    ::System::Data::Common::StorageType ResultType(::System::Data::Common::StorageType left, ::System::Data::Common::StorageType right, bool lc, bool rc, int op);
    // System.Data.Common.StorageType ResultSqlType(System.Data.Common.StorageType left, System.Data.Common.StorageType right, System.Boolean lc, System.Boolean rc, System.Int32 op)
    // Offset: 0x14AC43C
    ::System::Data::Common::StorageType ResultSqlType(::System::Data::Common::StorageType left, ::System::Data::Common::StorageType right, bool lc, bool rc, int op);
    // private System.Int32 SqlResultType(System.Int32 typeCode)
    // Offset: 0x14ACCD0
    int SqlResultType(int typeCode);
    // override System.Void Bind(System.Data.DataTable table, System.Collections.Generic.List`1<System.Data.DataColumn> list)
    // Offset: 0x14A4F98
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Void ExpressionNode::Bind(System.Data.DataTable table, System.Collections.Generic.List`1<System.Data.DataColumn> list)
    void Bind(::System::Data::DataTable* table, ::System::Collections::Generic::List_1<::System::Data::DataColumn*>* list);
    // override System.Object Eval()
    // Offset: 0x14A4FF8
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Object ExpressionNode::Eval()
    ::Il2CppObject* Eval();
    // override System.Object Eval(System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0x14A500C
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Object ExpressionNode::Eval(System.Data.DataRow row, System.Data.DataRowVersion version)
    ::Il2CppObject* Eval(::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
    // override System.Object Eval(System.Int32[] recordNos)
    // Offset: 0x14AAD98
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Object ExpressionNode::Eval(System.Int32[] recordNos)
    ::Il2CppObject* Eval(::ArrayW<int> recordNos);
    // override System.Boolean IsConstant()
    // Offset: 0x14AADB4
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::IsConstant()
    bool IsConstant();
    // override System.Boolean IsTableConstant()
    // Offset: 0x14AAE0C
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::IsTableConstant()
    bool IsTableConstant();
    // override System.Boolean HasLocalAggregate()
    // Offset: 0x14AAE64
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::HasLocalAggregate()
    bool HasLocalAggregate();
    // override System.Boolean HasRemoteAggregate()
    // Offset: 0x14AAEBC
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::HasRemoteAggregate()
    bool HasRemoteAggregate();
    // override System.Boolean DependsOn(System.Data.DataColumn column)
    // Offset: 0x14AAF14
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Boolean ExpressionNode::DependsOn(System.Data.DataColumn column)
    bool DependsOn(::System::Data::DataColumn* column);
    // override System.Data.ExpressionNode Optimize()
    // Offset: 0x14AAF7C
    // Implemented from: System.Data.ExpressionNode
    // Base method: System.Data.ExpressionNode ExpressionNode::Optimize()
    ::System::Data::ExpressionNode* Optimize();
  }; // System.Data.BinaryNode
  #pragma pack(pop)
  static check_size<sizeof(BinaryNode), 40 + sizeof(::System::Data::ExpressionNode*)> __System_Data_BinaryNodeSizeCheck;
  static_assert(sizeof(BinaryNode) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::BinaryNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::BinaryNode::SetTypeMismatchError
// Il2CppName: SetTypeMismatchError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::BinaryNode::*)(int, ::System::Type*, ::System::Type*)>(&System::Data::BinaryNode::SetTypeMismatchError)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "SetTypeMismatchError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op, left, right});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::Eval
// Il2CppName: Eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::System::Data::ExpressionNode*, ::System::Data::DataRow*, ::System::Data::DataRowVersion, ::ArrayW<int>)>(&System::Data::BinaryNode::Eval)> {
  static const MethodInfo* get() {
    static auto* expr = &::il2cpp_utils::GetClassFromName("System.Data", "ExpressionNode")->byval_arg;
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    static auto* recordNos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "Eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expr, row, version, recordNos});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::BinaryCompare
// Il2CppName: BinaryCompare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::BinaryNode::*)(::Il2CppObject*, ::Il2CppObject*, ::System::Data::Common::StorageType, int)>(&System::Data::BinaryNode::BinaryCompare)> {
  static const MethodInfo* get() {
    static auto* vLeft = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* vRight = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* resultType = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "BinaryCompare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vLeft, vRight, resultType, op});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::BinaryCompare
// Il2CppName: BinaryCompare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::BinaryNode::*)(::Il2CppObject*, ::Il2CppObject*, ::System::Data::Common::StorageType, int, ::System::Globalization::CompareInfo*)>(&System::Data::BinaryNode::BinaryCompare)> {
  static const MethodInfo* get() {
    static auto* vLeft = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* vRight = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* resultType = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "BinaryCompare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vLeft, vRight, resultType, op, comparer});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::EvalBinaryOp
// Il2CppName: EvalBinaryOp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::BinaryNode::*)(int, ::System::Data::ExpressionNode*, ::System::Data::ExpressionNode*, ::System::Data::DataRow*, ::System::Data::DataRowVersion, ::ArrayW<int>)>(&System::Data::BinaryNode::EvalBinaryOp)> {
  static const MethodInfo* get() {
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* left = &::il2cpp_utils::GetClassFromName("System.Data", "ExpressionNode")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System.Data", "ExpressionNode")->byval_arg;
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    static auto* recordNos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "EvalBinaryOp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{op, left, right, row, version, recordNos});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::GetPrecedence
// Il2CppName: GetPrecedence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::BinaryNode::DataTypePrecedence (System::Data::BinaryNode::*)(::System::Data::Common::StorageType)>(&System::Data::BinaryNode::GetPrecedence)> {
  static const MethodInfo* get() {
    static auto* storageType = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "GetPrecedence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storageType});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::GetPrecedenceType
// Il2CppName: GetPrecedenceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Common::StorageType (*)(::System::Data::BinaryNode::DataTypePrecedence)>(&System::Data::BinaryNode::GetPrecedenceType)> {
  static const MethodInfo* get() {
    static auto* code = &::il2cpp_utils::GetClassFromName("System.Data", "BinaryNode/DataTypePrecedence")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "GetPrecedenceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{code});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::IsMixed
// Il2CppName: IsMixed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::BinaryNode::*)(::System::Data::Common::StorageType, ::System::Data::Common::StorageType)>(&System::Data::BinaryNode::IsMixed)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "IsMixed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::IsMixedSql
// Il2CppName: IsMixedSql
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::BinaryNode::*)(::System::Data::Common::StorageType, ::System::Data::Common::StorageType)>(&System::Data::BinaryNode::IsMixedSql)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "IsMixedSql", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::ResultType
// Il2CppName: ResultType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Common::StorageType (System::Data::BinaryNode::*)(::System::Data::Common::StorageType, ::System::Data::Common::StorageType, bool, bool, int)>(&System::Data::BinaryNode::ResultType)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* lc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* rc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "ResultType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, lc, rc, op});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::ResultSqlType
// Il2CppName: ResultSqlType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Common::StorageType (System::Data::BinaryNode::*)(::System::Data::Common::StorageType, ::System::Data::Common::StorageType, bool, bool, int)>(&System::Data::BinaryNode::ResultSqlType)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* lc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* rc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* op = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "ResultSqlType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, lc, rc, op});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::SqlResultType
// Il2CppName: SqlResultType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::BinaryNode::*)(int)>(&System::Data::BinaryNode::SqlResultType)> {
  static const MethodInfo* get() {
    static auto* typeCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "SqlResultType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeCode});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::Bind
// Il2CppName: Bind
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::BinaryNode::*)(::System::Data::DataTable*, ::System::Collections::Generic::List_1<::System::Data::DataColumn*>*)>(&System::Data::BinaryNode::Bind)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "Bind", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, list});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::Eval
// Il2CppName: Eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::BinaryNode::*)()>(&System::Data::BinaryNode::Eval)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "Eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::Eval
// Il2CppName: Eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::BinaryNode::*)(::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::BinaryNode::Eval)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "Eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, version});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::Eval
// Il2CppName: Eval
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::BinaryNode::*)(::ArrayW<int>)>(&System::Data::BinaryNode::Eval)> {
  static const MethodInfo* get() {
    static auto* recordNos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "Eval", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordNos});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::IsConstant
// Il2CppName: IsConstant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::BinaryNode::*)()>(&System::Data::BinaryNode::IsConstant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "IsConstant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::IsTableConstant
// Il2CppName: IsTableConstant
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::BinaryNode::*)()>(&System::Data::BinaryNode::IsTableConstant)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "IsTableConstant", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::HasLocalAggregate
// Il2CppName: HasLocalAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::BinaryNode::*)()>(&System::Data::BinaryNode::HasLocalAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "HasLocalAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::HasRemoteAggregate
// Il2CppName: HasRemoteAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::BinaryNode::*)()>(&System::Data::BinaryNode::HasRemoteAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "HasRemoteAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::DependsOn
// Il2CppName: DependsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::BinaryNode::*)(::System::Data::DataColumn*)>(&System::Data::BinaryNode::DependsOn)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "DependsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::BinaryNode::Optimize
// Il2CppName: Optimize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::ExpressionNode* (System::Data::BinaryNode::*)()>(&System::Data::BinaryNode::Optimize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::BinaryNode*), "Optimize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
