// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.IndexField
#include "System/Data/IndexField.hpp"
// Including type: System.Data.DataViewRowState
#include "System/Data/DataViewRowState.hpp"
// Including type: System.Data.RBTree`1
#include "System/Data/RBTree_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataRow
  class DataRow;
  // Forward declaring type: Listeners`1<TElem>
  template<typename TElem>
  class Listeners_1;
  // Forward declaring type: DataViewListener
  class DataViewListener;
  // Forward declaring type: IFilter
  class IFilter;
  // Forward declaring type: DataColumnCollection
  class DataColumnCollection;
  // Forward declaring type: Range
  struct Range;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
  // Forward declaring type: WeakReference
  class WeakReference;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: ListChangedType
  struct ListChangedType;
  // Forward declaring type: ListChangedEventArgs
  class ListChangedEventArgs;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: Index
  class Index;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::Index);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::Index*, "System.Data", "Index");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.Index
  // [TokenAttribute] Offset: FFFFFFFF
  class Index : public ::Il2CppObject {
    public:
    // Nested type: ::System::Data::Index::IndexTree
    class IndexTree;
    // Nested type: ::System::Data::Index::$$c
    class $$c;
    // Nested type: ::System::Data::Index::$$c__DisplayClass86_0
    class $$c__DisplayClass86_0;
    public:
    // private readonly System.Data.DataTable _table
    // Size: 0x8
    // Offset: 0x10
    ::System::Data::DataTable* table;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    // readonly System.Data.IndexField[] _indexFields
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::Data::IndexField> indexFields;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::IndexField>) == 0x8);
    // private readonly System.Comparison`1<System.Data.DataRow> _comparison
    // Size: 0x8
    // Offset: 0x20
    ::System::Comparison_1<::System::Data::DataRow*>* comparison;
    // Field size check
    static_assert(sizeof(::System::Comparison_1<::System::Data::DataRow*>*) == 0x8);
    // private readonly System.Data.DataViewRowState _recordStates
    // Size: 0x4
    // Offset: 0x28
    ::System::Data::DataViewRowState recordStates;
    // Field size check
    static_assert(sizeof(::System::Data::DataViewRowState) == 0x4);
    // Padding between fields: recordStates and: rowFilter
    char __padding3[0x4] = {};
    // private System.WeakReference _rowFilter
    // Size: 0x8
    // Offset: 0x30
    ::System::WeakReference* rowFilter;
    // Field size check
    static_assert(sizeof(::System::WeakReference*) == 0x8);
    // private System.Data.Index/System.Data.IndexTree _records
    // Size: 0x8
    // Offset: 0x38
    ::System::Data::Index::IndexTree* records;
    // Field size check
    static_assert(sizeof(::System::Data::Index::IndexTree*) == 0x8);
    // private System.Int32 _recordCount
    // Size: 0x4
    // Offset: 0x40
    int recordCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _refCount
    // Size: 0x4
    // Offset: 0x44
    int refCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Data.Listeners`1<System.Data.DataViewListener> _listeners
    // Size: 0x8
    // Offset: 0x48
    ::System::Data::Listeners_1<::System::Data::DataViewListener*>* listeners;
    // Field size check
    static_assert(sizeof(::System::Data::Listeners_1<::System::Data::DataViewListener*>*) == 0x8);
    // private System.Boolean _suspendEvents
    // Size: 0x1
    // Offset: 0x50
    bool suspendEvents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean _isSharable
    // Size: 0x1
    // Offset: 0x51
    bool isSharable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean _hasRemoteAggregate
    // Size: 0x1
    // Offset: 0x52
    bool hasRemoteAggregate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasRemoteAggregate and: objectID
    char __padding11[0x1] = {};
    // private readonly System.Int32 _objectID
    // Size: 0x4
    // Offset: 0x54
    int objectID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private System.Int32 s_objectTypeCount
    static int _get_s_objectTypeCount();
    // Set static field: static private System.Int32 s_objectTypeCount
    static void _set_s_objectTypeCount(int value);
    // Get instance field reference: private readonly System.Data.DataTable _table
    [[deprecated("Use field access instead!")]] ::System::Data::DataTable*& dyn__table();
    // Get instance field reference: readonly System.Data.IndexField[] _indexFields
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Data::IndexField>& dyn__indexFields();
    // Get instance field reference: private readonly System.Comparison`1<System.Data.DataRow> _comparison
    [[deprecated("Use field access instead!")]] ::System::Comparison_1<::System::Data::DataRow*>*& dyn__comparison();
    // Get instance field reference: private readonly System.Data.DataViewRowState _recordStates
    [[deprecated("Use field access instead!")]] ::System::Data::DataViewRowState& dyn__recordStates();
    // Get instance field reference: private System.WeakReference _rowFilter
    [[deprecated("Use field access instead!")]] ::System::WeakReference*& dyn__rowFilter();
    // Get instance field reference: private System.Data.Index/System.Data.IndexTree _records
    [[deprecated("Use field access instead!")]] ::System::Data::Index::IndexTree*& dyn__records();
    // Get instance field reference: private System.Int32 _recordCount
    [[deprecated("Use field access instead!")]] int& dyn__recordCount();
    // Get instance field reference: private System.Int32 _refCount
    [[deprecated("Use field access instead!")]] int& dyn__refCount();
    // Get instance field reference: private System.Data.Listeners`1<System.Data.DataViewListener> _listeners
    [[deprecated("Use field access instead!")]] ::System::Data::Listeners_1<::System::Data::DataViewListener*>*& dyn__listeners();
    // Get instance field reference: private System.Boolean _suspendEvents
    [[deprecated("Use field access instead!")]] bool& dyn__suspendEvents();
    // Get instance field reference: private readonly System.Boolean _isSharable
    [[deprecated("Use field access instead!")]] bool& dyn__isSharable();
    // Get instance field reference: private readonly System.Boolean _hasRemoteAggregate
    [[deprecated("Use field access instead!")]] bool& dyn__hasRemoteAggregate();
    // Get instance field reference: private readonly System.Int32 _objectID
    [[deprecated("Use field access instead!")]] int& dyn__objectID();
    // System.Boolean get_HasRemoteAggregate()
    // Offset: 0x13B01D4
    bool get_HasRemoteAggregate();
    // System.Int32 get_ObjectID()
    // Offset: 0x13B01DC
    int get_ObjectID();
    // public System.Data.DataViewRowState get_RecordStates()
    // Offset: 0x13B01E4
    ::System::Data::DataViewRowState get_RecordStates();
    // public System.Data.IFilter get_RowFilter()
    // Offset: 0x13B01EC
    ::System::Data::IFilter* get_RowFilter();
    // public System.Boolean get_HasDuplicates()
    // Offset: 0x13B02CC
    bool get_HasDuplicates();
    // public System.Int32 get_RecordCount()
    // Offset: 0x13B0320
    int get_RecordCount();
    // public System.Int32 get_RefCount()
    // Offset: 0x13B0604
    int get_RefCount();
    // private System.Boolean get_DoListChanged()
    // Offset: 0x13B2104
    bool get_DoListChanged();
    // System.Data.DataTable get_Table()
    // Offset: 0x13B2E94
    ::System::Data::DataTable* get_Table();
    // public System.Void .ctor(System.Data.DataTable table, System.Data.IndexField[] indexFields, System.Data.DataViewRowState recordStates, System.Data.IFilter rowFilter)
    // Offset: 0x13AF91C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Index* New_ctor(::System::Data::DataTable* table, ::ArrayW<::System::Data::IndexField> indexFields, ::System::Data::DataViewRowState recordStates, ::System::Data::IFilter* rowFilter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Index::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Index*, creationType>(table, indexFields, recordStates, rowFilter)));
    }
    // public System.Void .ctor(System.Data.DataTable table, System.Comparison`1<System.Data.DataRow> comparison, System.Data.DataViewRowState recordStates, System.Data.IFilter rowFilter)
    // Offset: 0x13AFC20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Index* New_ctor(::System::Data::DataTable* table, ::System::Comparison_1<::System::Data::DataRow*>* comparison, ::System::Data::DataViewRowState recordStates, ::System::Data::IFilter* rowFilter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Index::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Index*, creationType>(table, comparison, recordStates, rowFilter)));
    }
    // private System.Void .ctor(System.Data.DataTable table, System.Data.IndexField[] indexFields, System.Comparison`1<System.Data.DataRow> comparison, System.Data.DataViewRowState recordStates, System.Data.IFilter rowFilter)
    // Offset: 0x13AF92C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Index* New_ctor(::System::Data::DataTable* table, ::ArrayW<::System::Data::IndexField> indexFields, ::System::Comparison_1<::System::Data::DataRow*>* comparison, ::System::Data::DataViewRowState recordStates, ::System::Data::IFilter* rowFilter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Index::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Index*, creationType>(table, indexFields, comparison, recordStates, rowFilter)));
    }
    // static private System.Data.IndexField[] GetAllFields(System.Data.DataColumnCollection columns)
    // Offset: 0x13AFC84
    static ::ArrayW<::System::Data::IndexField> GetAllFields(::System::Data::DataColumnCollection* columns);
    // public System.Boolean Equal(System.Data.IndexField[] indexDesc, System.Data.DataViewRowState recordStates, System.Data.IFilter rowFilter)
    // Offset: 0x13B010C
    bool Equal(::ArrayW<::System::Data::IndexField> indexDesc, ::System::Data::DataViewRowState recordStates, ::System::Data::IFilter* rowFilter);
    // public System.Int32 GetRecord(System.Int32 recordIndex)
    // Offset: 0x13B0268
    int GetRecord(int recordIndex);
    // private System.Boolean AcceptRecord(System.Int32 record)
    // Offset: 0x13B0328
    bool AcceptRecord(int record);
    // private System.Boolean AcceptRecord(System.Int32 record, System.Data.IFilter filter)
    // Offset: 0x13B0358
    bool AcceptRecord(int record, ::System::Data::IFilter* filter);
    // System.Void ListChangedAdd(System.Data.DataViewListener listener)
    // Offset: 0x13B053C
    void ListChangedAdd(::System::Data::DataViewListener* listener);
    // System.Void ListChangedRemove(System.Data.DataViewListener listener)
    // Offset: 0x13B05A0
    void ListChangedRemove(::System::Data::DataViewListener* listener);
    // public System.Void AddRef()
    // Offset: 0x13B060C
    void AddRef();
    // public System.Int32 RemoveRef()
    // Offset: 0x13B07B8
    int RemoveRef();
    // private System.Void ApplyChangeAction(System.Int32 record, System.Int32 action, System.Int32 changeRecord)
    // Offset: 0x13B0974
    void ApplyChangeAction(int record, int action, int changeRecord);
    // public System.Boolean CheckUnique()
    // Offset: 0x13B0DD4
    bool CheckUnique();
    // private System.Int32 CompareRecords(System.Int32 record1, System.Int32 record2)
    // Offset: 0x13B0DF0
    int CompareRecords(int record1, int record2);
    // private System.Int32 CompareDataRows(System.Int32 record1, System.Int32 record2)
    // Offset: 0x13B0F54
    int CompareDataRows(int record1, int record2);
    // private System.Int32 CompareDuplicateRecords(System.Int32 record1, System.Int32 record2)
    // Offset: 0x13B0FF8
    int CompareDuplicateRecords(int record1, int record2);
    // private System.Int32 CompareRecordToKey(System.Int32 record1, System.Object[] vals)
    // Offset: 0x13B114C
    int CompareRecordToKey(int record1, ::ArrayW<::Il2CppObject*> vals);
    // public System.Void DeleteRecordFromIndex(System.Int32 recordIndex)
    // Offset: 0x13B1228
    void DeleteRecordFromIndex(int recordIndex);
    // private System.Void DeleteRecord(System.Int32 recordIndex)
    // Offset: 0x13B0D68
    void DeleteRecord(int recordIndex);
    // private System.Void DeleteRecord(System.Int32 recordIndex, System.Boolean fireEvent)
    // Offset: 0x13B1230
    void DeleteRecord(int recordIndex, bool fireEvent);
    // public System.Data.RBTree`1/System.Data.RBTreeEnumerator<System.Int32> GetEnumerator(System.Int32 startIndex)
    // Offset: 0x13B1528
    typename ::System::Data::RBTree_1<int>::RBTreeEnumerator GetEnumerator(int startIndex);
    // public System.Int32 GetIndex(System.Int32 record)
    // Offset: 0x13B0D70
    int GetIndex(int record);
    // private System.Int32 GetIndex(System.Int32 record, System.Int32 changeRecord)
    // Offset: 0x13B0C1C
    int GetIndex(int record, int changeRecord);
    // public System.Object[] GetUniqueKeyValues()
    // Offset: 0x13B1594
    ::ArrayW<::Il2CppObject*> GetUniqueKeyValues();
    // private System.Int32 FindNodeByKey(System.Object originalKey)
    // Offset: 0x13B18D0
    int FindNodeByKey(::Il2CppObject* originalKey);
    // private System.Int32 FindNodeByKeys(System.Object[] originalKey)
    // Offset: 0x13B1AF8
    int FindNodeByKeys(::ArrayW<::Il2CppObject*> originalKey);
    // private System.Int32 FindNodeByKeyRecord(System.Int32 record)
    // Offset: 0x13B1D34
    int FindNodeByKeyRecord(int record);
    // private System.Data.Range GetRangeFromNode(System.Int32 nodeId)
    // Offset: 0x13B1E2C
    ::System::Data::Range GetRangeFromNode(int nodeId);
    // public System.Data.Range FindRecords(System.Object key)
    // Offset: 0x13B1FA8
    ::System::Data::Range FindRecords(::Il2CppObject* key);
    // public System.Data.Range FindRecords(System.Object[] key)
    // Offset: 0x13B1FD8
    ::System::Data::Range FindRecords(::ArrayW<::Il2CppObject*> key);
    // System.Void FireResetEvent()
    // Offset: 0x13B2008
    void FireResetEvent();
    // private System.Int32 GetChangeAction(System.Data.DataViewRowState oldState, System.Data.DataViewRowState newState)
    // Offset: 0x13B2338
    int GetChangeAction(::System::Data::DataViewRowState oldState, ::System::Data::DataViewRowState newState);
    // static private System.Int32 GetReplaceAction(System.Data.DataViewRowState oldState)
    // Offset: 0x13B2354
    static int GetReplaceAction(::System::Data::DataViewRowState oldState);
    // public System.Data.DataRow GetRow(System.Int32 i)
    // Offset: 0x13B237C
    ::System::Data::DataRow* GetRow(int i);
    // public System.Data.DataRow[] GetRows(System.Object[] values)
    // Offset: 0x13B23B4
    ::ArrayW<::System::Data::DataRow*> GetRows(::ArrayW<::Il2CppObject*> values);
    // public System.Data.DataRow[] GetRows(System.Data.Range range)
    // Offset: 0x13B23EC
    ::ArrayW<::System::Data::DataRow*> GetRows(::System::Data::Range range);
    // private System.Void InitRecords(System.Data.IFilter filter)
    // Offset: 0x13AFD64
    void InitRecords(::System::Data::IFilter* filter);
    // public System.Int32 InsertRecordToIndex(System.Int32 record)
    // Offset: 0x13B25A0
    int InsertRecordToIndex(int record);
    // private System.Int32 InsertRecord(System.Int32 record, System.Boolean fireEvent)
    // Offset: 0x13B0A1C
    int InsertRecord(int record, bool fireEvent);
    // public System.Boolean IsKeyInIndex(System.Object key)
    // Offset: 0x13B25F4
    bool IsKeyInIndex(::Il2CppObject* key);
    // public System.Boolean IsKeyInIndex(System.Object[] key)
    // Offset: 0x13B2610
    bool IsKeyInIndex(::ArrayW<::Il2CppObject*> key);
    // public System.Boolean IsKeyRecordInIndex(System.Int32 record)
    // Offset: 0x13B262C
    bool IsKeyRecordInIndex(int record);
    // private System.Void OnListChanged(System.ComponentModel.ListChangedType changedType, System.Int32 newIndex, System.Int32 oldIndex)
    // Offset: 0x13B2648
    void OnListChanged(::System::ComponentModel::ListChangedType changedType, int newIndex, int oldIndex);
    // private System.Void OnListChanged(System.ComponentModel.ListChangedType changedType, System.Int32 index)
    // Offset: 0x13B1494
    void OnListChanged(::System::ComponentModel::ListChangedType changedType, int index);
    // private System.Void OnListChanged(System.ComponentModel.ListChangedEventArgs e)
    // Offset: 0x13B2188
    void OnListChanged(::System::ComponentModel::ListChangedEventArgs* e);
    // private System.Void MaintainDataView(System.ComponentModel.ListChangedType changedType, System.Int32 record, System.Boolean trackAddRemove)
    // Offset: 0x13B1360
    void MaintainDataView(::System::ComponentModel::ListChangedType changedType, int record, bool trackAddRemove);
    // public System.Void Reset()
    // Offset: 0x13B26F0
    void Reset();
    // public System.Void RecordChanged(System.Int32 record)
    // Offset: 0x13B27C4
    void RecordChanged(int record);
    // public System.Void RecordChanged(System.Int32 oldIndex, System.Int32 newIndex)
    // Offset: 0x13B28B4
    void RecordChanged(int oldIndex, int newIndex);
    // public System.Void RecordStateChanged(System.Int32 record, System.Data.DataViewRowState oldState, System.Data.DataViewRowState newState)
    // Offset: 0x13B29F4
    void RecordStateChanged(int record, ::System::Data::DataViewRowState oldState, ::System::Data::DataViewRowState newState);
    // public System.Void RecordStateChanged(System.Int32 oldRecord, System.Data.DataViewRowState oldOldState, System.Data.DataViewRowState oldNewState, System.Int32 newRecord, System.Data.DataViewRowState newOldState, System.Data.DataViewRowState newNewState)
    // Offset: 0x13B2B08
    void RecordStateChanged(int oldRecord, ::System::Data::DataViewRowState oldOldState, ::System::Data::DataViewRowState oldNewState, int newRecord, ::System::Data::DataViewRowState newOldState, ::System::Data::DataViewRowState newNewState);
    // private System.Void GetUniqueKeyValues(System.Collections.Generic.List`1<System.Object[]> list, System.Int32 curNodeId)
    // Offset: 0x13B16F0
    void GetUniqueKeyValues(::System::Collections::Generic::List_1<::ArrayW<::Il2CppObject*>>* list, int curNodeId);
    // static System.Int32 IndexOfReference(System.Collections.Generic.List`1<T> list, T item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static int IndexOfReference(::System::Collections::Generic::List_1<T>* list, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Index::IndexOfReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System.Data", "Index", "IndexOfReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(item)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, list, item);
    }
  }; // System.Data.Index
  #pragma pack(pop)
  static check_size<sizeof(Index), 84 + sizeof(int)> __System_Data_IndexSizeCheck;
  static_assert(sizeof(Index) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::Index::get_HasRemoteAggregate
// Il2CppName: get_HasRemoteAggregate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)()>(&System::Data::Index::get_HasRemoteAggregate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_HasRemoteAggregate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::get_ObjectID
// Il2CppName: get_ObjectID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)()>(&System::Data::Index::get_ObjectID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_ObjectID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::get_RecordStates
// Il2CppName: get_RecordStates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataViewRowState (System::Data::Index::*)()>(&System::Data::Index::get_RecordStates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_RecordStates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::get_RowFilter
// Il2CppName: get_RowFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::IFilter* (System::Data::Index::*)()>(&System::Data::Index::get_RowFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_RowFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::get_HasDuplicates
// Il2CppName: get_HasDuplicates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)()>(&System::Data::Index::get_HasDuplicates)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_HasDuplicates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::get_RecordCount
// Il2CppName: get_RecordCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)()>(&System::Data::Index::get_RecordCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_RecordCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::get_RefCount
// Il2CppName: get_RefCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)()>(&System::Data::Index::get_RefCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_RefCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::get_DoListChanged
// Il2CppName: get_DoListChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)()>(&System::Data::Index::get_DoListChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_DoListChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::get_Table
// Il2CppName: get_Table
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::Index::*)()>(&System::Data::Index::get_Table)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "get_Table", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::Index::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::Index::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::Index::GetAllFields
// Il2CppName: GetAllFields
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::IndexField> (*)(::System::Data::DataColumnCollection*)>(&System::Data::Index::GetAllFields)> {
  static const MethodInfo* get() {
    static auto* columns = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumnCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetAllFields", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columns});
  }
};
// Writing MetadataGetter for method: System::Data::Index::Equal
// Il2CppName: Equal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)(::ArrayW<::System::Data::IndexField>, ::System::Data::DataViewRowState, ::System::Data::IFilter*)>(&System::Data::Index::Equal)> {
  static const MethodInfo* get() {
    static auto* indexDesc = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "IndexField"), 1)->byval_arg;
    static auto* recordStates = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* rowFilter = &::il2cpp_utils::GetClassFromName("System.Data", "IFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "Equal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexDesc, recordStates, rowFilter});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetRecord
// Il2CppName: GetRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int)>(&System::Data::Index::GetRecord)> {
  static const MethodInfo* get() {
    static auto* recordIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordIndex});
  }
};
// Writing MetadataGetter for method: System::Data::Index::AcceptRecord
// Il2CppName: AcceptRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)(int)>(&System::Data::Index::AcceptRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "AcceptRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::Index::AcceptRecord
// Il2CppName: AcceptRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)(int, ::System::Data::IFilter*)>(&System::Data::Index::AcceptRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* filter = &::il2cpp_utils::GetClassFromName("System.Data", "IFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "AcceptRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record, filter});
  }
};
// Writing MetadataGetter for method: System::Data::Index::ListChangedAdd
// Il2CppName: ListChangedAdd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(::System::Data::DataViewListener*)>(&System::Data::Index::ListChangedAdd)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "ListChangedAdd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener});
  }
};
// Writing MetadataGetter for method: System::Data::Index::ListChangedRemove
// Il2CppName: ListChangedRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(::System::Data::DataViewListener*)>(&System::Data::Index::ListChangedRemove)> {
  static const MethodInfo* get() {
    static auto* listener = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewListener")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "ListChangedRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listener});
  }
};
// Writing MetadataGetter for method: System::Data::Index::AddRef
// Il2CppName: AddRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)()>(&System::Data::Index::AddRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "AddRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::RemoveRef
// Il2CppName: RemoveRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)()>(&System::Data::Index::RemoveRef)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "RemoveRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::ApplyChangeAction
// Il2CppName: ApplyChangeAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(int, int, int)>(&System::Data::Index::ApplyChangeAction)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* changeRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "ApplyChangeAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record, action, changeRecord});
  }
};
// Writing MetadataGetter for method: System::Data::Index::CheckUnique
// Il2CppName: CheckUnique
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)()>(&System::Data::Index::CheckUnique)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "CheckUnique", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::CompareRecords
// Il2CppName: CompareRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int, int)>(&System::Data::Index::CompareRecords)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "CompareRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, record2});
  }
};
// Writing MetadataGetter for method: System::Data::Index::CompareDataRows
// Il2CppName: CompareDataRows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int, int)>(&System::Data::Index::CompareDataRows)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "CompareDataRows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, record2});
  }
};
// Writing MetadataGetter for method: System::Data::Index::CompareDuplicateRecords
// Il2CppName: CompareDuplicateRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int, int)>(&System::Data::Index::CompareDuplicateRecords)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "CompareDuplicateRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, record2});
  }
};
// Writing MetadataGetter for method: System::Data::Index::CompareRecordToKey
// Il2CppName: CompareRecordToKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int, ::ArrayW<::Il2CppObject*>)>(&System::Data::Index::CompareRecordToKey)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vals = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "CompareRecordToKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, vals});
  }
};
// Writing MetadataGetter for method: System::Data::Index::DeleteRecordFromIndex
// Il2CppName: DeleteRecordFromIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(int)>(&System::Data::Index::DeleteRecordFromIndex)> {
  static const MethodInfo* get() {
    static auto* recordIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "DeleteRecordFromIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordIndex});
  }
};
// Writing MetadataGetter for method: System::Data::Index::DeleteRecord
// Il2CppName: DeleteRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(int)>(&System::Data::Index::DeleteRecord)> {
  static const MethodInfo* get() {
    static auto* recordIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "DeleteRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordIndex});
  }
};
// Writing MetadataGetter for method: System::Data::Index::DeleteRecord
// Il2CppName: DeleteRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(int, bool)>(&System::Data::Index::DeleteRecord)> {
  static const MethodInfo* get() {
    static auto* recordIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fireEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "DeleteRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordIndex, fireEvent});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<typename ::System::Data::RBTree_1<int>::RBTreeEnumerator (System::Data::Index::*)(int)>(&System::Data::Index::GetEnumerator)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetIndex
// Il2CppName: GetIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int)>(&System::Data::Index::GetIndex)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetIndex
// Il2CppName: GetIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int, int)>(&System::Data::Index::GetIndex)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* changeRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record, changeRecord});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetUniqueKeyValues
// Il2CppName: GetUniqueKeyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Data::Index::*)()>(&System::Data::Index::GetUniqueKeyValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetUniqueKeyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::FindNodeByKey
// Il2CppName: FindNodeByKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(::Il2CppObject*)>(&System::Data::Index::FindNodeByKey)> {
  static const MethodInfo* get() {
    static auto* originalKey = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "FindNodeByKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalKey});
  }
};
// Writing MetadataGetter for method: System::Data::Index::FindNodeByKeys
// Il2CppName: FindNodeByKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(::ArrayW<::Il2CppObject*>)>(&System::Data::Index::FindNodeByKeys)> {
  static const MethodInfo* get() {
    static auto* originalKey = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "FindNodeByKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalKey});
  }
};
// Writing MetadataGetter for method: System::Data::Index::FindNodeByKeyRecord
// Il2CppName: FindNodeByKeyRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int)>(&System::Data::Index::FindNodeByKeyRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "FindNodeByKeyRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetRangeFromNode
// Il2CppName: GetRangeFromNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Range (System::Data::Index::*)(int)>(&System::Data::Index::GetRangeFromNode)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetRangeFromNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: System::Data::Index::FindRecords
// Il2CppName: FindRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Range (System::Data::Index::*)(::Il2CppObject*)>(&System::Data::Index::FindRecords)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "FindRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Data::Index::FindRecords
// Il2CppName: FindRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Range (System::Data::Index::*)(::ArrayW<::Il2CppObject*>)>(&System::Data::Index::FindRecords)> {
  static const MethodInfo* get() {
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "FindRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Data::Index::FireResetEvent
// Il2CppName: FireResetEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)()>(&System::Data::Index::FireResetEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "FireResetEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetChangeAction
// Il2CppName: GetChangeAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(::System::Data::DataViewRowState, ::System::Data::DataViewRowState)>(&System::Data::Index::GetChangeAction)> {
  static const MethodInfo* get() {
    static auto* oldState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* newState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetChangeAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldState, newState});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetReplaceAction
// Il2CppName: GetReplaceAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Data::DataViewRowState)>(&System::Data::Index::GetReplaceAction)> {
  static const MethodInfo* get() {
    static auto* oldState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetReplaceAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldState});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetRow
// Il2CppName: GetRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::Index::*)(int)>(&System::Data::Index::GetRow)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetRows
// Il2CppName: GetRows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataRow*> (System::Data::Index::*)(::ArrayW<::Il2CppObject*>)>(&System::Data::Index::GetRows)> {
  static const MethodInfo* get() {
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetRows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetRows
// Il2CppName: GetRows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataRow*> (System::Data::Index::*)(::System::Data::Range)>(&System::Data::Index::GetRows)> {
  static const MethodInfo* get() {
    static auto* range = &::il2cpp_utils::GetClassFromName("System.Data", "Range")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetRows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{range});
  }
};
// Writing MetadataGetter for method: System::Data::Index::InitRecords
// Il2CppName: InitRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(::System::Data::IFilter*)>(&System::Data::Index::InitRecords)> {
  static const MethodInfo* get() {
    static auto* filter = &::il2cpp_utils::GetClassFromName("System.Data", "IFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "InitRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filter});
  }
};
// Writing MetadataGetter for method: System::Data::Index::InsertRecordToIndex
// Il2CppName: InsertRecordToIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int)>(&System::Data::Index::InsertRecordToIndex)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "InsertRecordToIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::Index::InsertRecord
// Il2CppName: InsertRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Index::*)(int, bool)>(&System::Data::Index::InsertRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fireEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "InsertRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record, fireEvent});
  }
};
// Writing MetadataGetter for method: System::Data::Index::IsKeyInIndex
// Il2CppName: IsKeyInIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)(::Il2CppObject*)>(&System::Data::Index::IsKeyInIndex)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "IsKeyInIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Data::Index::IsKeyInIndex
// Il2CppName: IsKeyInIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)(::ArrayW<::Il2CppObject*>)>(&System::Data::Index::IsKeyInIndex)> {
  static const MethodInfo* get() {
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "IsKeyInIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Data::Index::IsKeyRecordInIndex
// Il2CppName: IsKeyRecordInIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Index::*)(int)>(&System::Data::Index::IsKeyRecordInIndex)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "IsKeyRecordInIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::Index::OnListChanged
// Il2CppName: OnListChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(::System::ComponentModel::ListChangedType, int, int)>(&System::Data::Index::OnListChanged)> {
  static const MethodInfo* get() {
    static auto* changedType = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "ListChangedType")->byval_arg;
    static auto* newIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "OnListChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changedType, newIndex, oldIndex});
  }
};
// Writing MetadataGetter for method: System::Data::Index::OnListChanged
// Il2CppName: OnListChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(::System::ComponentModel::ListChangedType, int)>(&System::Data::Index::OnListChanged)> {
  static const MethodInfo* get() {
    static auto* changedType = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "ListChangedType")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "OnListChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changedType, index});
  }
};
// Writing MetadataGetter for method: System::Data::Index::OnListChanged
// Il2CppName: OnListChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(::System::ComponentModel::ListChangedEventArgs*)>(&System::Data::Index::OnListChanged)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "ListChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "OnListChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::Index::MaintainDataView
// Il2CppName: MaintainDataView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(::System::ComponentModel::ListChangedType, int, bool)>(&System::Data::Index::MaintainDataView)> {
  static const MethodInfo* get() {
    static auto* changedType = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "ListChangedType")->byval_arg;
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* trackAddRemove = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "MaintainDataView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{changedType, record, trackAddRemove});
  }
};
// Writing MetadataGetter for method: System::Data::Index::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)()>(&System::Data::Index::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Index::RecordChanged
// Il2CppName: RecordChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(int)>(&System::Data::Index::RecordChanged)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "RecordChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::Index::RecordChanged
// Il2CppName: RecordChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(int, int)>(&System::Data::Index::RecordChanged)> {
  static const MethodInfo* get() {
    static auto* oldIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "RecordChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldIndex, newIndex});
  }
};
// Writing MetadataGetter for method: System::Data::Index::RecordStateChanged
// Il2CppName: RecordStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(int, ::System::Data::DataViewRowState, ::System::Data::DataViewRowState)>(&System::Data::Index::RecordStateChanged)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* newState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "RecordStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record, oldState, newState});
  }
};
// Writing MetadataGetter for method: System::Data::Index::RecordStateChanged
// Il2CppName: RecordStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(int, ::System::Data::DataViewRowState, ::System::Data::DataViewRowState, int, ::System::Data::DataViewRowState, ::System::Data::DataViewRowState)>(&System::Data::Index::RecordStateChanged)> {
  static const MethodInfo* get() {
    static auto* oldRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldOldState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* oldNewState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* newRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newOldState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* newNewState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "RecordStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldRecord, oldOldState, oldNewState, newRecord, newOldState, newNewState});
  }
};
// Writing MetadataGetter for method: System::Data::Index::GetUniqueKeyValues
// Il2CppName: GetUniqueKeyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Index::*)(::System::Collections::Generic::List_1<::ArrayW<::Il2CppObject*>>*, int)>(&System::Data::Index::GetUniqueKeyValues)> {
  static const MethodInfo* get() {
    static auto* list = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)})->byval_arg;
    static auto* curNodeId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::Index*), "GetUniqueKeyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{list, curNodeId});
  }
};
// Writing MetadataGetter for method: System::Data::Index::IndexOfReference
// Il2CppName: IndexOfReference
// Cannot write MetadataGetter for generic methods!
