// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Data.IndexField
#include "System/Data/IndexField.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataColumn
  class DataColumn;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: Index
  class Index;
  // Forward declaring type: DataViewRowState
  struct DataViewRowState;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: DataKey
  struct DataKey;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Data::DataKey, "System.Data", "DataKey");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Data.DataKey
  // [TokenAttribute] Offset: FFFFFFFF
  struct DataKey/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Data.DataColumn[] _columns
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<::System::Data::DataColumn*> columns;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::DataColumn*>) == 0x8);
    public:
    // Creating value type constructor for type: DataKey
    constexpr DataKey(::ArrayW<::System::Data::DataColumn*> columns_ = ::ArrayW<::System::Data::DataColumn*>(static_cast<void*>(nullptr))) noexcept : columns{columns_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::ArrayW<::System::Data::DataColumn*>
    constexpr operator ::ArrayW<::System::Data::DataColumn*>() const noexcept {
      return columns;
    }
    // Get instance field reference: private readonly System.Data.DataColumn[] _columns
    [[deprecated]] ::ArrayW<::System::Data::DataColumn*>& dyn__columns();
    // System.Data.DataColumn[] get_ColumnsReference()
    // Offset: 0xF98DB4
    ::ArrayW<::System::Data::DataColumn*> get_ColumnsReference();
    // System.Boolean get_HasValue()
    // Offset: 0xF98DBC
    bool get_HasValue();
    // System.Data.DataTable get_Table()
    // Offset: 0xF98DCC
    ::System::Data::DataTable* get_Table();
    // System.Void .ctor(System.Data.DataColumn[] columns, System.Boolean copyColumns)
    // Offset: 0xF98AF0
    DataKey(::ArrayW<::System::Data::DataColumn*> columns, bool copyColumns);
    // System.Void CheckState()
    // Offset: 0xF98D08
    void CheckState();
    // System.Boolean ColumnsEqual(System.Data.DataKey key)
    // Offset: 0xF98E08
    bool ColumnsEqual(::System::Data::DataKey key);
    // static System.Boolean ColumnsEqual(System.Data.DataColumn[] column1, System.Data.DataColumn[] column2)
    // Offset: 0xF98E10
    static bool ColumnsEqual(::ArrayW<::System::Data::DataColumn*> column1, ::ArrayW<::System::Data::DataColumn*> column2);
    // System.Boolean ContainsColumn(System.Data.DataColumn column)
    // Offset: 0xF968B4
    bool ContainsColumn(::System::Data::DataColumn* column);
    // System.Boolean Equals(System.Data.DataKey value)
    // Offset: 0xF99010
    bool Equals(::System::Data::DataKey value);
    // System.String[] GetColumnNames()
    // Offset: 0xF990D4
    ::ArrayW<::StringW> GetColumnNames();
    // System.Data.IndexField[] GetIndexDesc()
    // Offset: 0xF991C8
    ::ArrayW<::System::Data::IndexField> GetIndexDesc();
    // System.Object[] GetKeyValues(System.Int32 record)
    // Offset: 0xF992AC
    ::ArrayW<::Il2CppObject*> GetKeyValues(int record);
    // System.Data.Index GetSortIndex()
    // Offset: 0xF993B0
    ::System::Data::Index* GetSortIndex();
    // System.Data.Index GetSortIndex(System.Data.DataViewRowState recordStates)
    // Offset: 0xF993B8
    ::System::Data::Index* GetSortIndex(::System::Data::DataViewRowState recordStates);
    // System.Boolean RecordsEqual(System.Int32 record1, System.Int32 record2)
    // Offset: 0xF9941C
    bool RecordsEqual(int record1, int record2);
    // System.Data.DataColumn[] ToArray()
    // Offset: 0xF994B0
    ::ArrayW<::System::Data::DataColumn*> ToArray();
    // public override System.Int32 GetHashCode()
    // Offset: 0xF98F1C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0xF98F8C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
  }; // System.Data.DataKey
  #pragma pack(pop)
  static check_size<sizeof(DataKey), 0 + sizeof(::ArrayW<::System::Data::DataColumn*>)> __System_Data_DataKeySizeCheck;
  static_assert(sizeof(DataKey) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::DataKey::get_ColumnsReference
// Il2CppName: get_ColumnsReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataColumn*> (System::Data::DataKey::*)()>(&System::Data::DataKey::get_ColumnsReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "get_ColumnsReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::get_HasValue
// Il2CppName: get_HasValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataKey::*)()>(&System::Data::DataKey::get_HasValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "get_HasValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::get_Table
// Il2CppName: get_Table
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::DataKey::*)()>(&System::Data::DataKey::get_Table)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "get_Table", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::DataKey
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::DataKey::CheckState
// Il2CppName: CheckState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataKey::*)()>(&System::Data::DataKey::CheckState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "CheckState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::ColumnsEqual
// Il2CppName: ColumnsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataKey::*)(::System::Data::DataKey)>(&System::Data::DataKey::ColumnsEqual)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System.Data", "DataKey")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "ColumnsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::ColumnsEqual
// Il2CppName: ColumnsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::System::Data::DataColumn*>, ::ArrayW<::System::Data::DataColumn*>)>(&System::Data::DataKey::ColumnsEqual)> {
  static const MethodInfo* get() {
    static auto* column1 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "DataColumn"), 1)->byval_arg;
    static auto* column2 = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "DataColumn"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "ColumnsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column1, column2});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::ContainsColumn
// Il2CppName: ContainsColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataKey::*)(::System::Data::DataColumn*)>(&System::Data::DataKey::ContainsColumn)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "ContainsColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataKey::*)(::System::Data::DataKey)>(&System::Data::DataKey::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Data", "DataKey")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::GetColumnNames
// Il2CppName: GetColumnNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (System::Data::DataKey::*)()>(&System::Data::DataKey::GetColumnNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "GetColumnNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::GetIndexDesc
// Il2CppName: GetIndexDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::IndexField> (System::Data::DataKey::*)()>(&System::Data::DataKey::GetIndexDesc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "GetIndexDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::GetKeyValues
// Il2CppName: GetKeyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (System::Data::DataKey::*)(int)>(&System::Data::DataKey::GetKeyValues)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "GetKeyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::GetSortIndex
// Il2CppName: GetSortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Index* (System::Data::DataKey::*)()>(&System::Data::DataKey::GetSortIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "GetSortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::GetSortIndex
// Il2CppName: GetSortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Index* (System::Data::DataKey::*)(::System::Data::DataViewRowState)>(&System::Data::DataKey::GetSortIndex)> {
  static const MethodInfo* get() {
    static auto* recordStates = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "GetSortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recordStates});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::RecordsEqual
// Il2CppName: RecordsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataKey::*)(int, int)>(&System::Data::DataKey::RecordsEqual)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "RecordsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, record2});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::ToArray
// Il2CppName: ToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataColumn*> (System::Data::DataKey::*)()>(&System::Data::DataKey::ToArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "ToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataKey::*)()>(&System::Data::DataKey::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataKey::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataKey::*)(::Il2CppObject*)>(&System::Data::DataKey::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataKey), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
