// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Xml.Serialization.IXmlSerializable
#include "System/Xml/Serialization/IXmlSerializable.hpp"
// Including type: System.Data.SqlTypes.INullable
#include "System/Data/SqlTypes/INullable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`4<T1, T2, T3, TResult>
  template<typename T1, typename T2, typename T3, typename TResult>
  class Func_4;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlReaderSettings
  class XmlReaderSettings;
  // Forward declaring type: XmlParserContext
  class XmlParserContext;
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: XmlWriter
  class XmlWriter;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
}
// Completed forward declares
// Type namespace: System.Data.SqlTypes
namespace System::Data::SqlTypes {
  // Forward declaring type: SqlXml
  class SqlXml;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::SqlTypes::SqlXml);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::SqlTypes::SqlXml*, "System.Data.SqlTypes", "SqlXml");
// Type namespace: System.Data.SqlTypes
namespace System::Data::SqlTypes {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.SqlTypes.SqlXml
  // [TokenAttribute] Offset: FFFFFFFF
  // [XmlSchemaProviderAttribute] Offset: 6BA978
  class SqlXml : public ::Il2CppObject/*, public ::System::Xml::Serialization::IXmlSerializable, public ::System::Data::SqlTypes::INullable*/ {
    public:
    public:
    // private System.Reflection.MethodInfo _createSqlReaderMethodInfo
    // Size: 0x8
    // Offset: 0x10
    ::System::Reflection::MethodInfo* createSqlReaderMethodInfo;
    // Field size check
    static_assert(sizeof(::System::Reflection::MethodInfo*) == 0x8);
    // private System.Boolean _fNotNull
    // Size: 0x1
    // Offset: 0x18
    bool fNotNull;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fNotNull and: stream
    char __padding1[0x7] = {};
    // private System.IO.Stream _stream
    // Size: 0x8
    // Offset: 0x20
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.Boolean _firstCreateReader
    // Size: 0x1
    // Offset: 0x28
    bool firstCreateReader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::Xml::Serialization::IXmlSerializable
    operator ::System::Xml::Serialization::IXmlSerializable() noexcept {
      return *reinterpret_cast<::System::Xml::Serialization::IXmlSerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Data::SqlTypes::INullable
    operator ::System::Data::SqlTypes::INullable() noexcept {
      return *reinterpret_cast<::System::Data::SqlTypes::INullable*>(this);
    }
    // Get static field: static private readonly System.Func`4<System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext,System.Xml.XmlReader> s_sqlReaderDelegate
    static ::System::Func_4<::System::IO::Stream*, ::System::Xml::XmlReaderSettings*, ::System::Xml::XmlParserContext*, ::System::Xml::XmlReader*>* _get_s_sqlReaderDelegate();
    // Set static field: static private readonly System.Func`4<System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext,System.Xml.XmlReader> s_sqlReaderDelegate
    static void _set_s_sqlReaderDelegate(::System::Func_4<::System::IO::Stream*, ::System::Xml::XmlReaderSettings*, ::System::Xml::XmlParserContext*, ::System::Xml::XmlReader*>* value);
    // Get static field: static private readonly System.Xml.XmlReaderSettings s_defaultXmlReaderSettings
    static ::System::Xml::XmlReaderSettings* _get_s_defaultXmlReaderSettings();
    // Set static field: static private readonly System.Xml.XmlReaderSettings s_defaultXmlReaderSettings
    static void _set_s_defaultXmlReaderSettings(::System::Xml::XmlReaderSettings* value);
    // Get static field: static private readonly System.Xml.XmlReaderSettings s_defaultXmlReaderSettingsCloseInput
    static ::System::Xml::XmlReaderSettings* _get_s_defaultXmlReaderSettingsCloseInput();
    // Set static field: static private readonly System.Xml.XmlReaderSettings s_defaultXmlReaderSettingsCloseInput
    static void _set_s_defaultXmlReaderSettingsCloseInput(::System::Xml::XmlReaderSettings* value);
    // Get static field: static private System.Reflection.MethodInfo s_createSqlReaderMethodInfo
    static ::System::Reflection::MethodInfo* _get_s_createSqlReaderMethodInfo();
    // Set static field: static private System.Reflection.MethodInfo s_createSqlReaderMethodInfo
    static void _set_s_createSqlReaderMethodInfo(::System::Reflection::MethodInfo* value);
    // Get instance field reference: private System.Reflection.MethodInfo _createSqlReaderMethodInfo
    [[deprecated("Use field access instead!")]] ::System::Reflection::MethodInfo*& dyn__createSqlReaderMethodInfo();
    // Get instance field reference: private System.Boolean _fNotNull
    [[deprecated("Use field access instead!")]] bool& dyn__fNotNull();
    // Get instance field reference: private System.IO.Stream _stream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__stream();
    // Get instance field reference: private System.Boolean _firstCreateReader
    [[deprecated("Use field access instead!")]] bool& dyn__firstCreateReader();
    // static private System.Reflection.MethodInfo get_CreateSqlReaderMethodInfo()
    // Offset: 0x13DEB48
    static ::System::Reflection::MethodInfo* get_CreateSqlReaderMethodInfo();
    // public System.Boolean get_IsNull()
    // Offset: 0x13DEABC
    bool get_IsNull();
    // public System.Void .ctor()
    // Offset: 0x13DE900
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SqlXml* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::SqlTypes::SqlXml::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SqlXml*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x13DF35C
    static void _cctor();
    // public System.Xml.XmlReader CreateReader()
    // Offset: 0x13DE948
    ::System::Xml::XmlReader* CreateReader();
    // static System.Xml.XmlReader CreateSqlXmlReader(System.IO.Stream stream, System.Boolean closeInput, System.Boolean throwTargetInvocationExceptions)
    // Offset: 0x13DEC90
    static ::System::Xml::XmlReader* CreateSqlXmlReader(::System::IO::Stream* stream, bool closeInput, bool throwTargetInvocationExceptions);
    // static private System.Func`4<System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext,System.Xml.XmlReader> CreateSqlReaderDelegate()
    // Offset: 0x13DEE94
    static ::System::Func_4<::System::IO::Stream*, ::System::Xml::XmlReaderSettings*, ::System::Xml::XmlParserContext*, ::System::Xml::XmlReader*>* CreateSqlReaderDelegate();
    // private System.Void SetNull()
    // Offset: 0x13DE934
    void SetNull();
    // private System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
    // Offset: 0x13DEF94
    ::System::Xml::Schema::XmlSchema* System_Xml_Serialization_IXmlSerializable_GetSchema();
    // private System.Void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader r)
    // Offset: 0x13DEF9C
    void System_Xml_Serialization_IXmlSerializable_ReadXml(::System::Xml::XmlReader* r);
    // private System.Void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer)
    // Offset: 0x13DF178
    void System_Xml_Serialization_IXmlSerializable_WriteXml(::System::Xml::XmlWriter* writer);
    // static public System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet schemaSet)
    // Offset: 0x13DF2D4
    static ::System::Xml::XmlQualifiedName* GetXsdType(::System::Xml::Schema::XmlSchemaSet* schemaSet);
  }; // System.Data.SqlTypes.SqlXml
  #pragma pack(pop)
  static check_size<sizeof(SqlXml), 40 + sizeof(bool)> __System_Data_SqlTypes_SqlXmlSizeCheck;
  static_assert(sizeof(SqlXml) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::get_CreateSqlReaderMethodInfo
// Il2CppName: get_CreateSqlReaderMethodInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Reflection::MethodInfo* (*)()>(&System::Data::SqlTypes::SqlXml::get_CreateSqlReaderMethodInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "get_CreateSqlReaderMethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SqlTypes::SqlXml::*)()>(&System::Data::SqlTypes::SqlXml::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Data::SqlTypes::SqlXml::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::CreateReader
// Il2CppName: CreateReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (System::Data::SqlTypes::SqlXml::*)()>(&System::Data::SqlTypes::SqlXml::CreateReader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "CreateReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::CreateSqlXmlReader
// Il2CppName: CreateSqlXmlReader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlReader* (*)(::System::IO::Stream*, bool, bool)>(&System::Data::SqlTypes::SqlXml::CreateSqlXmlReader)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("System.IO", "Stream")->byval_arg;
    static auto* closeInput = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* throwTargetInvocationExceptions = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "CreateSqlXmlReader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, closeInput, throwTargetInvocationExceptions});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::CreateSqlReaderDelegate
// Il2CppName: CreateSqlReaderDelegate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_4<::System::IO::Stream*, ::System::Xml::XmlReaderSettings*, ::System::Xml::XmlParserContext*, ::System::Xml::XmlReader*>* (*)()>(&System::Data::SqlTypes::SqlXml::CreateSqlReaderDelegate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "CreateSqlReaderDelegate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::SetNull
// Il2CppName: SetNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlXml::*)()>(&System::Data::SqlTypes::SqlXml::SetNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "SetNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::System_Xml_Serialization_IXmlSerializable_GetSchema
// Il2CppName: System.Xml.Serialization.IXmlSerializable.GetSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Data::SqlTypes::SqlXml::*)()>(&System::Data::SqlTypes::SqlXml::System_Xml_Serialization_IXmlSerializable_GetSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "System.Xml.Serialization.IXmlSerializable.GetSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::System_Xml_Serialization_IXmlSerializable_ReadXml
// Il2CppName: System.Xml.Serialization.IXmlSerializable.ReadXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlXml::*)(::System::Xml::XmlReader*)>(&System::Data::SqlTypes::SqlXml::System_Xml_Serialization_IXmlSerializable_ReadXml)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "System.Xml.Serialization.IXmlSerializable.ReadXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::System_Xml_Serialization_IXmlSerializable_WriteXml
// Il2CppName: System.Xml.Serialization.IXmlSerializable.WriteXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlXml::*)(::System::Xml::XmlWriter*)>(&System::Data::SqlTypes::SqlXml::System_Xml_Serialization_IXmlSerializable_WriteXml)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "System.Xml.Serialization.IXmlSerializable.WriteXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlXml::GetXsdType
// Il2CppName: GetXsdType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (*)(::System::Xml::Schema::XmlSchemaSet*)>(&System::Data::SqlTypes::SqlXml::GetXsdType)> {
  static const MethodInfo* get() {
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlXml*), "GetXsdType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaSet});
  }
};
