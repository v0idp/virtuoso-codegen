// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.SystemException
#include "System/SystemException.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Exception because it is already included!
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Data.SqlTypes
namespace System::Data::SqlTypes {
  // Forward declaring type: SqlTypeException
  class SqlTypeException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::SqlTypes::SqlTypeException);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::SqlTypes::SqlTypeException*, "System.Data.SqlTypes", "SqlTypeException");
// Type namespace: System.Data.SqlTypes
namespace System::Data::SqlTypes {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.SqlTypes.SqlTypeException
  // [TokenAttribute] Offset: FFFFFFFF
  class SqlTypeException : public ::System::SystemException {
    public:
    // public System.Void .ctor()
    // Offset: 0x13DCE2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SqlTypeException* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::SqlTypes::SqlTypeException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SqlTypeException*, creationType>()));
    }
    // public System.Void .ctor(System.String message)
    // Offset: 0x13DA7E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SqlTypeException* New_ctor(::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::SqlTypes::SqlTypeException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SqlTypeException*, creationType>(message)));
    }
    // public System.Void .ctor(System.String message, System.Exception e)
    // Offset: 0x13D73C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SqlTypeException* New_ctor(::StringW message, ::System::Exception* e) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::SqlTypes::SqlTypeException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SqlTypeException*, creationType>(message, e)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc)
    // Offset: 0x13DCE90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SqlTypeException* New_ctor(::System::Runtime::Serialization::SerializationInfo* si, ::System::Runtime::Serialization::StreamingContext sc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::SqlTypes::SqlTypeException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SqlTypeException*, creationType>(si, sc)));
    }
    // static private System.Runtime.Serialization.SerializationInfo SqlTypeExceptionSerialization(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc)
    // Offset: 0x13DCF0C
    static ::System::Runtime::Serialization::SerializationInfo* SqlTypeExceptionSerialization(::System::Runtime::Serialization::SerializationInfo* si, ::System::Runtime::Serialization::StreamingContext sc);
  }; // System.Data.SqlTypes.SqlTypeException
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlTypeException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlTypeException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlTypeException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlTypeException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlTypeException::SqlTypeExceptionSerialization
// Il2CppName: SqlTypeExceptionSerialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::Serialization::SerializationInfo* (*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Data::SqlTypes::SqlTypeException::SqlTypeExceptionSerialization)> {
  static const MethodInfo* get() {
    static auto* si = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* sc = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlTypeException*), "SqlTypeExceptionSerialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{si, sc});
  }
};
