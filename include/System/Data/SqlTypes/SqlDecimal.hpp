// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Xml.Serialization.IXmlSerializable
#include "System/Xml/Serialization/IXmlSerializable.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.Data.SqlTypes.INullable
#include "System/Data/SqlTypes/INullable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
}
// Forward declaring namespace: System::Data::SqlTypes
namespace System::Data::SqlTypes {
  // Forward declaring type: SqlByte
  struct SqlByte;
  // Forward declaring type: SqlInt16
  struct SqlInt16;
  // Forward declaring type: SqlInt32
  struct SqlInt32;
  // Forward declaring type: SqlInt64
  struct SqlInt64;
  // Forward declaring type: SqlMoney
  struct SqlMoney;
  // Forward declaring type: EComparison
  struct EComparison;
  // Forward declaring type: SqlBoolean
  struct SqlBoolean;
  // Forward declaring type: SqlDouble
  struct SqlDouble;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchema
  class XmlSchema;
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlReader
  class XmlReader;
  // Forward declaring type: XmlWriter
  class XmlWriter;
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
}
// Completed forward declares
// Type namespace: System.Data.SqlTypes
namespace System::Data::SqlTypes {
  // Forward declaring type: SqlDecimal
  struct SqlDecimal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Data::SqlTypes::SqlDecimal, "System.Data.SqlTypes", "SqlDecimal");
// Type namespace: System.Data.SqlTypes
namespace System::Data::SqlTypes {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Data.SqlTypes.SqlDecimal
  // [TokenAttribute] Offset: FFFFFFFF
  // [XmlSchemaProviderAttribute] Offset: 6BA770
  struct SqlDecimal/*, public ::System::ValueType, public ::System::Xml::Serialization::IXmlSerializable, public ::System::IComparable, public ::System::Data::SqlTypes::INullable*/ {
    public:
    public:
    // System.Byte _bStatus
    // Size: 0x1
    // Offset: 0x0
    uint8_t bStatus;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte _bLen
    // Size: 0x1
    // Offset: 0x1
    uint8_t bLen;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte _bPrec
    // Size: 0x1
    // Offset: 0x2
    uint8_t bPrec;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.Byte _bScale
    // Size: 0x1
    // Offset: 0x3
    uint8_t bScale;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // System.UInt32 _data1
    // Size: 0x4
    // Offset: 0x4
    uint data1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 _data2
    // Size: 0x4
    // Offset: 0x8
    uint data2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 _data3
    // Size: 0x4
    // Offset: 0xC
    uint data3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // System.UInt32 _data4
    // Size: 0x4
    // Offset: 0x10
    uint data4;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: SqlDecimal
    constexpr SqlDecimal(uint8_t bStatus_ = {}, uint8_t bLen_ = {}, uint8_t bPrec_ = {}, uint8_t bScale_ = {}, uint data1_ = {}, uint data2_ = {}, uint data3_ = {}, uint data4_ = {}) noexcept : bStatus{bStatus_}, bLen{bLen_}, bPrec{bPrec_}, bScale{bScale_}, data1{data1_}, data2{data2_}, data3{data3_}, data4{data4_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Xml::Serialization::IXmlSerializable
    operator ::System::Xml::Serialization::IXmlSerializable() noexcept {
      return *reinterpret_cast<::System::Xml::Serialization::IXmlSerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable
    operator ::System::IComparable() noexcept {
      return *reinterpret_cast<::System::IComparable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Data::SqlTypes::INullable
    operator ::System::Data::SqlTypes::INullable() noexcept {
      return *reinterpret_cast<::System::Data::SqlTypes::INullable*>(this);
    }
    // Get static field: static private readonly System.Byte s_NUMERIC_MAX_PRECISION
    static uint8_t _get_s_NUMERIC_MAX_PRECISION();
    // Set static field: static private readonly System.Byte s_NUMERIC_MAX_PRECISION
    static void _set_s_NUMERIC_MAX_PRECISION(uint8_t value);
    // Get static field: static public readonly System.Byte MaxPrecision
    static uint8_t _get_MaxPrecision();
    // Set static field: static public readonly System.Byte MaxPrecision
    static void _set_MaxPrecision(uint8_t value);
    // Get static field: static public readonly System.Byte MaxScale
    static uint8_t _get_MaxScale();
    // Set static field: static public readonly System.Byte MaxScale
    static void _set_MaxScale(uint8_t value);
    // Get static field: static private readonly System.Byte s_bNullMask
    static uint8_t _get_s_bNullMask();
    // Set static field: static private readonly System.Byte s_bNullMask
    static void _set_s_bNullMask(uint8_t value);
    // Get static field: static private readonly System.Byte s_bIsNull
    static uint8_t _get_s_bIsNull();
    // Set static field: static private readonly System.Byte s_bIsNull
    static void _set_s_bIsNull(uint8_t value);
    // Get static field: static private readonly System.Byte s_bNotNull
    static uint8_t _get_s_bNotNull();
    // Set static field: static private readonly System.Byte s_bNotNull
    static void _set_s_bNotNull(uint8_t value);
    // Get static field: static private readonly System.Byte s_bReverseNullMask
    static uint8_t _get_s_bReverseNullMask();
    // Set static field: static private readonly System.Byte s_bReverseNullMask
    static void _set_s_bReverseNullMask(uint8_t value);
    // Get static field: static private readonly System.Byte s_bSignMask
    static uint8_t _get_s_bSignMask();
    // Set static field: static private readonly System.Byte s_bSignMask
    static void _set_s_bSignMask(uint8_t value);
    // Get static field: static private readonly System.Byte s_bPositive
    static uint8_t _get_s_bPositive();
    // Set static field: static private readonly System.Byte s_bPositive
    static void _set_s_bPositive(uint8_t value);
    // Get static field: static private readonly System.Byte s_bNegative
    static uint8_t _get_s_bNegative();
    // Set static field: static private readonly System.Byte s_bNegative
    static void _set_s_bNegative(uint8_t value);
    // Get static field: static private readonly System.Byte s_bReverseSignMask
    static uint8_t _get_s_bReverseSignMask();
    // Set static field: static private readonly System.Byte s_bReverseSignMask
    static void _set_s_bReverseSignMask(uint8_t value);
    // Get static field: static private readonly System.UInt32 s_uiZero
    static uint _get_s_uiZero();
    // Set static field: static private readonly System.UInt32 s_uiZero
    static void _set_s_uiZero(uint value);
    // Get static field: static private readonly System.Int32 s_cNumeMax
    static int _get_s_cNumeMax();
    // Set static field: static private readonly System.Int32 s_cNumeMax
    static void _set_s_cNumeMax(int value);
    // Get static field: static private readonly System.Int64 s_lInt32Base
    static int64_t _get_s_lInt32Base();
    // Set static field: static private readonly System.Int64 s_lInt32Base
    static void _set_s_lInt32Base(int64_t value);
    // Get static field: static private readonly System.UInt64 s_ulInt32Base
    static uint64_t _get_s_ulInt32Base();
    // Set static field: static private readonly System.UInt64 s_ulInt32Base
    static void _set_s_ulInt32Base(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_ulInt32BaseForMod
    static uint64_t _get_s_ulInt32BaseForMod();
    // Set static field: static private readonly System.UInt64 s_ulInt32BaseForMod
    static void _set_s_ulInt32BaseForMod(uint64_t value);
    // Get static field: static readonly System.UInt64 s_llMax
    static uint64_t _get_s_llMax();
    // Set static field: static readonly System.UInt64 s_llMax
    static void _set_s_llMax(uint64_t value);
    // Get static field: static private readonly System.UInt32 s_ulBase10
    static uint _get_s_ulBase10();
    // Set static field: static private readonly System.UInt32 s_ulBase10
    static void _set_s_ulBase10(uint value);
    // Get static field: static private readonly System.Double s_DUINT_BASE
    static double _get_s_DUINT_BASE();
    // Set static field: static private readonly System.Double s_DUINT_BASE
    static void _set_s_DUINT_BASE(double value);
    // Get static field: static private readonly System.Double s_DUINT_BASE2
    static double _get_s_DUINT_BASE2();
    // Set static field: static private readonly System.Double s_DUINT_BASE2
    static void _set_s_DUINT_BASE2(double value);
    // Get static field: static private readonly System.Double s_DUINT_BASE3
    static double _get_s_DUINT_BASE3();
    // Set static field: static private readonly System.Double s_DUINT_BASE3
    static void _set_s_DUINT_BASE3(double value);
    // Get static field: static private readonly System.Double s_DMAX_NUME
    static double _get_s_DMAX_NUME();
    // Set static field: static private readonly System.Double s_DMAX_NUME
    static void _set_s_DMAX_NUME(double value);
    // Get static field: static private readonly System.UInt32 s_DBL_DIG
    static uint _get_s_DBL_DIG();
    // Set static field: static private readonly System.UInt32 s_DBL_DIG
    static void _set_s_DBL_DIG(uint value);
    // Get static field: static private readonly System.Byte s_cNumeDivScaleMin
    static uint8_t _get_s_cNumeDivScaleMin();
    // Set static field: static private readonly System.Byte s_cNumeDivScaleMin
    static void _set_s_cNumeDivScaleMin(uint8_t value);
    // Get static field: static private readonly System.UInt32[] s_rgulShiftBase
    static ::ArrayW<uint> _get_s_rgulShiftBase();
    // Set static field: static private readonly System.UInt32[] s_rgulShiftBase
    static void _set_s_rgulShiftBase(::ArrayW<uint> value);
    // Get static field: static private readonly System.UInt32[] s_decimalHelpersLo
    static ::ArrayW<uint> _get_s_decimalHelpersLo();
    // Set static field: static private readonly System.UInt32[] s_decimalHelpersLo
    static void _set_s_decimalHelpersLo(::ArrayW<uint> value);
    // Get static field: static private readonly System.UInt32[] s_decimalHelpersMid
    static ::ArrayW<uint> _get_s_decimalHelpersMid();
    // Set static field: static private readonly System.UInt32[] s_decimalHelpersMid
    static void _set_s_decimalHelpersMid(::ArrayW<uint> value);
    // Get static field: static private readonly System.UInt32[] s_decimalHelpersHi
    static ::ArrayW<uint> _get_s_decimalHelpersHi();
    // Set static field: static private readonly System.UInt32[] s_decimalHelpersHi
    static void _set_s_decimalHelpersHi(::ArrayW<uint> value);
    // Get static field: static private readonly System.UInt32[] s_decimalHelpersHiHi
    static ::ArrayW<uint> _get_s_decimalHelpersHiHi();
    // Set static field: static private readonly System.UInt32[] s_decimalHelpersHiHi
    static void _set_s_decimalHelpersHiHi(::ArrayW<uint> value);
    // Get static field: static private readonly System.Byte[] s_rgCLenFromPrec
    static ::ArrayW<uint8_t> _get_s_rgCLenFromPrec();
    // Set static field: static private readonly System.Byte[] s_rgCLenFromPrec
    static void _set_s_rgCLenFromPrec(::ArrayW<uint8_t> value);
    // Get static field: static private readonly System.UInt32 s_ulT1
    static uint _get_s_ulT1();
    // Set static field: static private readonly System.UInt32 s_ulT1
    static void _set_s_ulT1(uint value);
    // Get static field: static private readonly System.UInt32 s_ulT2
    static uint _get_s_ulT2();
    // Set static field: static private readonly System.UInt32 s_ulT2
    static void _set_s_ulT2(uint value);
    // Get static field: static private readonly System.UInt32 s_ulT3
    static uint _get_s_ulT3();
    // Set static field: static private readonly System.UInt32 s_ulT3
    static void _set_s_ulT3(uint value);
    // Get static field: static private readonly System.UInt32 s_ulT4
    static uint _get_s_ulT4();
    // Set static field: static private readonly System.UInt32 s_ulT4
    static void _set_s_ulT4(uint value);
    // Get static field: static private readonly System.UInt32 s_ulT5
    static uint _get_s_ulT5();
    // Set static field: static private readonly System.UInt32 s_ulT5
    static void _set_s_ulT5(uint value);
    // Get static field: static private readonly System.UInt32 s_ulT6
    static uint _get_s_ulT6();
    // Set static field: static private readonly System.UInt32 s_ulT6
    static void _set_s_ulT6(uint value);
    // Get static field: static private readonly System.UInt32 s_ulT7
    static uint _get_s_ulT7();
    // Set static field: static private readonly System.UInt32 s_ulT7
    static void _set_s_ulT7(uint value);
    // Get static field: static private readonly System.UInt32 s_ulT8
    static uint _get_s_ulT8();
    // Set static field: static private readonly System.UInt32 s_ulT8
    static void _set_s_ulT8(uint value);
    // Get static field: static private readonly System.UInt32 s_ulT9
    static uint _get_s_ulT9();
    // Set static field: static private readonly System.UInt32 s_ulT9
    static void _set_s_ulT9(uint value);
    // Get static field: static private readonly System.UInt64 s_dwlT10
    static uint64_t _get_s_dwlT10();
    // Set static field: static private readonly System.UInt64 s_dwlT10
    static void _set_s_dwlT10(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT11
    static uint64_t _get_s_dwlT11();
    // Set static field: static private readonly System.UInt64 s_dwlT11
    static void _set_s_dwlT11(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT12
    static uint64_t _get_s_dwlT12();
    // Set static field: static private readonly System.UInt64 s_dwlT12
    static void _set_s_dwlT12(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT13
    static uint64_t _get_s_dwlT13();
    // Set static field: static private readonly System.UInt64 s_dwlT13
    static void _set_s_dwlT13(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT14
    static uint64_t _get_s_dwlT14();
    // Set static field: static private readonly System.UInt64 s_dwlT14
    static void _set_s_dwlT14(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT15
    static uint64_t _get_s_dwlT15();
    // Set static field: static private readonly System.UInt64 s_dwlT15
    static void _set_s_dwlT15(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT16
    static uint64_t _get_s_dwlT16();
    // Set static field: static private readonly System.UInt64 s_dwlT16
    static void _set_s_dwlT16(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT17
    static uint64_t _get_s_dwlT17();
    // Set static field: static private readonly System.UInt64 s_dwlT17
    static void _set_s_dwlT17(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT18
    static uint64_t _get_s_dwlT18();
    // Set static field: static private readonly System.UInt64 s_dwlT18
    static void _set_s_dwlT18(uint64_t value);
    // Get static field: static private readonly System.UInt64 s_dwlT19
    static uint64_t _get_s_dwlT19();
    // Set static field: static private readonly System.UInt64 s_dwlT19
    static void _set_s_dwlT19(uint64_t value);
    // Get static field: static public readonly System.Data.SqlTypes.SqlDecimal Null
    static ::System::Data::SqlTypes::SqlDecimal _get_Null();
    // Set static field: static public readonly System.Data.SqlTypes.SqlDecimal Null
    static void _set_Null(::System::Data::SqlTypes::SqlDecimal value);
    // Get static field: static public readonly System.Data.SqlTypes.SqlDecimal MinValue
    static ::System::Data::SqlTypes::SqlDecimal _get_MinValue();
    // Set static field: static public readonly System.Data.SqlTypes.SqlDecimal MinValue
    static void _set_MinValue(::System::Data::SqlTypes::SqlDecimal value);
    // Get static field: static public readonly System.Data.SqlTypes.SqlDecimal MaxValue
    static ::System::Data::SqlTypes::SqlDecimal _get_MaxValue();
    // Set static field: static public readonly System.Data.SqlTypes.SqlDecimal MaxValue
    static void _set_MaxValue(::System::Data::SqlTypes::SqlDecimal value);
    // Get instance field reference: System.Byte _bStatus
    [[deprecated]] uint8_t& dyn__bStatus();
    // Get instance field reference: System.Byte _bLen
    [[deprecated]] uint8_t& dyn__bLen();
    // Get instance field reference: System.Byte _bPrec
    [[deprecated]] uint8_t& dyn__bPrec();
    // Get instance field reference: System.Byte _bScale
    [[deprecated]] uint8_t& dyn__bScale();
    // Get instance field reference: System.UInt32 _data1
    [[deprecated]] uint& dyn__data1();
    // Get instance field reference: System.UInt32 _data2
    [[deprecated]] uint& dyn__data2();
    // Get instance field reference: System.UInt32 _data3
    [[deprecated]] uint& dyn__data3();
    // Get instance field reference: System.UInt32 _data4
    [[deprecated]] uint& dyn__data4();
    // public System.Boolean get_IsNull()
    // Offset: 0x12338D0
    bool get_IsNull();
    // public System.Decimal get_Value()
    // Offset: 0x123394C
    ::System::Decimal get_Value();
    // public System.Boolean get_IsPositive()
    // Offset: 0x1233A48
    bool get_IsPositive();
    // public System.Byte get_Scale()
    // Offset: 0x1233BAC
    uint8_t get_Scale();
    // public System.Int32[] get_Data()
    // Offset: 0x1233C08
    ::ArrayW<int> get_Data();
    // private System.Void .ctor(System.Boolean fNull)
    // Offset: 0x1232C90
    SqlDecimal(bool fNull);
    // public System.Void .ctor(System.Decimal value)
    // Offset: 0x1232D04
    SqlDecimal(::System::Decimal value);
    // public System.Void .ctor(System.Int32 value)
    // Offset: 0x1232EA0
    SqlDecimal(int value);
    // public System.Void .ctor(System.Int64 value)
    // Offset: 0x1233164
    SqlDecimal(int64_t value);
    // private System.Void .ctor(System.UInt32[] rglData, System.Byte bLen, System.Byte bPrec, System.Byte bScale, System.Boolean fPositive)
    // Offset: 0x12335CC
    SqlDecimal(::ArrayW<uint> rglData, uint8_t bLen, uint8_t bPrec, uint8_t bScale, bool fPositive);
    // static private System.Void .cctor()
    // Offset: 0x1237C4C
    static void _cctor();
    // private System.Byte CalculatePrecision()
    // Offset: 0x12327BC
    uint8_t CalculatePrecision();
    // private System.Boolean VerifyPrecision(System.Byte precision)
    // Offset: 0x1232A30
    bool VerifyPrecision(uint8_t precision);
    // private System.Void SetPositive()
    // Offset: 0x1233854
    void SetPositive();
    // private System.Void SetSignBit(System.Boolean fPositive)
    // Offset: 0x1233B04
    void SetSignBit(bool fPositive);
    // static public System.Data.SqlTypes.SqlDecimal Parse(System.String s)
    // Offset: 0x122F4A8
    static ::System::Data::SqlTypes::SqlDecimal Parse(::StringW s);
    // public System.Double ToDouble()
    // Offset: 0x123422C
    double ToDouble();
    // private System.Decimal ToDecimal()
    // Offset: 0x1233950
    ::System::Decimal ToDecimal();
    // static private System.Void ZeroToMaxLen(System.UInt32[] rgulData, System.Int32 cUI4sCur)
    // Offset: 0x1236718
    static void ZeroToMaxLen(::ArrayW<uint> rgulData, int cUI4sCur);
    // private System.Boolean FZero()
    // Offset: 0x1233834
    bool FZero();
    // private System.Boolean FGt10_38()
    // Offset: 0x1234F00
    bool FGt10_38();
    // private System.Boolean FGt10_38(System.UInt32[] rglData)
    // Offset: 0x12367A0
    bool FGt10_38(::ArrayW<uint> rglData);
    // static private System.Byte BGetPrecUI4(System.UInt32 value)
    // Offset: 0x1232F98
    static uint8_t BGetPrecUI4(uint value);
    // static private System.Byte BGetPrecUI8(System.UInt64 dwlVal)
    // Offset: 0x1233254
    static uint8_t BGetPrecUI8(uint64_t dwlVal);
    // private System.Void AddULong(System.UInt32 ulAdd)
    // Offset: 0x1234070
    void AddULong(uint ulAdd);
    // private System.Void MultByULong(System.UInt32 uiMultiplier)
    // Offset: 0x1233E74
    void MultByULong(uint uiMultiplier);
    // private System.UInt32 DivByULong(System.UInt32 iDivisor)
    // Offset: 0x12368A4
    uint DivByULong(uint iDivisor);
    // System.Void AdjustScale(System.Int32 digits, System.Boolean fRound)
    // Offset: 0x1234A10
    void AdjustScale(int digits, bool fRound);
    // private System.Int32 LAbsCmp(System.Data.SqlTypes.SqlDecimal snumOp)
    // Offset: 0x1234D94
    int LAbsCmp(::System::Data::SqlTypes::SqlDecimal snumOp);
    // static private System.Void MpMove(System.UInt32[] rgulS, System.Int32 ciulS, System.UInt32[] rgulD, out System.Int32 ciulD)
    // Offset: 0x1236A38
    static void MpMove(::ArrayW<uint> rgulS, int ciulS, ::ArrayW<uint> rgulD, ByRef<int> ciulD);
    // static private System.Void MpSet(System.UInt32[] rgulD, out System.Int32 ciulD, System.UInt32 iulN)
    // Offset: 0x1236AA8
    static void MpSet(::ArrayW<uint> rgulD, ByRef<int> ciulD, uint iulN);
    // static private System.Void MpNormalize(System.UInt32[] rgulU, ref System.Int32 ciulU)
    // Offset: 0x1236AE0
    static void MpNormalize(::ArrayW<uint> rgulU, ByRef<int> ciulU);
    // static private System.Void MpMul1(System.UInt32[] piulD, ref System.Int32 ciulD, System.UInt32 iulX)
    // Offset: 0x1236B38
    static void MpMul1(::ArrayW<uint> piulD, ByRef<int> ciulD, uint iulX);
    // static private System.Void MpDiv1(System.UInt32[] rgulU, ref System.Int32 ciulU, System.UInt32 iulD, out System.UInt32 iulR)
    // Offset: 0x1233CEC
    static void MpDiv1(::ArrayW<uint> rgulU, ByRef<int> ciulU, uint iulD, ByRef<uint> iulR);
    // static System.UInt64 DWL(System.UInt32 lo, System.UInt32 hi)
    // Offset: 0x1236C4C
    static uint64_t DWL(uint lo, uint hi);
    // static private System.UInt32 HI(System.UInt64 x)
    // Offset: 0x1236C40
    static uint HI(uint64_t x);
    // static private System.UInt32 LO(System.UInt64 x)
    // Offset: 0x1236C48
    static uint LO(uint64_t x);
    // static private System.Void MpDiv(System.UInt32[] rgulU, System.Int32 ciulU, System.UInt32[] rgulD, System.Int32 ciulD, System.UInt32[] rgulQ, out System.Int32 ciulQ, System.UInt32[] rgulR, out System.Int32 ciulR)
    // Offset: 0x1235E20
    static void MpDiv(::ArrayW<uint> rgulU, int ciulU, ::ArrayW<uint> rgulD, int ciulD, ::ArrayW<uint> rgulQ, ByRef<int> ciulQ, ::ArrayW<uint> rgulR, ByRef<int> ciulR);
    // private System.Data.SqlTypes.EComparison CompareNm(System.Data.SqlTypes.SqlDecimal snumOp)
    // Offset: 0x1236C58
    ::System::Data::SqlTypes::EComparison CompareNm(::System::Data::SqlTypes::SqlDecimal snumOp);
    // static private System.Void CheckValidPrecScale(System.Byte bPrec, System.Byte bScale)
    // Offset: 0x123373C
    static void CheckValidPrecScale(uint8_t bPrec, uint8_t bScale);
    // static public System.Data.SqlTypes.SqlBoolean LessThan(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
    // Offset: 0x1237094
    static ::System::Data::SqlTypes::SqlBoolean LessThan(::System::Data::SqlTypes::SqlDecimal x, ::System::Data::SqlTypes::SqlDecimal y);
    // static public System.Data.SqlTypes.SqlBoolean GreaterThan(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
    // Offset: 0x1237154
    static ::System::Data::SqlTypes::SqlBoolean GreaterThan(::System::Data::SqlTypes::SqlDecimal x, ::System::Data::SqlTypes::SqlDecimal y);
    // public System.Data.SqlTypes.SqlDouble ToSqlDouble()
    // Offset: 0x1237214
    ::System::Data::SqlTypes::SqlDouble ToSqlDouble();
    // public System.Data.SqlTypes.SqlInt64 ToSqlInt64()
    // Offset: 0x12372A4
    ::System::Data::SqlTypes::SqlInt64 ToSqlInt64();
    // public System.Data.SqlTypes.SqlMoney ToSqlMoney()
    // Offset: 0x1237334
    ::System::Data::SqlTypes::SqlMoney ToSqlMoney();
    // static private System.Char ChFromDigit(System.UInt32 uiDigit)
    // Offset: 0x1233DE8
    static ::Il2CppChar ChFromDigit(uint uiDigit);
    // private System.Void StoreFromWorkingArray(System.UInt32[] rguiData)
    // Offset: 0x1236834
    void StoreFromWorkingArray(::ArrayW<uint> rguiData);
    // private System.Void SetToZero()
    // Offset: 0x1233DF0
    void SetToZero();
    // public System.Int32 CompareTo(System.Object value)
    // Offset: 0x12373C4
    int CompareTo(::Il2CppObject* value);
    // public System.Int32 CompareTo(System.Data.SqlTypes.SqlDecimal value)
    // Offset: 0x1237520
    int CompareTo(::System::Data::SqlTypes::SqlDecimal value);
    // private System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
    // Offset: 0x123794C
    ::System::Xml::Schema::XmlSchema* System_Xml_Serialization_IXmlSerializable_GetSchema();
    // private System.Void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader)
    // Offset: 0x1237954
    void System_Xml_Serialization_IXmlSerializable_ReadXml(::System::Xml::XmlReader* reader);
    // private System.Void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer)
    // Offset: 0x1237ADC
    void System_Xml_Serialization_IXmlSerializable_WriteXml(::System::Xml::XmlWriter* writer);
    // static public System.Xml.XmlQualifiedName GetXsdType(System.Xml.Schema.XmlSchemaSet schemaSet)
    // Offset: 0x1237BC4
    static ::System::Xml::XmlQualifiedName* GetXsdType(::System::Xml::Schema::XmlSchemaSet* schemaSet);
    // public override System.String ToString()
    // Offset: 0x122F9E0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x12376EC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1237828
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.Data.SqlTypes.SqlDecimal
  #pragma pack(pop)
  static check_size<sizeof(SqlDecimal), 16 + sizeof(uint)> __System_Data_SqlTypes_SqlDecimalSizeCheck;
  static_assert(sizeof(SqlDecimal) == 0x14);
  // static public System.Data.SqlTypes.SqlDecimal op_UnaryNegation(System.Data.SqlTypes.SqlDecimal x)
  // Offset: 0x123436C
  ::System::Data::SqlTypes::SqlDecimal operator-(const ::System::Data::SqlTypes::SqlDecimal& x);
  // static public System.Data.SqlTypes.SqlDecimal op_Addition(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
  // Offset: 0x1234460
  ::System::Data::SqlTypes::SqlDecimal operator+(const ::System::Data::SqlTypes::SqlDecimal& x, const ::System::Data::SqlTypes::SqlDecimal& y);
  // static public System.Data.SqlTypes.SqlDecimal op_Subtraction(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
  // Offset: 0x1234F74
  ::System::Data::SqlTypes::SqlDecimal operator-(const ::System::Data::SqlTypes::SqlDecimal& x, const ::System::Data::SqlTypes::SqlDecimal& y);
  // static public System.Data.SqlTypes.SqlDecimal op_Multiply(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
  // Offset: 0x1235060
  ::System::Data::SqlTypes::SqlDecimal operator*(const ::System::Data::SqlTypes::SqlDecimal& x, const ::System::Data::SqlTypes::SqlDecimal& y);
  // static public System.Data.SqlTypes.SqlDecimal op_Division(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
  // Offset: 0x12359E8
  ::System::Data::SqlTypes::SqlDecimal operator/(const ::System::Data::SqlTypes::SqlDecimal& x, const ::System::Data::SqlTypes::SqlDecimal& y);
  // static public System.Data.SqlTypes.SqlBoolean op_Equality(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
  // Offset: 0x1236E48
  ::System::Data::SqlTypes::SqlBoolean operator ==(const ::System::Data::SqlTypes::SqlDecimal& x, const ::System::Data::SqlTypes::SqlDecimal& y);
  // static public System.Data.SqlTypes.SqlBoolean op_LessThan(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
  // Offset: 0x1236F0C
  ::System::Data::SqlTypes::SqlBoolean operator <(const ::System::Data::SqlTypes::SqlDecimal& x, const ::System::Data::SqlTypes::SqlDecimal& y);
  // static public System.Data.SqlTypes.SqlBoolean op_GreaterThan(System.Data.SqlTypes.SqlDecimal x, System.Data.SqlTypes.SqlDecimal y)
  // Offset: 0x1236FD0
  ::System::Data::SqlTypes::SqlBoolean operator >(const ::System::Data::SqlTypes::SqlDecimal& x, const ::System::Data::SqlTypes::SqlDecimal& y);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::get_Value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::get_IsPositive
// Il2CppName: get_IsPositive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::get_IsPositive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "get_IsPositive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::get_Scale
// Il2CppName: get_Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::get_Scale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "get_Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::get_Data
// Il2CppName: get_Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::get_Data)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "get_Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::SqlDecimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::SqlDecimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::SqlDecimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::SqlDecimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::SqlDecimal
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&System::Data::SqlTypes::SqlDecimal::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::CalculatePrecision
// Il2CppName: CalculatePrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::CalculatePrecision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "CalculatePrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::VerifyPrecision
// Il2CppName: VerifyPrecision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SqlTypes::SqlDecimal::*)(uint8_t)>(&System::Data::SqlTypes::SqlDecimal::VerifyPrecision)> {
  static const MethodInfo* get() {
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "VerifyPrecision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{precision});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::SetPositive
// Il2CppName: SetPositive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::SetPositive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "SetPositive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::SetSignBit
// Il2CppName: SetSignBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)(bool)>(&System::Data::SqlTypes::SqlDecimal::SetSignBit)> {
  static const MethodInfo* get() {
    static auto* fPositive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "SetSignBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fPositive});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SqlTypes::SqlDecimal (*)(::StringW)>(&System::Data::SqlTypes::SqlDecimal::Parse)> {
  static const MethodInfo* get() {
    static auto* s = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::ToDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::ToDecimal
// Il2CppName: ToDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::ToDecimal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "ToDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::ZeroToMaxLen
// Il2CppName: ZeroToMaxLen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, int)>(&System::Data::SqlTypes::SqlDecimal::ZeroToMaxLen)> {
  static const MethodInfo* get() {
    static auto* rgulData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* cUI4sCur = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "ZeroToMaxLen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgulData, cUI4sCur});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::FZero
// Il2CppName: FZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::FZero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "FZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::FGt10_38
// Il2CppName: FGt10_38
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::FGt10_38)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "FGt10_38", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::FGt10_38
// Il2CppName: FGt10_38
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SqlTypes::SqlDecimal::*)(::ArrayW<uint>)>(&System::Data::SqlTypes::SqlDecimal::FGt10_38)> {
  static const MethodInfo* get() {
    static auto* rglData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "FGt10_38", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rglData});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::BGetPrecUI4
// Il2CppName: BGetPrecUI4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint)>(&System::Data::SqlTypes::SqlDecimal::BGetPrecUI4)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "BGetPrecUI4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::BGetPrecUI8
// Il2CppName: BGetPrecUI8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (*)(uint64_t)>(&System::Data::SqlTypes::SqlDecimal::BGetPrecUI8)> {
  static const MethodInfo* get() {
    static auto* dwlVal = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "BGetPrecUI8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dwlVal});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::AddULong
// Il2CppName: AddULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)(uint)>(&System::Data::SqlTypes::SqlDecimal::AddULong)> {
  static const MethodInfo* get() {
    static auto* ulAdd = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "AddULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ulAdd});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::MultByULong
// Il2CppName: MultByULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)(uint)>(&System::Data::SqlTypes::SqlDecimal::MultByULong)> {
  static const MethodInfo* get() {
    static auto* uiMultiplier = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "MultByULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uiMultiplier});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::DivByULong
// Il2CppName: DivByULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (System::Data::SqlTypes::SqlDecimal::*)(uint)>(&System::Data::SqlTypes::SqlDecimal::DivByULong)> {
  static const MethodInfo* get() {
    static auto* iDivisor = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "DivByULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{iDivisor});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::AdjustScale
// Il2CppName: AdjustScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)(int, bool)>(&System::Data::SqlTypes::SqlDecimal::AdjustScale)> {
  static const MethodInfo* get() {
    static auto* digits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fRound = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "AdjustScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{digits, fRound});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::LAbsCmp
// Il2CppName: LAbsCmp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::SqlTypes::SqlDecimal::*)(::System::Data::SqlTypes::SqlDecimal)>(&System::Data::SqlTypes::SqlDecimal::LAbsCmp)> {
  static const MethodInfo* get() {
    static auto* snumOp = &::il2cpp_utils::GetClassFromName("System.Data.SqlTypes", "SqlDecimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "LAbsCmp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snumOp});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::MpMove
// Il2CppName: MpMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, int, ::ArrayW<uint>, ByRef<int>)>(&System::Data::SqlTypes::SqlDecimal::MpMove)> {
  static const MethodInfo* get() {
    static auto* rgulS = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulS = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rgulD = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulD = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "MpMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgulS, ciulS, rgulD, ciulD});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::MpSet
// Il2CppName: MpSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ByRef<int>, uint)>(&System::Data::SqlTypes::SqlDecimal::MpSet)> {
  static const MethodInfo* get() {
    static auto* rgulD = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulD = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* iulN = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "MpSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgulD, ciulD, iulN});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::MpNormalize
// Il2CppName: MpNormalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ByRef<int>)>(&System::Data::SqlTypes::SqlDecimal::MpNormalize)> {
  static const MethodInfo* get() {
    static auto* rgulU = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulU = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "MpNormalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgulU, ciulU});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::MpMul1
// Il2CppName: MpMul1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ByRef<int>, uint)>(&System::Data::SqlTypes::SqlDecimal::MpMul1)> {
  static const MethodInfo* get() {
    static auto* piulD = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulD = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* iulX = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "MpMul1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{piulD, ciulD, iulX});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::MpDiv1
// Il2CppName: MpDiv1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, ByRef<int>, uint, ByRef<uint>)>(&System::Data::SqlTypes::SqlDecimal::MpDiv1)> {
  static const MethodInfo* get() {
    static auto* rgulU = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulU = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* iulD = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* iulR = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "MpDiv1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgulU, ciulU, iulD, iulR});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::DWL
// Il2CppName: DWL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint, uint)>(&System::Data::SqlTypes::SqlDecimal::DWL)> {
  static const MethodInfo* get() {
    static auto* lo = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* hi = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "DWL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lo, hi});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::HI
// Il2CppName: HI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&System::Data::SqlTypes::SqlDecimal::HI)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "HI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::LO
// Il2CppName: LO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&System::Data::SqlTypes::SqlDecimal::LO)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "LO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::MpDiv
// Il2CppName: MpDiv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<uint>, int, ::ArrayW<uint>, int, ::ArrayW<uint>, ByRef<int>, ::ArrayW<uint>, ByRef<int>)>(&System::Data::SqlTypes::SqlDecimal::MpDiv)> {
  static const MethodInfo* get() {
    static auto* rgulU = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulU = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rgulD = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulD = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rgulQ = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulQ = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* rgulR = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    static auto* ciulR = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "MpDiv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgulU, ciulU, rgulD, ciulD, rgulQ, ciulQ, rgulR, ciulR});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::CompareNm
// Il2CppName: CompareNm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SqlTypes::EComparison (System::Data::SqlTypes::SqlDecimal::*)(::System::Data::SqlTypes::SqlDecimal)>(&System::Data::SqlTypes::SqlDecimal::CompareNm)> {
  static const MethodInfo* get() {
    static auto* snumOp = &::il2cpp_utils::GetClassFromName("System.Data.SqlTypes", "SqlDecimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "CompareNm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{snumOp});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::CheckValidPrecScale
// Il2CppName: CheckValidPrecScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint8_t, uint8_t)>(&System::Data::SqlTypes::SqlDecimal::CheckValidPrecScale)> {
  static const MethodInfo* get() {
    static auto* bPrec = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* bScale = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "CheckValidPrecScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bPrec, bScale});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::LessThan
// Il2CppName: LessThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SqlTypes::SqlBoolean (*)(::System::Data::SqlTypes::SqlDecimal, ::System::Data::SqlTypes::SqlDecimal)>(&System::Data::SqlTypes::SqlDecimal::LessThan)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System.Data.SqlTypes", "SqlDecimal")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System.Data.SqlTypes", "SqlDecimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "LessThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::GreaterThan
// Il2CppName: GreaterThan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SqlTypes::SqlBoolean (*)(::System::Data::SqlTypes::SqlDecimal, ::System::Data::SqlTypes::SqlDecimal)>(&System::Data::SqlTypes::SqlDecimal::GreaterThan)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System.Data.SqlTypes", "SqlDecimal")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System.Data.SqlTypes", "SqlDecimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "GreaterThan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::ToSqlDouble
// Il2CppName: ToSqlDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SqlTypes::SqlDouble (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::ToSqlDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "ToSqlDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::ToSqlInt64
// Il2CppName: ToSqlInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SqlTypes::SqlInt64 (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::ToSqlInt64)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "ToSqlInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::ToSqlMoney
// Il2CppName: ToSqlMoney
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SqlTypes::SqlMoney (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::ToSqlMoney)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "ToSqlMoney", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::ChFromDigit
// Il2CppName: ChFromDigit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(uint)>(&System::Data::SqlTypes::SqlDecimal::ChFromDigit)> {
  static const MethodInfo* get() {
    static auto* uiDigit = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "ChFromDigit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uiDigit});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::StoreFromWorkingArray
// Il2CppName: StoreFromWorkingArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)(::ArrayW<uint>)>(&System::Data::SqlTypes::SqlDecimal::StoreFromWorkingArray)> {
  static const MethodInfo* get() {
    static auto* rguiData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "UInt32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "StoreFromWorkingArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rguiData});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::SetToZero
// Il2CppName: SetToZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::SetToZero)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "SetToZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::SqlTypes::SqlDecimal::*)(::Il2CppObject*)>(&System::Data::SqlTypes::SqlDecimal::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::SqlTypes::SqlDecimal::*)(::System::Data::SqlTypes::SqlDecimal)>(&System::Data::SqlTypes::SqlDecimal::CompareTo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Data.SqlTypes", "SqlDecimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::System_Xml_Serialization_IXmlSerializable_GetSchema
// Il2CppName: System.Xml.Serialization.IXmlSerializable.GetSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::System_Xml_Serialization_IXmlSerializable_GetSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "System.Xml.Serialization.IXmlSerializable.GetSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::System_Xml_Serialization_IXmlSerializable_ReadXml
// Il2CppName: System.Xml.Serialization.IXmlSerializable.ReadXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)(::System::Xml::XmlReader*)>(&System::Data::SqlTypes::SqlDecimal::System_Xml_Serialization_IXmlSerializable_ReadXml)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "System.Xml.Serialization.IXmlSerializable.ReadXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::System_Xml_Serialization_IXmlSerializable_WriteXml
// Il2CppName: System.Xml.Serialization.IXmlSerializable.WriteXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SqlTypes::SqlDecimal::*)(::System::Xml::XmlWriter*)>(&System::Data::SqlTypes::SqlDecimal::System_Xml_Serialization_IXmlSerializable_WriteXml)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "System.Xml.Serialization.IXmlSerializable.WriteXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::GetXsdType
// Il2CppName: GetXsdType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (*)(::System::Xml::Schema::XmlSchemaSet*)>(&System::Data::SqlTypes::SqlDecimal::GetXsdType)> {
  static const MethodInfo* get() {
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "GetXsdType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaSet});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SqlTypes::SqlDecimal::*)(::Il2CppObject*)>(&System::Data::SqlTypes::SqlDecimal::Equals)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::SqlTypes::SqlDecimal::*)()>(&System::Data::SqlTypes::SqlDecimal::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SqlTypes::SqlDecimal), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::operator-
// Il2CppName: op_UnaryNegation
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::operator-
// Il2CppName: op_Subtraction
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::operator/
// Il2CppName: op_Division
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::operator <
// Il2CppName: op_LessThan
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: System::Data::SqlTypes::SqlDecimal::operator >
// Il2CppName: op_GreaterThan
// Cannot perform method pointer template specialization from operators!
