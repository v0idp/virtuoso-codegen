// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: System.Data.TreeAccessMethod
#include "System/Data/TreeAccessMethod.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Skipping declaration: NodeColor because it is already included!
  // Skipping declaration: Node because it is already included!
  // Skipping declaration: NodePath because it is already included!
  // Skipping declaration: TreePage because it is already included!
  // Skipping declaration: RBTreeEnumerator because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: RBTree`1<K>
  template<typename K>
  class RBTree_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Data::RBTree_1, "System.Data", "RBTree`1");
// Type namespace: System.Data
namespace System::Data {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Data.RBTree`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6BA4A8
  template<typename K>
  class RBTree_1 : public ::Il2CppObject/*, public ::System::Collections::IEnumerable*/ {
    public:
    // Nested type: ::System::Data::RBTree_1::NodeColor<K>
    struct NodeColor;
    // Nested type: ::System::Data::RBTree_1::Node<K>
    struct Node;
    // Nested type: ::System::Data::RBTree_1::NodePath<K>
    struct NodePath;
    // Nested type: ::System::Data::RBTree_1::TreePage<K>
    class TreePage;
    // Nested type: ::System::Data::RBTree_1::RBTreeEnumerator<K>
    struct RBTreeEnumerator;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Data.RBTree`1/System.Data.NodeColor
    // [TokenAttribute] Offset: FFFFFFFF
    struct NodeColor : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::Enum*/ {
      public:
      using declaring_type = RBTree_1<K>*;
      static constexpr std::string_view NESTED_NAME = "NodeColor";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NodeColor
      constexpr NodeColor(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // Autogenerated static field getter
      // Get static field: static public System.Data.RBTree`1/System.Data.NodeColor<K> red
      static typename ::System::Data::RBTree_1<K>::NodeColor _get_red() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::NodeColor::_get_red");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Data::RBTree_1<K>::NodeColor>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename RBTree_1<K>::NodeColor>::get(), "red"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Data.RBTree`1/System.Data.NodeColor<K> red
      static void _set_red(typename ::System::Data::RBTree_1<K>::NodeColor value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::NodeColor::_set_red");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename RBTree_1<K>::NodeColor>::get(), "red", value));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Data.RBTree`1/System.Data.NodeColor<K> black
      static typename ::System::Data::RBTree_1<K>::NodeColor _get_black() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::NodeColor::_get_black");
        return THROW_UNLESS(il2cpp_utils::GetFieldValue<typename ::System::Data::RBTree_1<K>::NodeColor>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename RBTree_1<K>::NodeColor>::get(), "black"));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Data.RBTree`1/System.Data.NodeColor<K> black
      static void _set_black(typename ::System::Data::RBTree_1<K>::NodeColor value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::NodeColor::_set_black");
        THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename RBTree_1<K>::NodeColor>::get(), "black", value));
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::NodeColor::dyn_value__");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "value__"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // System.Data.RBTree`1/System.Data.NodeColor
    // Could not write size check! Type: System.Data.RBTree`1/System.Data.NodeColor is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Data.RBTree`1/System.Data.Node
    // [TokenAttribute] Offset: FFFFFFFF
    struct Node : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType*/ {
      public:
      using declaring_type = RBTree_1<K>*;
      static constexpr std::string_view NESTED_NAME = "Node";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // System.Int32 _selfId
      // Size: 0x4
      // Offset: 0x0
      int selfId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 _leftId
      // Size: 0x4
      // Offset: 0x0
      int leftId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 _rightId
      // Size: 0x4
      // Offset: 0x0
      int rightId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 _parentId
      // Size: 0x4
      // Offset: 0x0
      int parentId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 _nextId
      // Size: 0x4
      // Offset: 0x0
      int nextId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 _subTreeSize
      // Size: 0x4
      // Offset: 0x0
      int subTreeSize;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // K _keyOfNode
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      K keyOfNode;
      // System.Data.RBTree`1/System.Data.NodeColor<K> _nodeColor
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename ::System::Data::RBTree_1<K>::NodeColor nodeColor;
      public:
      // Creating value type constructor for type: Node
      constexpr Node(int selfId_ = {}, int leftId_ = {}, int rightId_ = {}, int parentId_ = {}, int nextId_ = {}, int subTreeSize_ = {}, K keyOfNode_ = {}, typename ::System::Data::RBTree_1<K>::NodeColor nodeColor_ = {}) noexcept : selfId{selfId_}, leftId{leftId_}, rightId{rightId_}, parentId{parentId_}, nextId{nextId_}, subTreeSize{subTreeSize_}, keyOfNode{keyOfNode_}, nodeColor{nodeColor_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 _selfId
      [[deprecated("Use field access instead!")]] int& dyn__selfId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Node::dyn__selfId");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_selfId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 _leftId
      [[deprecated("Use field access instead!")]] int& dyn__leftId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Node::dyn__leftId");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_leftId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 _rightId
      [[deprecated("Use field access instead!")]] int& dyn__rightId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Node::dyn__rightId");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rightId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 _parentId
      [[deprecated("Use field access instead!")]] int& dyn__parentId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Node::dyn__parentId");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_parentId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 _nextId
      [[deprecated("Use field access instead!")]] int& dyn__nextId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Node::dyn__nextId");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nextId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 _subTreeSize
      [[deprecated("Use field access instead!")]] int& dyn__subTreeSize() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Node::dyn__subTreeSize");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_subTreeSize"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: K _keyOfNode
      [[deprecated("Use field access instead!")]] K& dyn__keyOfNode() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Node::dyn__keyOfNode");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_keyOfNode"))->offset;
        return *reinterpret_cast<K*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Data.RBTree`1/System.Data.NodeColor<K> _nodeColor
      [[deprecated("Use field access instead!")]] typename ::System::Data::RBTree_1<K>::NodeColor& dyn__nodeColor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Node::dyn__nodeColor");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeColor"))->offset;
        return *reinterpret_cast<typename ::System::Data::RBTree_1<K>::NodeColor*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
    }; // System.Data.RBTree`1/System.Data.Node
    // Could not write size check! Type: System.Data.RBTree`1/System.Data.Node is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Data.RBTree`1/System.Data.NodePath
    // [TokenAttribute] Offset: FFFFFFFF
    struct NodePath : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType*/ {
      public:
      using declaring_type = RBTree_1<K>*;
      static constexpr std::string_view NESTED_NAME = "NodePath";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // readonly System.Int32 _nodeID
      // Size: 0x4
      // Offset: 0x0
      int nodeID;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // readonly System.Int32 _mainTreeNodeID
      // Size: 0x4
      // Offset: 0x0
      int mainTreeNodeID;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: NodePath
      constexpr NodePath(int nodeID_ = {}, int mainTreeNodeID_ = {}) noexcept : nodeID{nodeID_}, mainTreeNodeID{mainTreeNodeID_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: readonly System.Int32 _nodeID
      [[deprecated("Use field access instead!")]] int& dyn__nodeID() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::NodePath::dyn__nodeID");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nodeID"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: readonly System.Int32 _mainTreeNodeID
      [[deprecated("Use field access instead!")]] int& dyn__mainTreeNodeID() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::NodePath::dyn__mainTreeNodeID");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainTreeNodeID"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void .ctor(System.Int32 nodeID, System.Int32 mainTreeNodeID)
      // Offset: 0xFFFFFFFFFFFFFFFF
      // ABORTED: conflicts with another method.  NodePath(int nodeID, int mainTreeNodeID)
    }; // System.Data.RBTree`1/System.Data.NodePath
    // Could not write size check! Type: System.Data.RBTree`1/System.Data.NodePath is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Data.RBTree`1/System.Data.TreePage
    // [TokenAttribute] Offset: FFFFFFFF
    class TreePage : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RBTree_1<K>*;
      static constexpr std::string_view NESTED_NAME = "TreePage";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // readonly System.Data.RBTree`1/System.Data.Node<K>[] _slots
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<typename ::System::Data::RBTree_1<K>::Node> slots;
      // Field size check
      static_assert(sizeof(::ArrayW<typename ::System::Data::RBTree_1<K>::Node>) == 0x8);
      // readonly System.Int32[] _slotMap
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<int> slotMap;
      // Field size check
      static_assert(sizeof(::ArrayW<int>) == 0x8);
      // private System.Int32 _inUseCount
      // Size: 0x4
      // Offset: 0x0
      int inUseCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 _pageId
      // Size: 0x4
      // Offset: 0x0
      int pageId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 _nextFreeSlotLine
      // Size: 0x4
      // Offset: 0x0
      int nextFreeSlotLine;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Autogenerated instance field getter
      // Get instance field: readonly System.Data.RBTree`1/System.Data.Node<K>[] _slots
      [[deprecated("Use field access instead!")]] ::ArrayW<typename ::System::Data::RBTree_1<K>::Node>& dyn__slots() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::dyn__slots");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_slots"))->offset;
        return *reinterpret_cast<::ArrayW<typename ::System::Data::RBTree_1<K>::Node>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: readonly System.Int32[] _slotMap
      [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__slotMap() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::dyn__slotMap");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_slotMap"))->offset;
        return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _inUseCount
      [[deprecated("Use field access instead!")]] int& dyn__inUseCount() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::dyn__inUseCount");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inUseCount"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _pageId
      [[deprecated("Use field access instead!")]] int& dyn__pageId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::dyn__pageId");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pageId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _nextFreeSlotLine
      [[deprecated("Use field access instead!")]] int& dyn__nextFreeSlotLine() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::dyn__nextFreeSlotLine");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nextFreeSlotLine"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Int32 get_InUseCount()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_InUseCount() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::get_InUseCount");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InUseCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // System.Void set_InUseCount(System.Int32 value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_InUseCount(int value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::set_InUseCount");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_InUseCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // System.Int32 get_PageId()
      // Offset: 0xFFFFFFFFFFFFFFFF
      int get_PageId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::get_PageId");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PageId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
      }
      // System.Void set_PageId(System.Int32 value)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void set_PageId(int value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::set_PageId");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_PageId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
      }
      // System.Void .ctor(System.Int32 size)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RBTree_1<K>::TreePage* New_ctor(int size) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RBTree_1<K>::TreePage*, creationType>(size)));
      }
      // System.Int32 AllocSlot(System.Data.RBTree`1<K> tree)
      // Offset: 0xFFFFFFFFFFFFFFFF
      int AllocSlot(::System::Data::RBTree_1<K>* tree) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::TreePage::AllocSlot");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllocSlot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree)})));
        return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, tree);
      }
    }; // System.Data.RBTree`1/System.Data.TreePage
    // Could not write size check! Type: System.Data.RBTree`1/System.Data.TreePage is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Data.RBTree`1/System.Data.RBTreeEnumerator
    // [TokenAttribute] Offset: FFFFFFFF
    struct RBTreeEnumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerator_1<K>*/ {
      public:
      using declaring_type = RBTree_1<K>*;
      static constexpr std::string_view NESTED_NAME = "RBTreeEnumerator";
      static constexpr bool IS_VALUE_TYPE = true;
      public:
      // private readonly System.Data.RBTree`1<K> _tree
      // Size: 0x8
      // Offset: 0x0
      ::System::Data::RBTree_1<K>* tree;
      // Field size check
      static_assert(sizeof(::System::Data::RBTree_1<K>*) == 0x8);
      // private readonly System.Int32 _version
      // Size: 0x4
      // Offset: 0x0
      int version;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 _index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 _mainTreeNodeId
      // Size: 0x4
      // Offset: 0x0
      int mainTreeNodeId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private K _current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      K current;
      public:
      // Creating value type constructor for type: RBTreeEnumerator
      constexpr RBTreeEnumerator(::System::Data::RBTree_1<K>* tree_ = {}, int version_ = {}, int index_ = {}, int mainTreeNodeId_ = {}, K current_ = {}) noexcept : tree{tree_}, version{version_}, index{index_}, mainTreeNodeId{mainTreeNodeId_}, current{current_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<K>
      operator ::System::Collections::Generic::IEnumerator_1<K>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<K>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Data.RBTree`1<K> _tree
      [[deprecated("Use field access instead!")]] ::System::Data::RBTree_1<K>*& dyn__tree() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::dyn__tree");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_tree"))->offset;
        return *reinterpret_cast<::System::Data::RBTree_1<K>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private readonly System.Int32 _version
      [[deprecated("Use field access instead!")]] int& dyn__version() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::dyn__version");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_version"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _index
      [[deprecated("Use field access instead!")]] int& dyn__index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::dyn__index");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 _mainTreeNodeId
      [[deprecated("Use field access instead!")]] int& dyn__mainTreeNodeId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::dyn__mainTreeNodeId");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_mainTreeNodeId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private K _current
      [[deprecated("Use field access instead!")]] K& dyn__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::dyn__current");
        auto ___internal__instance = *this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_current"))->offset;
        return *reinterpret_cast<K*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public K get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      K get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Data::RBTree_1<K>::RBTreeEnumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<K, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Data::RBTree_1<K>::RBTreeEnumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // System.Void .ctor(System.Data.RBTree`1<K> tree)
      // Offset: 0xFFFFFFFFFFFFFFFF
      RBTreeEnumerator(::System::Data::RBTree_1<K>* tree) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tree);
      }
      // System.Void .ctor(System.Data.RBTree`1<K> tree, System.Int32 position)
      // Offset: 0xFFFFFFFFFFFFFFFF
      RBTreeEnumerator(::System::Data::RBTree_1<K>* tree, int position) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tree), ::il2cpp_utils::ExtractType(position)})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, tree, position);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Data::RBTree_1<K>::RBTreeEnumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Data::RBTree_1<K>::RBTreeEnumerator), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBTreeEnumerator::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(typename ::System::Data::RBTree_1<K>::RBTreeEnumerator), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // System.Data.RBTree`1/System.Data.RBTreeEnumerator
    // Could not write size check! Type: System.Data.RBTree`1/System.Data.RBTreeEnumerator is generic, or has no fields that are valid for size checks!
    public:
    // private System.Data.RBTree`1/System.Data.TreePage<K>[] _pageTable
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<typename ::System::Data::RBTree_1<K>::TreePage*> pageTable;
    // Field size check
    static_assert(sizeof(::ArrayW<typename ::System::Data::RBTree_1<K>::TreePage*>) == 0x8);
    // private System.Int32[] _pageTableMap
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<int> pageTableMap;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private System.Int32 _inUsePageCount
    // Size: 0x4
    // Offset: 0x0
    int inUsePageCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _nextFreePageLine
    // Size: 0x4
    // Offset: 0x0
    int nextFreePageLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 root
    // Size: 0x4
    // Offset: 0x0
    int root;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _version
    // Size: 0x4
    // Offset: 0x0
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _inUseNodeCount
    // Size: 0x4
    // Offset: 0x0
    int inUseNodeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _inUseSatelliteTreeCount
    // Size: 0x4
    // Offset: 0x0
    int inUseSatelliteTreeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Data.TreeAccessMethod _accessMethod
    // Size: 0x4
    // Offset: 0x0
    ::System::Data::TreeAccessMethod accessMethod;
    // Field size check
    static_assert(sizeof(::System::Data::TreeAccessMethod) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::IEnumerable
    operator ::System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<::System::Collections::IEnumerable*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Data.RBTree`1/System.Data.TreePage<K>[] _pageTable
    [[deprecated("Use field access instead!")]] ::ArrayW<typename ::System::Data::RBTree_1<K>::TreePage*>& dyn__pageTable() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn__pageTable");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pageTable"))->offset;
      return *reinterpret_cast<::ArrayW<typename ::System::Data::RBTree_1<K>::TreePage*>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32[] _pageTableMap
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__pageTableMap() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn__pageTableMap");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_pageTableMap"))->offset;
      return *reinterpret_cast<::ArrayW<int>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _inUsePageCount
    [[deprecated("Use field access instead!")]] int& dyn__inUsePageCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn__inUsePageCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inUsePageCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _nextFreePageLine
    [[deprecated("Use field access instead!")]] int& dyn__nextFreePageLine() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn__nextFreePageLine");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_nextFreePageLine"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 root
    [[deprecated("Use field access instead!")]] int& dyn_root() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn_root");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "root"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _version
    [[deprecated("Use field access instead!")]] int& dyn__version() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn__version");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_version"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _inUseNodeCount
    [[deprecated("Use field access instead!")]] int& dyn__inUseNodeCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn__inUseNodeCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inUseNodeCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _inUseSatelliteTreeCount
    [[deprecated("Use field access instead!")]] int& dyn__inUseSatelliteTreeCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn__inUseSatelliteTreeCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_inUseSatelliteTreeCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Data.TreeAccessMethod _accessMethod
    [[deprecated("Use field access instead!")]] ::System::Data::TreeAccessMethod& dyn__accessMethod() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::dyn__accessMethod");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_accessMethod"))->offset;
      return *reinterpret_cast<::System::Data::TreeAccessMethod*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Boolean get_HasDuplicates()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_HasDuplicates() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::get_HasDuplicates");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasDuplicates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public K get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    K get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::get_Item");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<K, false>(this, ___internal__method, index);
    }
    // protected System.Void .ctor(System.Data.TreeAccessMethod accessMethod)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RBTree_1<K>* New_ctor(::System::Data::TreeAccessMethod accessMethod) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RBTree_1<K>*, creationType>(accessMethod)));
    }
    // protected System.Int32 CompareNode(K record1, K record2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int CompareNode(K record1, K record2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::CompareNode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Data::RBTree_1<K>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, record1, record2);
    }
    // protected System.Int32 CompareSateliteTreeNode(K record1, K record2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int CompareSateliteTreeNode(K record1, K record2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::CompareSateliteTreeNode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Data::RBTree_1<K>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, record1, record2);
    }
    // private System.Void InitTree()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void InitTree() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::InitTree");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void FreePage(System.Data.RBTree`1/System.Data.TreePage<K> page)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FreePage(typename ::System::Data::RBTree_1<K>::TreePage* page) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::FreePage");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreePage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(page)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, page);
    }
    // private System.Data.RBTree`1/System.Data.TreePage<K> AllocPage(System.Int32 size)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Data::RBTree_1<K>::TreePage* AllocPage(int size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::AllocPage");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AllocPage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Data::RBTree_1<K>::TreePage*, false>(this, ___internal__method, size);
    }
    // private System.Void MarkPageFull(System.Data.RBTree`1/System.Data.TreePage<K> page)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void MarkPageFull(typename ::System::Data::RBTree_1<K>::TreePage* page) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::MarkPageFull");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkPageFull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(page)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, page);
    }
    // private System.Void MarkPageFree(System.Data.RBTree`1/System.Data.TreePage<K> page)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void MarkPageFree(typename ::System::Data::RBTree_1<K>::TreePage* page) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::MarkPageFree");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkPageFree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(page)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, page);
    }
    // static private System.Int32 GetIntValueFromBitMap(System.UInt32 bitMap)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static int GetIntValueFromBitMap(uint bitMap) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetIntValueFromBitMap");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<RBTree_1<K>*>::get(), "GetIntValueFromBitMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bitMap)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, bitMap);
    }
    // private System.Void FreeNode(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FreeNode(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::FreeNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId);
    }
    // private System.Int32 GetIndexOfPageWithFreeSlot(System.Boolean allocatedPage)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetIndexOfPageWithFreeSlot(bool allocatedPage) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetIndexOfPageWithFreeSlot");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexOfPageWithFreeSlot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allocatedPage)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, allocatedPage);
    }
    // private System.Int32 GetNewNode(K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetNewNode(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetNewNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key);
    }
    // private System.Int32 Successor(System.Int32 x_id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Successor(int x_id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Successor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Successor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x_id)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x_id);
    }
    // private System.Boolean Successor(ref System.Int32 nodeId, ref System.Int32 mainTreeNodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Successor(ByRef<int> nodeId, ByRef<int> mainTreeNodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Successor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Successor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(mainTreeNodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, byref(nodeId), byref(mainTreeNodeId));
    }
    // private System.Int32 Minimum(System.Int32 x_id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Minimum(int x_id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Minimum");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Minimum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x_id)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x_id);
    }
    // private System.Int32 LeftRotate(System.Int32 root_id, System.Int32 x_id, System.Int32 mainTreeNode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int LeftRotate(int root_id, int x_id, int mainTreeNode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::LeftRotate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LeftRotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root_id), ::il2cpp_utils::ExtractType(x_id), ::il2cpp_utils::ExtractType(mainTreeNode)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, root_id, x_id, mainTreeNode);
    }
    // private System.Int32 RightRotate(System.Int32 root_id, System.Int32 x_id, System.Int32 mainTreeNode)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int RightRotate(int root_id, int x_id, int mainTreeNode) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RightRotate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RightRotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root_id), ::il2cpp_utils::ExtractType(x_id), ::il2cpp_utils::ExtractType(mainTreeNode)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, root_id, x_id, mainTreeNode);
    }
    // private System.Int32 RBInsert(System.Int32 root_id, System.Int32 x_id, System.Int32 mainTreeNodeID, System.Int32 position, System.Boolean append)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int RBInsert(int root_id, int x_id, int mainTreeNodeID, int position, bool append) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBInsert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RBInsert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root_id), ::il2cpp_utils::ExtractType(x_id), ::il2cpp_utils::ExtractType(mainTreeNodeID), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(append)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, root_id, x_id, mainTreeNodeID, position, append);
    }
    // public System.Void UpdateNodeKey(K currentKey, K newKey)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UpdateNodeKey(K currentKey, K newKey) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::UpdateNodeKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateNodeKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentKey), ::il2cpp_utils::ExtractType(newKey)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, currentKey, newKey);
    }
    // public K DeleteByIndex(System.Int32 i)
    // Offset: 0xFFFFFFFFFFFFFFFF
    K DeleteByIndex(int i) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::DeleteByIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
      return ::il2cpp_utils::RunMethodRethrow<K, false>(this, ___internal__method, i);
    }
    // public System.Int32 RBDelete(System.Int32 z_id)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int RBDelete(int z_id) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBDelete");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RBDelete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(z_id)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, z_id);
    }
    // private System.Int32 RBDeleteX(System.Int32 root_id, System.Int32 z_id, System.Int32 mainTreeNodeID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int RBDeleteX(int root_id, int z_id, int mainTreeNodeID) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBDeleteX");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RBDeleteX", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root_id), ::il2cpp_utils::ExtractType(z_id), ::il2cpp_utils::ExtractType(mainTreeNodeID)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, root_id, z_id, mainTreeNodeID);
    }
    // private System.Int32 RBDeleteFixup(System.Int32 root_id, System.Int32 x_id, System.Int32 px_id, System.Int32 mainTreeNodeID)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int RBDeleteFixup(int root_id, int x_id, int px_id, int mainTreeNodeID) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RBDeleteFixup");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RBDeleteFixup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root_id), ::il2cpp_utils::ExtractType(x_id), ::il2cpp_utils::ExtractType(px_id), ::il2cpp_utils::ExtractType(mainTreeNodeID)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, root_id, x_id, px_id, mainTreeNodeID);
    }
    // private System.Int32 SearchSubTree(System.Int32 root_id, K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int SearchSubTree(int root_id, K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SearchSubTree");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SearchSubTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root_id), ::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, root_id, key);
    }
    // private System.Data.RBTree`1/System.Data.NodePath<K> GetNodeByKey(K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Data::RBTree_1<K>::NodePath GetNodeByKey(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetNodeByKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodeByKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Data::RBTree_1<K>::NodePath, false>(this, ___internal__method, key);
    }
    // public System.Int32 GetIndexByKey(K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetIndexByKey(K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetIndexByKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexByKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, key);
    }
    // public System.Int32 GetIndexByNode(System.Int32 node)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetIndexByNode(int node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetIndexByNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexByNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, node);
    }
    // private System.Int32 GetIndexByNodePath(System.Data.RBTree`1/System.Data.NodePath<K> path)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int GetIndexByNodePath(typename ::System::Data::RBTree_1<K>::NodePath path) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetIndexByNodePath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIndexByNodePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, path);
    }
    // private System.Int32 ComputeIndexByNode(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ComputeIndexByNode(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::ComputeIndexByNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeIndexByNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nodeId);
    }
    // private System.Int32 ComputeIndexWithSatelliteByNode(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ComputeIndexWithSatelliteByNode(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::ComputeIndexWithSatelliteByNode");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeIndexWithSatelliteByNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nodeId);
    }
    // private System.Data.RBTree`1/System.Data.NodePath<K> GetNodeByIndex(System.Int32 userIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Data::RBTree_1<K>::NodePath GetNodeByIndex(int userIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetNodeByIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodeByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userIndex)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Data::RBTree_1<K>::NodePath, false>(this, ___internal__method, userIndex);
    }
    // private System.Int32 ComputeNodeByIndex(System.Int32 index, out System.Int32 satelliteRootId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ComputeNodeByIndex(int index, ByRef<int> satelliteRootId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::ComputeNodeByIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeNodeByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, index, byref(satelliteRootId));
    }
    // private System.Int32 ComputeNodeByIndex(System.Int32 x_id, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int ComputeNodeByIndex_(int x_id, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::ComputeNodeByIndex");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeNodeByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x_id), ::il2cpp_utils::ExtractType(index)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, x_id, index);
    }
    // public System.Int32 Insert(K item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Insert(K item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Insert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // public System.Int32 Add(K item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Add(K item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, item);
    }
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::System::Data::RBTree_1<K>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // public System.Int32 IndexOf(System.Int32 nodeId, K item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOf(int nodeId, K item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IndexOf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nodeId, item);
    }
    // public System.Int32 Insert(System.Int32 position, K item)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Insert(int position, K item) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Insert");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(item)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, position, item);
    }
    // public System.Int32 InsertAt(System.Int32 position, K item, System.Boolean append)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int InsertAt(int position, K item, bool append) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::InsertAt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InsertAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(item), ::il2cpp_utils::ExtractType(append)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, position, item, append);
    }
    // public System.Void RemoveAt(System.Int32 position)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveAt(int position) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RemoveAt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, position);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::System::Array* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // public System.Void CopyTo(K[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CopyTo(::ArrayW<K> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Void SetRight(System.Int32 nodeId, System.Int32 rightNodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetRight(int nodeId, int rightNodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SetRight");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(rightNodeId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId, rightNodeId);
    }
    // private System.Void SetLeft(System.Int32 nodeId, System.Int32 leftNodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetLeft(int nodeId, int leftNodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SetLeft");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(leftNodeId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId, leftNodeId);
    }
    // private System.Void SetParent(System.Int32 nodeId, System.Int32 parentNodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetParent(int nodeId, int parentNodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SetParent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(parentNodeId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId, parentNodeId);
    }
    // private System.Void SetColor(System.Int32 nodeId, System.Data.RBTree`1/System.Data.NodeColor<K> color)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetColor(int nodeId, typename ::System::Data::RBTree_1<K>::NodeColor color) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SetColor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(color)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId, color);
    }
    // private System.Void SetKey(System.Int32 nodeId, K key)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetKey(int nodeId, K key) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SetKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(key)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId, key);
    }
    // private System.Void SetNext(System.Int32 nodeId, System.Int32 nextNodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetNext(int nodeId, int nextNodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SetNext");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(nextNodeId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId, nextNodeId);
    }
    // private System.Void SetSubTreeSize(System.Int32 nodeId, System.Int32 size)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetSubTreeSize(int nodeId, int size) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SetSubTreeSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSubTreeSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId), ::il2cpp_utils::ExtractType(size)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId, size);
    }
    // private System.Void IncreaseSize(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void IncreaseSize(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::IncreaseSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IncreaseSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId);
    }
    // private System.Void RecomputeSize(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RecomputeSize(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::RecomputeSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecomputeSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId);
    }
    // private System.Void DecreaseSize(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DecreaseSize(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::DecreaseSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecreaseSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nodeId);
    }
    // public System.Int32 Right(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Right(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Right");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Right", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nodeId);
    }
    // public System.Int32 Left(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Left(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Left");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Left", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nodeId);
    }
    // public System.Int32 Parent(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Parent(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Parent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nodeId);
    }
    // private System.Data.RBTree`1/System.Data.NodeColor<K> color(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    typename ::System::Data::RBTree_1<K>::NodeColor color(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::color");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<typename ::System::Data::RBTree_1<K>::NodeColor, false>(this, ___internal__method, nodeId);
    }
    // public System.Int32 Next(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Next(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Next");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Next", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nodeId);
    }
    // public System.Int32 SubTreeSize(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int SubTreeSize(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::SubTreeSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubTreeSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, nodeId);
    }
    // public K Key(System.Int32 nodeId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    K Key(int nodeId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RBTree_1::Key");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Key", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nodeId)})));
      return ::il2cpp_utils::RunMethodRethrow<K, false>(this, ___internal__method, nodeId);
    }
  }; // System.Data.RBTree`1
  // Could not write size check! Type: System.Data.RBTree`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
