// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.MulticastDelegate
#include "System/MulticastDelegate.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Skipping declaration: Action`4 because it is already included!
  // Skipping declaration: Func`2 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: Listeners`1<TElem>
  template<typename TElem>
  class Listeners_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::System::Data::Listeners_1, "System.Data", "Listeners`1");
// Type namespace: System.Data
namespace System::Data {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Data.Listeners`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TElem>
  class Listeners_1 : public ::Il2CppObject {
    public:
    // Nested type: ::System::Data::Listeners_1::Action_4<TElem, T1, T2, T3, T4>
    template<typename T1, typename T2, typename T3, typename T4>
    class Action_4;
    // Nested type: ::System::Data::Listeners_1::Func_2<TElem, T1, TResult>
    template<typename T1, typename TResult>
    class Func_2;
    // WARNING Size may be invalid!
    // Autogenerated type: System.Data.Listeners`1/System.Data.Action`4
    // [TokenAttribute] Offset: FFFFFFFF
    template<typename T1, typename T2, typename T3, typename T4>
    class Action_4 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::System::MulticastDelegate {
      public:
      using declaring_type = Listeners_1<TElem>*;
      static constexpr std::string_view NESTED_NAME = "Action`4";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Void .ctor(System.Object object, System.IntPtr method)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Listeners_1<TElem>::Action_4<T1, T2, T3, T4>* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Action_4::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Listeners_1<TElem>::Action_4<T1, T2, T3, T4>*, creationType>(object, method)));
      }
      // public System.Void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Action_4::Invoke");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Data::Listeners_1<TElem>::Action_4<T1, T2, T3, T4>*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, arg1, arg2, arg3, arg4);
      }
      // public System.IAsyncResult BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, System.AsyncCallback callback, System.Object object)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::IAsyncResult* BeginInvoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Action_4::BeginInvoke");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Data::Listeners_1<TElem>::Action_4<T1, T2, T3, T4>*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, arg1, arg2, arg3, arg4, callback, object);
      }
      // public System.Void EndInvoke(System.IAsyncResult result)
      // Offset: 0xFFFFFFFFFFFFFFFF
      void EndInvoke(::System::IAsyncResult* result) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Action_4::EndInvoke");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Data::Listeners_1<TElem>::Action_4<T1, T2, T3, T4>*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, result);
      }
    }; // System.Data.Listeners`1/System.Data.Action`4
    // Could not write size check! Type: System.Data.Listeners`1/System.Data.Action`4 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Data.Listeners`1/System.Data.Func`2
    // [TokenAttribute] Offset: FFFFFFFF
    template<typename T1, typename TResult>
    class Func_2 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::System::MulticastDelegate {
      public:
      using declaring_type = Listeners_1<TElem>*;
      static constexpr std::string_view NESTED_NAME = "Func`2";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Void .ctor(System.Object object, System.IntPtr method)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Listeners_1<TElem>::Func_2<T1, TResult>* New_ctor(::Il2CppObject* object, ::System::IntPtr method) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Func_2::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Listeners_1<TElem>::Func_2<T1, TResult>*, creationType>(object, method)));
      }
      // public TResult Invoke(T1 arg1)
      // Offset: 0xFFFFFFFFFFFFFFFF
      TResult Invoke(T1 arg1) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Func_2::Invoke");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Data::Listeners_1<TElem>::Func_2<T1, TResult>*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<TResult, false>(this, ___internal__method, arg1);
      }
      // public System.IAsyncResult BeginInvoke(T1 arg1, System.AsyncCallback callback, System.Object object)
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::IAsyncResult* BeginInvoke(T1 arg1, ::System::AsyncCallback* callback, ::Il2CppObject* object) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Func_2::BeginInvoke");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Data::Listeners_1<TElem>::Func_2<T1, TResult>*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::System::IAsyncResult*, false>(this, ___internal__method, arg1, callback, object);
      }
      // public TResult EndInvoke(System.IAsyncResult result)
      // Offset: 0xFFFFFFFFFFFFFFFF
      TResult EndInvoke(::System::IAsyncResult* result) {
        static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Func_2::EndInvoke");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::System::Data::Listeners_1<TElem>::Func_2<T1, TResult>*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<TResult, false>(this, ___internal__method, result);
      }
    }; // System.Data.Listeners`1/System.Data.Func`2
    // Could not write size check! Type: System.Data.Listeners`1/System.Data.Func`2 is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Collections.Generic.List`1<TElem> _listeners
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<TElem>* listeners;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<TElem>*) == 0x8);
    // private readonly System.Data.Listeners`1/System.Data.Func`2<TElem,TElem,System.Boolean> _filter
    // Size: 0x8
    // Offset: 0x0
    typename ::System::Data::Listeners_1<TElem>::Func_2<TElem, bool>* filter;
    // Field size check
    static_assert(sizeof(typename ::System::Data::Listeners_1<TElem>::Func_2<TElem, bool>*) == 0x8);
    // private readonly System.Int32 _objectID
    // Size: 0x4
    // Offset: 0x0
    int objectID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _listenerReaderCount
    // Size: 0x4
    // Offset: 0x0
    int listenerReaderCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.List`1<TElem> _listeners
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<TElem>*& dyn__listeners() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::dyn__listeners");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listeners"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<TElem>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Data.Listeners`1/System.Data.Func`2<TElem,TElem,System.Boolean> _filter
    [[deprecated("Use field access instead!")]] typename ::System::Data::Listeners_1<TElem>::Func_2<TElem, bool>*& dyn__filter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::dyn__filter");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_filter"))->offset;
      return *reinterpret_cast<typename ::System::Data::Listeners_1<TElem>::Func_2<TElem, bool>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 _objectID
    [[deprecated("Use field access instead!")]] int& dyn__objectID() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::dyn__objectID");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_objectID"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 _listenerReaderCount
    [[deprecated("Use field access instead!")]] int& dyn__listenerReaderCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::dyn__listenerReaderCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_listenerReaderCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Boolean get_HasListeners()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_HasListeners() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::get_HasListeners");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // System.Void .ctor(System.Int32 ObjectID, System.Data.Listeners`1/System.Data.Func`2<TElem,TElem,System.Boolean> notifyFilter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Listeners_1<TElem>* New_ctor(int ObjectID, typename ::System::Data::Listeners_1<TElem>::Func_2<TElem, bool>* notifyFilter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Listeners_1<TElem>*, creationType>(ObjectID, notifyFilter)));
    }
    // System.Void Add(TElem listener)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Add(TElem listener) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, listener);
    }
    // System.Int32 IndexOfReference(TElem listener)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int IndexOfReference(TElem listener) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::IndexOfReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IndexOfReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, listener);
    }
    // System.Void Remove(TElem listener)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Remove(TElem listener) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(listener)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, listener);
    }
    // System.Void Notify(T1 arg1, T2 arg2, T3 arg3, System.Data.Listeners`1/System.Data.Action`4<TElem,TElem,T1,T2,T3> action)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    void Notify(T1 arg1, T2 arg2, T3 arg3, typename ::System::Data::Listeners_1<TElem>::Action_4<TElem, T1, T2, T3>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::Notify");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Notify", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2), ::il2cpp_utils::ExtractType(arg3), ::il2cpp_utils::ExtractType(action)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, arg1, arg2, arg3, action);
    }
    // private System.Void RemoveNullListeners(System.Int32 nullIndex)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void RemoveNullListeners(int nullIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::Listeners_1::RemoveNullListeners");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNullListeners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nullIndex)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, nullIndex);
    }
  }; // System.Data.Listeners`1
  // Could not write size check! Type: System.Data.Listeners`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
