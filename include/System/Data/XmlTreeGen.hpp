// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.SchemaFormat
#include "System/Data/SchemaFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataSet
  class DataSet;
  // Forward declaring type: PropertyCollection
  class PropertyCollection;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataRelation
  class DataRelation;
  // Forward declaring type: DataColumn
  class DataColumn;
  // Forward declaring type: AcceptRejectRule
  struct AcceptRejectRule;
  // Forward declaring type: Rule
  struct Rule;
  // Forward declaring type: UniqueConstraint
  class UniqueConstraint;
  // Forward declaring type: ForeignKeyConstraint
  class ForeignKeyConstraint;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlDocument
  class XmlDocument;
  // Forward declaring type: XmlElement
  class XmlElement;
  // Forward declaring type: XmlWriter
  class XmlWriter;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Converter`2<TInput, TOutput>
  template<typename TInput, typename TOutput>
  class Converter_2;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyDescriptor
  class PropertyDescriptor;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: XmlTreeGen
  class XmlTreeGen;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::XmlTreeGen);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::XmlTreeGen*, "System.Data", "XmlTreeGen");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.XmlTreeGen
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlTreeGen : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.ArrayList _constraintNames
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::ArrayList* constraintNames;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.Hashtable _namespaces
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Hashtable* namespaces;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _autogenerated
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Hashtable* autogenerated;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.Hashtable _prefixes
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Hashtable* prefixes;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Data.DataSet _ds
    // Size: 0x8
    // Offset: 0x30
    ::System::Data::DataSet* ds;
    // Field size check
    static_assert(sizeof(::System::Data::DataSet*) == 0x8);
    // private System.Collections.ArrayList _tables
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::ArrayList* tables;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList _relations
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::ArrayList* relations;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Xml.XmlDocument _dc
    // Size: 0x8
    // Offset: 0x48
    ::System::Xml::XmlDocument* dc;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlDocument*) == 0x8);
    // private System.Xml.XmlElement _sRoot
    // Size: 0x8
    // Offset: 0x50
    ::System::Xml::XmlElement* sRoot;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlElement*) == 0x8);
    // private System.Int32 _prefixCount
    // Size: 0x4
    // Offset: 0x58
    int prefixCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Data.SchemaFormat _schFormat
    // Size: 0x4
    // Offset: 0x5C
    ::System::Data::SchemaFormat schFormat;
    // Field size check
    static_assert(sizeof(::System::Data::SchemaFormat) == 0x4);
    // private System.String _filePath
    // Size: 0x8
    // Offset: 0x60
    ::StringW filePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _fileName
    // Size: 0x8
    // Offset: 0x68
    ::StringW fileName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _fileExt
    // Size: 0x8
    // Offset: 0x70
    ::StringW fileExt;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Xml.XmlElement _dsElement
    // Size: 0x8
    // Offset: 0x78
    ::System::Xml::XmlElement* dsElement;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlElement*) == 0x8);
    // private System.Xml.XmlElement _constraintSeparator
    // Size: 0x8
    // Offset: 0x80
    ::System::Xml::XmlElement* constraintSeparator;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlElement*) == 0x8);
    // private System.Converter`2<System.Type,System.String> _targetConverter
    // Size: 0x8
    // Offset: 0x88
    ::System::Converter_2<::System::Type*, ::StringW>* targetConverter;
    // Field size check
    static_assert(sizeof(::System::Converter_2<::System::Type*, ::StringW>*) == 0x8);
    public:
    // Get instance field reference: private System.Collections.ArrayList _constraintNames
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__constraintNames();
    // Get instance field reference: private System.Collections.Hashtable _namespaces
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__namespaces();
    // Get instance field reference: private System.Collections.Hashtable _autogenerated
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__autogenerated();
    // Get instance field reference: private System.Collections.Hashtable _prefixes
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__prefixes();
    // Get instance field reference: private System.Data.DataSet _ds
    [[deprecated("Use field access instead!")]] ::System::Data::DataSet*& dyn__ds();
    // Get instance field reference: private System.Collections.ArrayList _tables
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__tables();
    // Get instance field reference: private System.Collections.ArrayList _relations
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__relations();
    // Get instance field reference: private System.Xml.XmlDocument _dc
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlDocument*& dyn__dc();
    // Get instance field reference: private System.Xml.XmlElement _sRoot
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlElement*& dyn__sRoot();
    // Get instance field reference: private System.Int32 _prefixCount
    [[deprecated("Use field access instead!")]] int& dyn__prefixCount();
    // Get instance field reference: private System.Data.SchemaFormat _schFormat
    [[deprecated("Use field access instead!")]] ::System::Data::SchemaFormat& dyn__schFormat();
    // Get instance field reference: private System.String _filePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__filePath();
    // Get instance field reference: private System.String _fileName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__fileName();
    // Get instance field reference: private System.String _fileExt
    [[deprecated("Use field access instead!")]] ::StringW& dyn__fileExt();
    // Get instance field reference: private System.Xml.XmlElement _dsElement
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlElement*& dyn__dsElement();
    // Get instance field reference: private System.Xml.XmlElement _constraintSeparator
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlElement*& dyn__constraintSeparator();
    // Get instance field reference: private System.Converter`2<System.Type,System.String> _targetConverter
    [[deprecated("Use field access instead!")]] ::System::Converter_2<::System::Type*, ::StringW>*& dyn__targetConverter();
    // System.Void .ctor(System.Data.SchemaFormat format)
    // Offset: 0x1620EDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlTreeGen* New_ctor(::System::Data::SchemaFormat format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XmlTreeGen::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlTreeGen*, creationType>(format)));
    }
    // static System.Void AddExtendedProperties(System.Data.PropertyCollection props, System.Xml.XmlElement node)
    // Offset: 0x1624F10
    static void AddExtendedProperties(::System::Data::PropertyCollection* props, ::System::Xml::XmlElement* node);
    // static System.Void AddExtendedProperties(System.Data.PropertyCollection props, System.Xml.XmlElement node, System.Type type)
    // Offset: 0x1624F18
    static void AddExtendedProperties(::System::Data::PropertyCollection* props, ::System::Xml::XmlElement* node, ::System::Type* type);
    // System.Void AddXdoProperties(System.Object instance, System.Xml.XmlElement root, System.Xml.XmlDocument xd)
    // Offset: 0x16256C0
    void AddXdoProperties(::Il2CppObject* instance, ::System::Xml::XmlElement* root, ::System::Xml::XmlDocument* xd);
    // System.Void AddXdoProperty(System.ComponentModel.PropertyDescriptor pd, System.Object instance, System.Xml.XmlElement root, System.Xml.XmlDocument xd)
    // Offset: 0x1625884
    void AddXdoProperty(::System::ComponentModel::PropertyDescriptor* pd, ::Il2CppObject* instance, ::System::Xml::XmlElement* root, ::System::Xml::XmlDocument* xd);
    // static System.String XmlDataTypeName(System.Type type)
    // Offset: 0x16213FC
    static ::StringW XmlDataTypeName(::System::Type* type);
    // private System.Void GenerateConstraintNames(System.Data.DataTable table, System.Boolean fromTable)
    // Offset: 0x162641C
    void GenerateConstraintNames(::System::Data::DataTable* table, bool fromTable);
    // private System.Void GenerateConstraintNames(System.Collections.ArrayList tables)
    // Offset: 0x1626918
    void GenerateConstraintNames(::System::Collections::ArrayList* tables);
    // private System.Void GenerateConstraintNames(System.Data.DataSet ds)
    // Offset: 0x1626A14
    void GenerateConstraintNames(::System::Data::DataSet* ds);
    // static private System.Boolean _PropsNotEmpty(System.Data.PropertyCollection props)
    // Offset: 0x1626CBC
    static bool _PropsNotEmpty(::System::Data::PropertyCollection* props);
    // private System.Boolean HaveExtendedProperties(System.Data.DataSet ds)
    // Offset: 0x1626CE8
    bool HaveExtendedProperties(::System::Data::DataSet* ds);
    // System.Void WriteSchemaRoot(System.Xml.XmlDocument xd, System.Xml.XmlElement rootSchema, System.String targetNamespace)
    // Offset: 0x1626E6C
    void WriteSchemaRoot(::System::Xml::XmlDocument* xd, ::System::Xml::XmlElement* rootSchema, ::StringW targetNamespace);
    // static System.Void ValidateColumnMapping(System.Type columnType)
    // Offset: 0x16212A0
    static void ValidateColumnMapping(::System::Type* columnType);
    // System.Void SetupAutoGenerated(System.Data.DataSet ds)
    // Offset: 0x16270C8
    void SetupAutoGenerated(::System::Data::DataSet* ds);
    // System.Void SetupAutoGenerated(System.Collections.ArrayList dt)
    // Offset: 0x1627D8C
    void SetupAutoGenerated(::System::Collections::ArrayList* dt);
    // System.Void SetupAutoGenerated(System.Data.DataTable dt)
    // Offset: 0x162736C
    void SetupAutoGenerated(::System::Data::DataTable* dt);
    // private System.Void CreateTablesHierarchy(System.Data.DataTable dt)
    // Offset: 0x16284AC
    void CreateTablesHierarchy(::System::Data::DataTable* dt);
    // private System.Void CreateRelations(System.Data.DataTable dt)
    // Offset: 0x16287FC
    void CreateRelations(::System::Data::DataTable* dt);
    // private System.Data.DataTable[] CreateToplevelTables()
    // Offset: 0x1628B18
    ::ArrayW<::System::Data::DataTable*> CreateToplevelTables();
    // System.Void SchemaTree(System.Xml.XmlDocument xd, System.Xml.XmlWriter xmlWriter, System.Data.DataSet ds, System.Data.DataTable dt, System.Boolean writeHierarchy)
    // Offset: 0x1628E34
    void SchemaTree(::System::Xml::XmlDocument* xd, ::System::Xml::XmlWriter* xmlWriter, ::System::Data::DataSet* ds, ::System::Data::DataTable* dt, bool writeHierarchy);
    // System.Xml.XmlElement SchemaTree(System.Xml.XmlDocument xd, System.Data.DataTable dt)
    // Offset: 0x162C340
    ::System::Xml::XmlElement* SchemaTree(::System::Xml::XmlDocument* xd, ::System::Data::DataTable* dt);
    // System.Xml.XmlElement FillDataSetElement(System.Xml.XmlDocument xd, System.Data.DataSet ds, System.Data.DataTable dt)
    // Offset: 0x162B630
    ::System::Xml::XmlElement* FillDataSetElement(::System::Xml::XmlDocument* xd, ::System::Data::DataSet* ds, ::System::Data::DataTable* dt);
    // System.Void SetPath(System.Xml.XmlWriter xw)
    // Offset: 0x162F254
    void SetPath(::System::Xml::XmlWriter* xw);
    // System.Void Save(System.Data.DataSet ds, System.Xml.XmlWriter xw)
    // Offset: 0x1620F74
    void Save(::System::Data::DataSet* ds, ::System::Xml::XmlWriter* xw);
    // System.Void Save(System.Data.DataTable dt, System.Xml.XmlWriter xw)
    // Offset: 0x162F448
    void Save(::System::Data::DataTable* dt, ::System::Xml::XmlWriter* xw);
    // System.Void Save(System.Data.DataSet ds, System.Data.DataTable dt, System.Xml.XmlWriter xw)
    // Offset: 0x162F43C
    void Save(::System::Data::DataSet* ds, ::System::Data::DataTable* dt, ::System::Xml::XmlWriter* xw);
    // System.Void Save(System.Data.DataSet ds, System.Data.DataTable dt, System.Xml.XmlWriter xw, System.Boolean writeHierarchy)
    // Offset: 0x1620F88
    void Save(::System::Data::DataSet* ds, ::System::Data::DataTable* dt, ::System::Xml::XmlWriter* xw, bool writeHierarchy);
    // System.Void Save(System.Data.DataSet ds, System.Data.DataTable dt, System.Xml.XmlWriter xw, System.Boolean writeHierarchy, System.Converter`2<System.Type,System.String> multipleTargetConverter)
    // Offset: 0x162F50C
    void Save(::System::Data::DataSet* ds, ::System::Data::DataTable* dt, ::System::Xml::XmlWriter* xw, bool writeHierarchy, ::System::Converter_2<::System::Type*, ::StringW>* multipleTargetConverter);
    // System.Xml.XmlElement HandleRelation(System.Data.DataRelation rel, System.Xml.XmlDocument dc)
    // Offset: 0x162BD68
    ::System::Xml::XmlElement* HandleRelation(::System::Data::DataRelation* rel, ::System::Xml::XmlDocument* dc);
    // static private System.Xml.XmlElement FindSimpleType(System.Xml.XmlElement schema, System.String name)
    // Offset: 0x162F660
    static ::System::Xml::XmlElement* FindSimpleType(::System::Xml::XmlElement* schema, ::StringW name);
    // System.Xml.XmlElement GetSchema(System.String NamespaceURI)
    // Offset: 0x162F758
    ::System::Xml::XmlElement* GetSchema(::StringW NamespaceURI);
    // System.Void HandleColumnType(System.Data.DataColumn col, System.Xml.XmlDocument dc, System.Xml.XmlElement root, System.Xml.XmlElement schema)
    // Offset: 0x162FA00
    void HandleColumnType(::System::Data::DataColumn* col, ::System::Xml::XmlDocument* dc, ::System::Xml::XmlElement* root, ::System::Xml::XmlElement* schema);
    // System.Void AddColumnProperties(System.Data.DataColumn col, System.Xml.XmlElement root)
    // Offset: 0x162FEAC
    void AddColumnProperties(::System::Data::DataColumn* col, ::System::Xml::XmlElement* root);
    // private System.String FindTargetNamespace(System.Data.DataTable table)
    // Offset: 0x1630564
    ::StringW FindTargetNamespace(::System::Data::DataTable* table);
    // System.Xml.XmlElement HandleColumn(System.Data.DataColumn col, System.Xml.XmlDocument dc, System.Xml.XmlElement schema, System.Boolean fWriteOrdinal)
    // Offset: 0x1630680
    ::System::Xml::XmlElement* HandleColumn(::System::Data::DataColumn* col, ::System::Xml::XmlDocument* dc, ::System::Xml::XmlElement* schema, bool fWriteOrdinal);
    // static System.String TranslateAcceptRejectRule(System.Data.AcceptRejectRule rule)
    // Offset: 0x16313E0
    static ::StringW TranslateAcceptRejectRule(::System::Data::AcceptRejectRule rule);
    // static System.String TranslateRule(System.Data.Rule rule)
    // Offset: 0x1631450
    static ::StringW TranslateRule(::System::Data::Rule rule);
    // System.Void AppendChildWithoutRef(System.Xml.XmlElement node, System.String Namespace, System.Xml.XmlElement el, System.String refString)
    // Offset: 0x162BCAC
    void AppendChildWithoutRef(::System::Xml::XmlElement* node, ::StringW Namespace, ::System::Xml::XmlElement* el, ::StringW refString);
    // System.Xml.XmlElement FindTypeNode(System.Xml.XmlElement node, System.String strType)
    // Offset: 0x163120C
    ::System::Xml::XmlElement* FindTypeNode(::System::Xml::XmlElement* node, ::StringW strType);
    // System.Xml.XmlElement HandleTable(System.Data.DataTable table, System.Xml.XmlDocument dc, System.Xml.XmlElement schema)
    // Offset: 0x162BCA4
    ::System::Xml::XmlElement* HandleTable(::System::Data::DataTable* table, ::System::Xml::XmlDocument* dc, ::System::Xml::XmlElement* schema);
    // private System.Boolean HasMixedColumns(System.Data.DataTable table)
    // Offset: 0x1631508
    bool HasMixedColumns(::System::Data::DataTable* table);
    // static System.Boolean AutoGenerated(System.Data.DataColumn col)
    // Offset: 0x1627E84
    static bool AutoGenerated(::System::Data::DataColumn* col);
    // static System.Boolean AutoGenerated(System.Data.DataRelation rel)
    // Offset: 0x1631884
    static bool AutoGenerated(::System::Data::DataRelation* rel);
    // static System.Boolean AutoGenerated(System.Data.UniqueConstraint unique)
    // Offset: 0x16283CC
    static bool AutoGenerated(::System::Data::UniqueConstraint* unique);
    // private System.Boolean AutoGenerated(System.Data.ForeignKeyConstraint fk)
    // Offset: 0x16283C0
    bool AutoGenerated(::System::Data::ForeignKeyConstraint* fk);
    // static System.Boolean AutoGenerated(System.Data.ForeignKeyConstraint fk, System.Boolean checkRelation)
    // Offset: 0x163196C
    static bool AutoGenerated(::System::Data::ForeignKeyConstraint* fk, bool checkRelation);
    // private System.Boolean IsAutoGenerated(System.Object o)
    // Offset: 0x1631AC4
    bool IsAutoGenerated(::Il2CppObject* o);
    // System.Xml.XmlElement HandleTable(System.Data.DataTable table, System.Xml.XmlDocument dc, System.Xml.XmlElement schema, System.Boolean genNested)
    // Offset: 0x162C790
    ::System::Xml::XmlElement* HandleTable(::System::Data::DataTable* table, ::System::Xml::XmlDocument* dc, ::System::Xml::XmlElement* schema, bool genNested);
    // private System.Void SetMSDataAttribute(System.Xml.XmlElement root, System.Type type)
    // Offset: 0x1626200
    void SetMSDataAttribute(::System::Xml::XmlElement* root, ::System::Type* type);
  }; // System.Data.XmlTreeGen
  #pragma pack(pop)
  static check_size<sizeof(XmlTreeGen), 136 + sizeof(::System::Converter_2<::System::Type*, ::StringW>*)> __System_Data_XmlTreeGenSizeCheck;
  static_assert(sizeof(XmlTreeGen) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::XmlTreeGen::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AddExtendedProperties
// Il2CppName: AddExtendedProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Data::PropertyCollection*, ::System::Xml::XmlElement*)>(&System::Data::XmlTreeGen::AddExtendedProperties)> {
  static const MethodInfo* get() {
    static auto* props = &::il2cpp_utils::GetClassFromName("System.Data", "PropertyCollection")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AddExtendedProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{props, node});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AddExtendedProperties
// Il2CppName: AddExtendedProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Data::PropertyCollection*, ::System::Xml::XmlElement*, ::System::Type*)>(&System::Data::XmlTreeGen::AddExtendedProperties)> {
  static const MethodInfo* get() {
    static auto* props = &::il2cpp_utils::GetClassFromName("System.Data", "PropertyCollection")->byval_arg;
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AddExtendedProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{props, node, type});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AddXdoProperties
// Il2CppName: AddXdoProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::Il2CppObject*, ::System::Xml::XmlElement*, ::System::Xml::XmlDocument*)>(&System::Data::XmlTreeGen::AddXdoProperties)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* xd = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AddXdoProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance, root, xd});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AddXdoProperty
// Il2CppName: AddXdoProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::ComponentModel::PropertyDescriptor*, ::Il2CppObject*, ::System::Xml::XmlElement*, ::System::Xml::XmlDocument*)>(&System::Data::XmlTreeGen::AddXdoProperty)> {
  static const MethodInfo* get() {
    static auto* pd = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyDescriptor")->byval_arg;
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* xd = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AddXdoProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pd, instance, root, xd});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::XmlDataTypeName
// Il2CppName: XmlDataTypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Type*)>(&System::Data::XmlTreeGen::XmlDataTypeName)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "XmlDataTypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::GenerateConstraintNames
// Il2CppName: GenerateConstraintNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataTable*, bool)>(&System::Data::XmlTreeGen::GenerateConstraintNames)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* fromTable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "GenerateConstraintNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, fromTable});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::GenerateConstraintNames
// Il2CppName: GenerateConstraintNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Collections::ArrayList*)>(&System::Data::XmlTreeGen::GenerateConstraintNames)> {
  static const MethodInfo* get() {
    static auto* tables = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "GenerateConstraintNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tables});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::GenerateConstraintNames
// Il2CppName: GenerateConstraintNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataSet*)>(&System::Data::XmlTreeGen::GenerateConstraintNames)> {
  static const MethodInfo* get() {
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "GenerateConstraintNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ds});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::_PropsNotEmpty
// Il2CppName: _PropsNotEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Data::PropertyCollection*)>(&System::Data::XmlTreeGen::_PropsNotEmpty)> {
  static const MethodInfo* get() {
    static auto* props = &::il2cpp_utils::GetClassFromName("System.Data", "PropertyCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "_PropsNotEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{props});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::HaveExtendedProperties
// Il2CppName: HaveExtendedProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XmlTreeGen::*)(::System::Data::DataSet*)>(&System::Data::XmlTreeGen::HaveExtendedProperties)> {
  static const MethodInfo* get() {
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "HaveExtendedProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ds});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::WriteSchemaRoot
// Il2CppName: WriteSchemaRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Xml::XmlDocument*, ::System::Xml::XmlElement*, ::StringW)>(&System::Data::XmlTreeGen::WriteSchemaRoot)> {
  static const MethodInfo* get() {
    static auto* xd = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* rootSchema = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* targetNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "WriteSchemaRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xd, rootSchema, targetNamespace});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::ValidateColumnMapping
// Il2CppName: ValidateColumnMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Type*)>(&System::Data::XmlTreeGen::ValidateColumnMapping)> {
  static const MethodInfo* get() {
    static auto* columnType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "ValidateColumnMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columnType});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::SetupAutoGenerated
// Il2CppName: SetupAutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataSet*)>(&System::Data::XmlTreeGen::SetupAutoGenerated)> {
  static const MethodInfo* get() {
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "SetupAutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ds});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::SetupAutoGenerated
// Il2CppName: SetupAutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Collections::ArrayList*)>(&System::Data::XmlTreeGen::SetupAutoGenerated)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "SetupAutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::SetupAutoGenerated
// Il2CppName: SetupAutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataTable*)>(&System::Data::XmlTreeGen::SetupAutoGenerated)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "SetupAutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::CreateTablesHierarchy
// Il2CppName: CreateTablesHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataTable*)>(&System::Data::XmlTreeGen::CreateTablesHierarchy)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "CreateTablesHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::CreateRelations
// Il2CppName: CreateRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataTable*)>(&System::Data::XmlTreeGen::CreateRelations)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "CreateRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::CreateToplevelTables
// Il2CppName: CreateToplevelTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataTable*> (System::Data::XmlTreeGen::*)()>(&System::Data::XmlTreeGen::CreateToplevelTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "CreateToplevelTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::SchemaTree
// Il2CppName: SchemaTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Xml::XmlDocument*, ::System::Xml::XmlWriter*, ::System::Data::DataSet*, ::System::Data::DataTable*, bool)>(&System::Data::XmlTreeGen::SchemaTree)> {
  static const MethodInfo* get() {
    static auto* xd = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* xmlWriter = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* writeHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "SchemaTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xd, xmlWriter, ds, dt, writeHierarchy});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::SchemaTree
// Il2CppName: SchemaTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Data::XmlTreeGen::*)(::System::Xml::XmlDocument*, ::System::Data::DataTable*)>(&System::Data::XmlTreeGen::SchemaTree)> {
  static const MethodInfo* get() {
    static auto* xd = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "SchemaTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xd, dt});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::FillDataSetElement
// Il2CppName: FillDataSetElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Data::XmlTreeGen::*)(::System::Xml::XmlDocument*, ::System::Data::DataSet*, ::System::Data::DataTable*)>(&System::Data::XmlTreeGen::FillDataSetElement)> {
  static const MethodInfo* get() {
    static auto* xd = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "FillDataSetElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xd, ds, dt});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::SetPath
// Il2CppName: SetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Xml::XmlWriter*)>(&System::Data::XmlTreeGen::SetPath)> {
  static const MethodInfo* get() {
    static auto* xw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "SetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xw});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataSet*, ::System::Xml::XmlWriter*)>(&System::Data::XmlTreeGen::Save)> {
  static const MethodInfo* get() {
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* xw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ds, xw});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataTable*, ::System::Xml::XmlWriter*)>(&System::Data::XmlTreeGen::Save)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* xw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt, xw});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataSet*, ::System::Data::DataTable*, ::System::Xml::XmlWriter*)>(&System::Data::XmlTreeGen::Save)> {
  static const MethodInfo* get() {
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* xw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ds, dt, xw});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataSet*, ::System::Data::DataTable*, ::System::Xml::XmlWriter*, bool)>(&System::Data::XmlTreeGen::Save)> {
  static const MethodInfo* get() {
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* xw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* writeHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ds, dt, xw, writeHierarchy});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataSet*, ::System::Data::DataTable*, ::System::Xml::XmlWriter*, bool, ::System::Converter_2<::System::Type*, ::StringW>*)>(&System::Data::XmlTreeGen::Save)> {
  static const MethodInfo* get() {
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* xw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* writeHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* multipleTargetConverter = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Converter`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Type"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ds, dt, xw, writeHierarchy, multipleTargetConverter});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::HandleRelation
// Il2CppName: HandleRelation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Data::XmlTreeGen::*)(::System::Data::DataRelation*, ::System::Xml::XmlDocument*)>(&System::Data::XmlTreeGen::HandleRelation)> {
  static const MethodInfo* get() {
    static auto* rel = &::il2cpp_utils::GetClassFromName("System.Data", "DataRelation")->byval_arg;
    static auto* dc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "HandleRelation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rel, dc});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::FindSimpleType
// Il2CppName: FindSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (*)(::System::Xml::XmlElement*, ::StringW)>(&System::Data::XmlTreeGen::FindSimpleType)> {
  static const MethodInfo* get() {
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "FindSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schema, name});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::GetSchema
// Il2CppName: GetSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Data::XmlTreeGen::*)(::StringW)>(&System::Data::XmlTreeGen::GetSchema)> {
  static const MethodInfo* get() {
    static auto* NamespaceURI = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "GetSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{NamespaceURI});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::HandleColumnType
// Il2CppName: HandleColumnType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataColumn*, ::System::Xml::XmlDocument*, ::System::Xml::XmlElement*, ::System::Xml::XmlElement*)>(&System::Data::XmlTreeGen::HandleColumnType)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* dc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "HandleColumnType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col, dc, root, schema});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AddColumnProperties
// Il2CppName: AddColumnProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Data::DataColumn*, ::System::Xml::XmlElement*)>(&System::Data::XmlTreeGen::AddColumnProperties)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AddColumnProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col, root});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::FindTargetNamespace
// Il2CppName: FindTargetNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::XmlTreeGen::*)(::System::Data::DataTable*)>(&System::Data::XmlTreeGen::FindTargetNamespace)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "FindTargetNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::HandleColumn
// Il2CppName: HandleColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Data::XmlTreeGen::*)(::System::Data::DataColumn*, ::System::Xml::XmlDocument*, ::System::Xml::XmlElement*, bool)>(&System::Data::XmlTreeGen::HandleColumn)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* dc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* fWriteOrdinal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "HandleColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col, dc, schema, fWriteOrdinal});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::TranslateAcceptRejectRule
// Il2CppName: TranslateAcceptRejectRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Data::AcceptRejectRule)>(&System::Data::XmlTreeGen::TranslateAcceptRejectRule)> {
  static const MethodInfo* get() {
    static auto* rule = &::il2cpp_utils::GetClassFromName("System.Data", "AcceptRejectRule")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "TranslateAcceptRejectRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rule});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::TranslateRule
// Il2CppName: TranslateRule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::System::Data::Rule)>(&System::Data::XmlTreeGen::TranslateRule)> {
  static const MethodInfo* get() {
    static auto* rule = &::il2cpp_utils::GetClassFromName("System.Data", "Rule")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "TranslateRule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rule});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AppendChildWithoutRef
// Il2CppName: AppendChildWithoutRef
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Xml::XmlElement*, ::StringW, ::System::Xml::XmlElement*, ::StringW)>(&System::Data::XmlTreeGen::AppendChildWithoutRef)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* Namespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* el = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* refString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AppendChildWithoutRef", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, Namespace, el, refString});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::FindTypeNode
// Il2CppName: FindTypeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Data::XmlTreeGen::*)(::System::Xml::XmlElement*, ::StringW)>(&System::Data::XmlTreeGen::FindTypeNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* strType = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "FindTypeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, strType});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::HandleTable
// Il2CppName: HandleTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Data::XmlTreeGen::*)(::System::Data::DataTable*, ::System::Xml::XmlDocument*, ::System::Xml::XmlElement*)>(&System::Data::XmlTreeGen::HandleTable)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* dc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "HandleTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, dc, schema});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::HasMixedColumns
// Il2CppName: HasMixedColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XmlTreeGen::*)(::System::Data::DataTable*)>(&System::Data::XmlTreeGen::HasMixedColumns)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "HasMixedColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AutoGenerated
// Il2CppName: AutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Data::DataColumn*)>(&System::Data::XmlTreeGen::AutoGenerated)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AutoGenerated
// Il2CppName: AutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Data::DataRelation*)>(&System::Data::XmlTreeGen::AutoGenerated)> {
  static const MethodInfo* get() {
    static auto* rel = &::il2cpp_utils::GetClassFromName("System.Data", "DataRelation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rel});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AutoGenerated
// Il2CppName: AutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Data::UniqueConstraint*)>(&System::Data::XmlTreeGen::AutoGenerated)> {
  static const MethodInfo* get() {
    static auto* unique = &::il2cpp_utils::GetClassFromName("System.Data", "UniqueConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unique});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AutoGenerated
// Il2CppName: AutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XmlTreeGen::*)(::System::Data::ForeignKeyConstraint*)>(&System::Data::XmlTreeGen::AutoGenerated)> {
  static const MethodInfo* get() {
    static auto* fk = &::il2cpp_utils::GetClassFromName("System.Data", "ForeignKeyConstraint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fk});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::AutoGenerated
// Il2CppName: AutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Data::ForeignKeyConstraint*, bool)>(&System::Data::XmlTreeGen::AutoGenerated)> {
  static const MethodInfo* get() {
    static auto* fk = &::il2cpp_utils::GetClassFromName("System.Data", "ForeignKeyConstraint")->byval_arg;
    static auto* checkRelation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "AutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fk, checkRelation});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::IsAutoGenerated
// Il2CppName: IsAutoGenerated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XmlTreeGen::*)(::Il2CppObject*)>(&System::Data::XmlTreeGen::IsAutoGenerated)> {
  static const MethodInfo* get() {
    static auto* o = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "IsAutoGenerated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{o});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::HandleTable
// Il2CppName: HandleTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlElement* (System::Data::XmlTreeGen::*)(::System::Data::DataTable*, ::System::Xml::XmlDocument*, ::System::Xml::XmlElement*, bool)>(&System::Data::XmlTreeGen::HandleTable)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* dc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* schema = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* genNested = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "HandleTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, dc, schema, genNested});
  }
};
// Writing MetadataGetter for method: System::Data::XmlTreeGen::SetMSDataAttribute
// Il2CppName: SetMSDataAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlTreeGen::*)(::System::Xml::XmlElement*, ::System::Type*)>(&System::Data::XmlTreeGen::SetMSDataAttribute)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlElement")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlTreeGen*), "SetMSDataAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, type});
  }
};
