// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataColumn
  class DataColumn;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: IndexField
  struct IndexField;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Data::IndexField, "System.Data", "IndexField");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x9
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Data.IndexField
  // [TokenAttribute] Offset: FFFFFFFF
  struct IndexField/*, public ::System::ValueType*/ {
    public:
    public:
    // public readonly System.Data.DataColumn Column
    // Size: 0x8
    // Offset: 0x0
    ::System::Data::DataColumn* Column;
    // Field size check
    static_assert(sizeof(::System::Data::DataColumn*) == 0x8);
    // public readonly System.Boolean IsDescending
    // Size: 0x1
    // Offset: 0x8
    bool IsDescending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: IndexField
    constexpr IndexField(::System::Data::DataColumn* Column_ = {}, bool IsDescending_ = {}) noexcept : Column{Column_}, IsDescending{IsDescending_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Data.DataColumn Column
    [[deprecated]] ::System::Data::DataColumn*& dyn_Column();
    // Get instance field reference: public readonly System.Boolean IsDescending
    [[deprecated]] bool& dyn_IsDescending();
    // System.Void .ctor(System.Data.DataColumn column, System.Boolean isDescending)
    // Offset: 0x13AFD54
    // ABORTED: conflicts with another method.  IndexField(::System::Data::DataColumn* column, bool isDescending);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x13B2EC4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x13B2F60
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.Data.IndexField
  #pragma pack(pop)
  static check_size<sizeof(IndexField), 8 + sizeof(bool)> __System_Data_IndexFieldSizeCheck;
  static_assert(sizeof(IndexField) == 0x9);
  // static public System.Boolean op_Equality(System.Data.IndexField if1, System.Data.IndexField if2)
  // Offset: 0x13B2E9C
  bool operator ==(const ::System::Data::IndexField& if1, const ::System::Data::IndexField& if2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::IndexField::IndexField
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::IndexField::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::IndexField::*)(::Il2CppObject*)>(&System::Data::IndexField::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::IndexField), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::Data::IndexField::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::IndexField::*)()>(&System::Data::IndexField::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::IndexField), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::IndexField::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
