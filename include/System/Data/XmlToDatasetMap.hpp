// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataSet
  class DataSet;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataColumn
  class DataColumn;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlNameTable
  class XmlNameTable;
  // Forward declaring type: XmlNode
  class XmlNode;
  // Forward declaring type: XmlReader
  class XmlReader;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: XmlToDatasetMap
  class XmlToDatasetMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::XmlToDatasetMap);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::XmlToDatasetMap*, "System.Data", "XmlToDatasetMap");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.XmlToDatasetMap
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlToDatasetMap : public ::Il2CppObject {
    public:
    // Nested type: ::System::Data::XmlToDatasetMap::XmlNodeIdentety
    class XmlNodeIdentety;
    // Nested type: ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable
    class XmlNodeIdHashtable;
    // Nested type: ::System::Data::XmlToDatasetMap::TableSchemaInfo
    class TableSchemaInfo;
    public:
    // private System.Data.XmlToDatasetMap/System.Data.XmlNodeIdHashtable _tableSchemaMap
    // Size: 0x8
    // Offset: 0x10
    ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable* tableSchemaMap;
    // Field size check
    static_assert(sizeof(::System::Data::XmlToDatasetMap::XmlNodeIdHashtable*) == 0x8);
    // private System.Data.XmlToDatasetMap/System.Data.TableSchemaInfo _lastTableSchemaInfo
    // Size: 0x8
    // Offset: 0x18
    ::System::Data::XmlToDatasetMap::TableSchemaInfo* lastTableSchemaInfo;
    // Field size check
    static_assert(sizeof(::System::Data::XmlToDatasetMap::TableSchemaInfo*) == 0x8);
    public:
    // Get instance field reference: private System.Data.XmlToDatasetMap/System.Data.XmlNodeIdHashtable _tableSchemaMap
    [[deprecated]] ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable*& dyn__tableSchemaMap();
    // Get instance field reference: private System.Data.XmlToDatasetMap/System.Data.TableSchemaInfo _lastTableSchemaInfo
    [[deprecated]] ::System::Data::XmlToDatasetMap::TableSchemaInfo*& dyn__lastTableSchemaInfo();
    // public System.Void .ctor(System.Data.DataSet dataSet, System.Xml.XmlNameTable nameTable)
    // Offset: 0x1619FA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlToDatasetMap* New_ctor(::System::Data::DataSet* dataSet, ::System::Xml::XmlNameTable* nameTable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XmlToDatasetMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlToDatasetMap*, creationType>(dataSet, nameTable)));
    }
    // public System.Void .ctor(System.Xml.XmlNameTable nameTable, System.Data.DataSet dataSet)
    // Offset: 0x161B644
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlToDatasetMap* New_ctor(::System::Xml::XmlNameTable* nameTable, ::System::Data::DataSet* dataSet) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XmlToDatasetMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlToDatasetMap*, creationType>(nameTable, dataSet)));
    }
    // public System.Void .ctor(System.Data.DataTable dataTable, System.Xml.XmlNameTable nameTable)
    // Offset: 0x1619F68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlToDatasetMap* New_ctor(::System::Data::DataTable* dataTable, ::System::Xml::XmlNameTable* nameTable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XmlToDatasetMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlToDatasetMap*, creationType>(dataTable, nameTable)));
    }
    // public System.Void .ctor(System.Xml.XmlNameTable nameTable, System.Data.DataTable dataTable)
    // Offset: 0x161B684
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlToDatasetMap* New_ctor(::System::Xml::XmlNameTable* nameTable, ::System::Data::DataTable* dataTable) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XmlToDatasetMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlToDatasetMap*, creationType>(nameTable, dataTable)));
    }
    // static System.Boolean IsMappedColumn(System.Data.DataColumn c)
    // Offset: 0x161B088
    static bool IsMappedColumn(::System::Data::DataColumn* c);
    // private System.Data.XmlToDatasetMap/System.Data.TableSchemaInfo AddTableSchema(System.Data.DataTable table, System.Xml.XmlNameTable nameTable)
    // Offset: 0x16243F0
    ::System::Data::XmlToDatasetMap::TableSchemaInfo* AddTableSchema(::System::Data::DataTable* table, ::System::Xml::XmlNameTable* nameTable);
    // private System.Data.XmlToDatasetMap/System.Data.TableSchemaInfo AddTableSchema(System.Xml.XmlNameTable nameTable, System.Data.DataTable table)
    // Offset: 0x162451C
    ::System::Data::XmlToDatasetMap::TableSchemaInfo* AddTableSchema(::System::Xml::XmlNameTable* nameTable, ::System::Data::DataTable* table);
    // private System.Boolean AddColumnSchema(System.Data.DataColumn col, System.Xml.XmlNameTable nameTable, System.Data.XmlToDatasetMap/System.Data.XmlNodeIdHashtable columns)
    // Offset: 0x1624698
    bool AddColumnSchema(::System::Data::DataColumn* col, ::System::Xml::XmlNameTable* nameTable, ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable* columns);
    // private System.Boolean AddColumnSchema(System.Xml.XmlNameTable nameTable, System.Data.DataColumn col, System.Data.XmlToDatasetMap/System.Data.XmlNodeIdHashtable columns)
    // Offset: 0x1624940
    bool AddColumnSchema(::System::Xml::XmlNameTable* nameTable, ::System::Data::DataColumn* col, ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable* columns);
    // private System.Void BuildIdentityMap(System.Data.DataSet dataSet, System.Xml.XmlNameTable nameTable)
    // Offset: 0x16224D4
    void BuildIdentityMap(::System::Data::DataSet* dataSet, ::System::Xml::XmlNameTable* nameTable);
    // private System.Void BuildIdentityMap(System.Xml.XmlNameTable nameTable, System.Data.DataSet dataSet)
    // Offset: 0x1622AD4
    void BuildIdentityMap(::System::Xml::XmlNameTable* nameTable, ::System::Data::DataSet* dataSet);
    // private System.Void BuildIdentityMap(System.Data.DataTable dataTable, System.Xml.XmlNameTable nameTable)
    // Offset: 0x16235E0
    void BuildIdentityMap(::System::Data::DataTable* dataTable, ::System::Xml::XmlNameTable* nameTable);
    // private System.Void BuildIdentityMap(System.Xml.XmlNameTable nameTable, System.Data.DataTable dataTable)
    // Offset: 0x1623904
    void BuildIdentityMap(::System::Xml::XmlNameTable* nameTable, ::System::Data::DataTable* dataTable);
    // private System.Collections.ArrayList GetSelfAndDescendants(System.Data.DataTable dt)
    // Offset: 0x1624AFC
    ::System::Collections::ArrayList* GetSelfAndDescendants(::System::Data::DataTable* dt);
    // public System.Object GetColumnSchema(System.Xml.XmlNode node, System.Boolean fIgnoreNamespace)
    // Offset: 0x16199F4
    ::Il2CppObject* GetColumnSchema(::System::Xml::XmlNode* node, bool fIgnoreNamespace);
    // public System.Object GetColumnSchema(System.Data.DataTable table, System.Xml.XmlReader dataReader, System.Boolean fIgnoreNamespace)
    // Offset: 0x161CFF4
    ::Il2CppObject* GetColumnSchema(::System::Data::DataTable* table, ::System::Xml::XmlReader* dataReader, bool fIgnoreNamespace);
    // public System.Object GetSchemaForNode(System.Xml.XmlNode node, System.Boolean fIgnoreNamespace)
    // Offset: 0x1619FE8
    ::Il2CppObject* GetSchemaForNode(::System::Xml::XmlNode* node, bool fIgnoreNamespace);
    // public System.Data.DataTable GetTableForNode(System.Xml.XmlReader node, System.Boolean fIgnoreNamespace)
    // Offset: 0x161BFC4
    ::System::Data::DataTable* GetTableForNode(::System::Xml::XmlReader* node, bool fIgnoreNamespace);
    // private System.Void HandleSpecialColumn(System.Data.DataColumn col, System.Xml.XmlNameTable nameTable, System.Data.XmlToDatasetMap/System.Data.XmlNodeIdHashtable columns)
    // Offset: 0x16247D4
    void HandleSpecialColumn(::System::Data::DataColumn* col, ::System::Xml::XmlNameTable* nameTable, ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable* columns);
  }; // System.Data.XmlToDatasetMap
  #pragma pack(pop)
  static check_size<sizeof(XmlToDatasetMap), 24 + sizeof(::System::Data::XmlToDatasetMap::TableSchemaInfo*)> __System_Data_XmlToDatasetMapSizeCheck;
  static_assert(sizeof(XmlToDatasetMap) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::IsMappedColumn
// Il2CppName: IsMappedColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Data::DataColumn*)>(&System::Data::XmlToDatasetMap::IsMappedColumn)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "IsMappedColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::AddTableSchema
// Il2CppName: AddTableSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::XmlToDatasetMap::TableSchemaInfo* (System::Data::XmlToDatasetMap::*)(::System::Data::DataTable*, ::System::Xml::XmlNameTable*)>(&System::Data::XmlToDatasetMap::AddTableSchema)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "AddTableSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, nameTable});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::AddTableSchema
// Il2CppName: AddTableSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::XmlToDatasetMap::TableSchemaInfo* (System::Data::XmlToDatasetMap::*)(::System::Xml::XmlNameTable*, ::System::Data::DataTable*)>(&System::Data::XmlToDatasetMap::AddTableSchema)> {
  static const MethodInfo* get() {
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "AddTableSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameTable, table});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::AddColumnSchema
// Il2CppName: AddColumnSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XmlToDatasetMap::*)(::System::Data::DataColumn*, ::System::Xml::XmlNameTable*, ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable*)>(&System::Data::XmlToDatasetMap::AddColumnSchema)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* columns = &::il2cpp_utils::GetClassFromName("System.Data", "XmlToDatasetMap/XmlNodeIdHashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "AddColumnSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col, nameTable, columns});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::AddColumnSchema
// Il2CppName: AddColumnSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::XmlToDatasetMap::*)(::System::Xml::XmlNameTable*, ::System::Data::DataColumn*, ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable*)>(&System::Data::XmlToDatasetMap::AddColumnSchema)> {
  static const MethodInfo* get() {
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* col = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* columns = &::il2cpp_utils::GetClassFromName("System.Data", "XmlToDatasetMap/XmlNodeIdHashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "AddColumnSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameTable, col, columns});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::BuildIdentityMap
// Il2CppName: BuildIdentityMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlToDatasetMap::*)(::System::Data::DataSet*, ::System::Xml::XmlNameTable*)>(&System::Data::XmlToDatasetMap::BuildIdentityMap)> {
  static const MethodInfo* get() {
    static auto* dataSet = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "BuildIdentityMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataSet, nameTable});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::BuildIdentityMap
// Il2CppName: BuildIdentityMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlToDatasetMap::*)(::System::Xml::XmlNameTable*, ::System::Data::DataSet*)>(&System::Data::XmlToDatasetMap::BuildIdentityMap)> {
  static const MethodInfo* get() {
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* dataSet = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "BuildIdentityMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameTable, dataSet});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::BuildIdentityMap
// Il2CppName: BuildIdentityMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlToDatasetMap::*)(::System::Data::DataTable*, ::System::Xml::XmlNameTable*)>(&System::Data::XmlToDatasetMap::BuildIdentityMap)> {
  static const MethodInfo* get() {
    static auto* dataTable = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "BuildIdentityMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataTable, nameTable});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::BuildIdentityMap
// Il2CppName: BuildIdentityMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlToDatasetMap::*)(::System::Xml::XmlNameTable*, ::System::Data::DataTable*)>(&System::Data::XmlToDatasetMap::BuildIdentityMap)> {
  static const MethodInfo* get() {
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* dataTable = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "BuildIdentityMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nameTable, dataTable});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::GetSelfAndDescendants
// Il2CppName: GetSelfAndDescendants
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Data::XmlToDatasetMap::*)(::System::Data::DataTable*)>(&System::Data::XmlToDatasetMap::GetSelfAndDescendants)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "GetSelfAndDescendants", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::GetColumnSchema
// Il2CppName: GetColumnSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::XmlToDatasetMap::*)(::System::Xml::XmlNode*, bool)>(&System::Data::XmlToDatasetMap::GetColumnSchema)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* fIgnoreNamespace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "GetColumnSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, fIgnoreNamespace});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::GetColumnSchema
// Il2CppName: GetColumnSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::XmlToDatasetMap::*)(::System::Data::DataTable*, ::System::Xml::XmlReader*, bool)>(&System::Data::XmlToDatasetMap::GetColumnSchema)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* dataReader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* fIgnoreNamespace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "GetColumnSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, dataReader, fIgnoreNamespace});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::GetSchemaForNode
// Il2CppName: GetSchemaForNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (System::Data::XmlToDatasetMap::*)(::System::Xml::XmlNode*, bool)>(&System::Data::XmlToDatasetMap::GetSchemaForNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNode")->byval_arg;
    static auto* fIgnoreNamespace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "GetSchemaForNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, fIgnoreNamespace});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::GetTableForNode
// Il2CppName: GetTableForNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::XmlToDatasetMap::*)(::System::Xml::XmlReader*, bool)>(&System::Data::XmlToDatasetMap::GetTableForNode)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* fIgnoreNamespace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "GetTableForNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node, fIgnoreNamespace});
  }
};
// Writing MetadataGetter for method: System::Data::XmlToDatasetMap::HandleSpecialColumn
// Il2CppName: HandleSpecialColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlToDatasetMap::*)(::System::Data::DataColumn*, ::System::Xml::XmlNameTable*, ::System::Data::XmlToDatasetMap::XmlNodeIdHashtable*)>(&System::Data::XmlToDatasetMap::HandleSpecialColumn)> {
  static const MethodInfo* get() {
    static auto* col = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* nameTable = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlNameTable")->byval_arg;
    static auto* columns = &::il2cpp_utils::GetClassFromName("System.Data", "XmlToDatasetMap/XmlNodeIdHashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlToDatasetMap*), "HandleSpecialColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{col, nameTable, columns});
  }
};
