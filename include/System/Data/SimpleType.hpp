// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlNode
  class XmlNode;
  // Forward declaring type: XmlDocument
  class XmlDocument;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaSimpleType
  class XmlSchemaSimpleType;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Data::Common
namespace System::Data::Common {
  // Forward declaring type: StorageType
  struct StorageType;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: SimpleType
  class SimpleType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::SimpleType);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::SimpleType*, "System.Data", "SimpleType");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.SimpleType
  // [TokenAttribute] Offset: FFFFFFFF
  class SimpleType : public ::Il2CppObject/*, public ::System::Runtime::Serialization::ISerializable*/ {
    public:
    public:
    // private System.String _baseType
    // Size: 0x8
    // Offset: 0x10
    ::StringW baseType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Data.SimpleType _baseSimpleType
    // Size: 0x8
    // Offset: 0x18
    ::System::Data::SimpleType* baseSimpleType;
    // Field size check
    static_assert(sizeof(::System::Data::SimpleType*) == 0x8);
    // private System.Xml.XmlQualifiedName _xmlBaseType
    // Size: 0x8
    // Offset: 0x20
    ::System::Xml::XmlQualifiedName* xmlBaseType;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlQualifiedName*) == 0x8);
    // private System.String _name
    // Size: 0x8
    // Offset: 0x28
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _length
    // Size: 0x4
    // Offset: 0x30
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _minLength
    // Size: 0x4
    // Offset: 0x34
    int minLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxLength
    // Size: 0x4
    // Offset: 0x38
    int maxLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxLength and: pattern
    char __padding6[0x4] = {};
    // private System.String _pattern
    // Size: 0x8
    // Offset: 0x40
    ::StringW pattern;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _ns
    // Size: 0x8
    // Offset: 0x48
    ::StringW ns;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _maxExclusive
    // Size: 0x8
    // Offset: 0x50
    ::StringW maxExclusive;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _maxInclusive
    // Size: 0x8
    // Offset: 0x58
    ::StringW maxInclusive;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _minExclusive
    // Size: 0x8
    // Offset: 0x60
    ::StringW minExclusive;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _minInclusive
    // Size: 0x8
    // Offset: 0x68
    ::StringW minInclusive;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String _enumeration
    // Size: 0x8
    // Offset: 0x70
    ::StringW enumeration;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Get instance field reference: private System.String _baseType
    [[deprecated]] ::StringW& dyn__baseType();
    // Get instance field reference: private System.Data.SimpleType _baseSimpleType
    [[deprecated]] ::System::Data::SimpleType*& dyn__baseSimpleType();
    // Get instance field reference: private System.Xml.XmlQualifiedName _xmlBaseType
    [[deprecated]] ::System::Xml::XmlQualifiedName*& dyn__xmlBaseType();
    // Get instance field reference: private System.String _name
    [[deprecated]] ::StringW& dyn__name();
    // Get instance field reference: private System.Int32 _length
    [[deprecated]] int& dyn__length();
    // Get instance field reference: private System.Int32 _minLength
    [[deprecated]] int& dyn__minLength();
    // Get instance field reference: private System.Int32 _maxLength
    [[deprecated]] int& dyn__maxLength();
    // Get instance field reference: private System.String _pattern
    [[deprecated]] ::StringW& dyn__pattern();
    // Get instance field reference: private System.String _ns
    [[deprecated]] ::StringW& dyn__ns();
    // Get instance field reference: private System.String _maxExclusive
    [[deprecated]] ::StringW& dyn__maxExclusive();
    // Get instance field reference: private System.String _maxInclusive
    [[deprecated]] ::StringW& dyn__maxInclusive();
    // Get instance field reference: private System.String _minExclusive
    [[deprecated]] ::StringW& dyn__minExclusive();
    // Get instance field reference: private System.String _minInclusive
    [[deprecated]] ::StringW& dyn__minInclusive();
    // Get instance field reference: System.String _enumeration
    [[deprecated]] ::StringW& dyn__enumeration();
    // System.String get_BaseType()
    // Offset: 0x121CFBC
    ::StringW get_BaseType();
    // System.Xml.XmlQualifiedName get_XmlBaseType()
    // Offset: 0x121CFC4
    ::System::Xml::XmlQualifiedName* get_XmlBaseType();
    // System.String get_Name()
    // Offset: 0x121CFCC
    ::StringW get_Name();
    // System.String get_Namespace()
    // Offset: 0x121CFD4
    ::StringW get_Namespace();
    // System.Int32 get_Length()
    // Offset: 0x121CFDC
    int get_Length();
    // System.Int32 get_MaxLength()
    // Offset: 0x121CFE4
    int get_MaxLength();
    // System.Void set_MaxLength(System.Int32 value)
    // Offset: 0x121CFEC
    void set_MaxLength(int value);
    // System.Data.SimpleType get_BaseSimpleType()
    // Offset: 0x121CFF4
    ::System::Data::SimpleType* get_BaseSimpleType();
    // public System.String get_SimpleTypeQualifiedName()
    // Offset: 0x121CFFC
    ::StringW get_SimpleTypeQualifiedName();
    // System.Void .ctor(System.String baseType)
    // Offset: 0x121C3A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleType* New_ctor(::StringW baseType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::SimpleType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleType*, creationType>(baseType)));
    }
    // System.Void .ctor(System.Xml.Schema.XmlSchemaSimpleType node)
    // Offset: 0x121C47C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleType* New_ctor(::System::Xml::Schema::XmlSchemaSimpleType* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::SimpleType::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleType*, creationType>(node)));
    }
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x121CE38
    void System_Runtime_Serialization_ISerializable_GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // System.Void LoadTypeValues(System.Xml.Schema.XmlSchemaSimpleType node)
    // Offset: 0x121C5EC
    void LoadTypeValues(::System::Xml::Schema::XmlSchemaSimpleType* node);
    // System.Boolean IsPlainString()
    // Offset: 0x121CE78
    bool IsPlainString();
    // System.String QualifiedName(System.String name)
    // Offset: 0x121D070
    ::StringW QualifiedName(::StringW name);
    // System.Xml.XmlNode ToNode(System.Xml.XmlDocument dc, System.Collections.Hashtable prefixes, System.Boolean inRemoting)
    // Offset: 0x121D0F0
    ::System::Xml::XmlNode* ToNode(::System::Xml::XmlDocument* dc, ::System::Collections::Hashtable* prefixes, bool inRemoting);
    // static System.Data.SimpleType CreateEnumeratedType(System.String values)
    // Offset: 0x121D578
    static ::System::Data::SimpleType* CreateEnumeratedType(::StringW values);
    // static System.Data.SimpleType CreateByteArrayType(System.String encoding)
    // Offset: 0x121D5F4
    static ::System::Data::SimpleType* CreateByteArrayType(::StringW encoding);
    // static System.Data.SimpleType CreateLimitedStringType(System.Int32 length)
    // Offset: 0x121D660
    static ::System::Data::SimpleType* CreateLimitedStringType(int length);
    // static System.Data.SimpleType CreateSimpleType(System.Data.Common.StorageType typeCode, System.Type type)
    // Offset: 0x121D6DC
    static ::System::Data::SimpleType* CreateSimpleType(::System::Data::Common::StorageType typeCode, ::System::Type* type);
    // System.String HasConflictingDefinition(System.Data.SimpleType otherSimpleType)
    // Offset: 0x121D7E0
    ::StringW HasConflictingDefinition(::System::Data::SimpleType* otherSimpleType);
    // System.Boolean CanHaveMaxLength()
    // Offset: 0x121D8EC
    bool CanHaveMaxLength();
    // System.Void ConvertToAnnonymousSimpleType()
    // Offset: 0x121D954
    void ConvertToAnnonymousSimpleType();
  }; // System.Data.SimpleType
  #pragma pack(pop)
  static check_size<sizeof(SimpleType), 112 + sizeof(::StringW)> __System_Data_SimpleTypeSizeCheck;
  static_assert(sizeof(SimpleType) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::SimpleType::get_BaseType
// Il2CppName: get_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::SimpleType::*)()>(&System::Data::SimpleType::get_BaseType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "get_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::get_XmlBaseType
// Il2CppName: get_XmlBaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Data::SimpleType::*)()>(&System::Data::SimpleType::get_XmlBaseType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "get_XmlBaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::SimpleType::*)()>(&System::Data::SimpleType::get_Name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::SimpleType::*)()>(&System::Data::SimpleType::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::SimpleType::*)()>(&System::Data::SimpleType::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::get_MaxLength
// Il2CppName: get_MaxLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::SimpleType::*)()>(&System::Data::SimpleType::get_MaxLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "get_MaxLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::set_MaxLength
// Il2CppName: set_MaxLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SimpleType::*)(int)>(&System::Data::SimpleType::set_MaxLength)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "set_MaxLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::get_BaseSimpleType
// Il2CppName: get_BaseSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SimpleType* (System::Data::SimpleType::*)()>(&System::Data::SimpleType::get_BaseSimpleType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "get_BaseSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::get_SimpleTypeQualifiedName
// Il2CppName: get_SimpleTypeQualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::SimpleType::*)()>(&System::Data::SimpleType::get_SimpleTypeQualifiedName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "get_SimpleTypeQualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SimpleType::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::SimpleType::System_Runtime_Serialization_ISerializable_GetObjectData
// Il2CppName: System.Runtime.Serialization.ISerializable.GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SimpleType::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Data::SimpleType::System_Runtime_Serialization_ISerializable_GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "System.Runtime.Serialization.ISerializable.GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::LoadTypeValues
// Il2CppName: LoadTypeValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SimpleType::*)(::System::Xml::Schema::XmlSchemaSimpleType*)>(&System::Data::SimpleType::LoadTypeValues)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "LoadTypeValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::IsPlainString
// Il2CppName: IsPlainString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SimpleType::*)()>(&System::Data::SimpleType::IsPlainString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "IsPlainString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::QualifiedName
// Il2CppName: QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::SimpleType::*)(::StringW)>(&System::Data::SimpleType::QualifiedName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::ToNode
// Il2CppName: ToNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlNode* (System::Data::SimpleType::*)(::System::Xml::XmlDocument*, ::System::Collections::Hashtable*, bool)>(&System::Data::SimpleType::ToNode)> {
  static const MethodInfo* get() {
    static auto* dc = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlDocument")->byval_arg;
    static auto* prefixes = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    static auto* inRemoting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "ToNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dc, prefixes, inRemoting});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::CreateEnumeratedType
// Il2CppName: CreateEnumeratedType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SimpleType* (*)(::StringW)>(&System::Data::SimpleType::CreateEnumeratedType)> {
  static const MethodInfo* get() {
    static auto* values = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "CreateEnumeratedType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{values});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::CreateByteArrayType
// Il2CppName: CreateByteArrayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SimpleType* (*)(::StringW)>(&System::Data::SimpleType::CreateByteArrayType)> {
  static const MethodInfo* get() {
    static auto* encoding = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "CreateByteArrayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encoding});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::CreateLimitedStringType
// Il2CppName: CreateLimitedStringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SimpleType* (*)(int)>(&System::Data::SimpleType::CreateLimitedStringType)> {
  static const MethodInfo* get() {
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "CreateLimitedStringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{length});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::CreateSimpleType
// Il2CppName: CreateSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SimpleType* (*)(::System::Data::Common::StorageType, ::System::Type*)>(&System::Data::SimpleType::CreateSimpleType)> {
  static const MethodInfo* get() {
    static auto* typeCode = &::il2cpp_utils::GetClassFromName("System.Data.Common", "StorageType")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "CreateSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typeCode, type});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::HasConflictingDefinition
// Il2CppName: HasConflictingDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::SimpleType::*)(::System::Data::SimpleType*)>(&System::Data::SimpleType::HasConflictingDefinition)> {
  static const MethodInfo* get() {
    static auto* otherSimpleType = &::il2cpp_utils::GetClassFromName("System.Data", "SimpleType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "HasConflictingDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherSimpleType});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::CanHaveMaxLength
// Il2CppName: CanHaveMaxLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::SimpleType::*)()>(&System::Data::SimpleType::CanHaveMaxLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "CanHaveMaxLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::SimpleType::ConvertToAnnonymousSimpleType
// Il2CppName: ConvertToAnnonymousSimpleType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::SimpleType::*)()>(&System::Data::SimpleType::ConvertToAnnonymousSimpleType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::SimpleType*), "ConvertToAnnonymousSimpleType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
