// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Data.DataRowCollection
#include "System/Data/DataRowCollection.hpp"
// Including type: System.Data.RBTree`1
#include "System/Data/RBTree_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataRow
  class DataRow;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::DataRowCollection::DataRowTree);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::DataRowCollection::DataRowTree*, "System.Data", "DataRowCollection/DataRowTree");
// Type namespace: System.Data
namespace System::Data {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Data.DataRowCollection/System.Data.DataRowTree
  // [TokenAttribute] Offset: FFFFFFFF
  class DataRowCollection::DataRowTree : public ::System::Data::RBTree_1<::System::Data::DataRow*> {
    public:
    // System.Void .ctor()
    // Offset: 0x18CDFAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataRowCollection::DataRowTree* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::DataRowCollection::DataRowTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataRowCollection::DataRowTree*, creationType>()));
    }
    // protected System.Int32 CompareNode(System.Data.DataRow record1, System.Data.DataRow record2)
    // Offset: 0x18CDFFC
    int CompareNode(::System::Data::DataRow* record1, ::System::Data::DataRow* record2);
    // protected System.Int32 CompareSateliteTreeNode(System.Data.DataRow record1, System.Data.DataRow record2)
    // Offset: 0x18CE030
    int CompareSateliteTreeNode(::System::Data::DataRow* record1, ::System::Data::DataRow* record2);
  }; // System.Data.DataRowCollection/System.Data.DataRowTree
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::DataRowCollection::DataRowTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::DataRowCollection::DataRowTree::CompareNode
// Il2CppName: CompareNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataRowCollection::DataRowTree::*)(::System::Data::DataRow*, ::System::Data::DataRow*)>(&System::Data::DataRowCollection::DataRowTree::CompareNode)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection::DataRowTree*), "CompareNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, record2});
  }
};
// Writing MetadataGetter for method: System::Data::DataRowCollection::DataRowTree::CompareSateliteTreeNode
// Il2CppName: CompareSateliteTreeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataRowCollection::DataRowTree::*)(::System::Data::DataRow*, ::System::Data::DataRow*)>(&System::Data::DataRowCollection::DataRowTree::CompareSateliteTreeNode)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataRowCollection::DataRowTree*), "CompareSateliteTreeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, record2});
  }
};
