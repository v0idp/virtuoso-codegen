// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlDocument
  class XmlDocument;
  // Forward declaring type: XmlWriter
  class XmlWriter;
}
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataSet
  class DataSet;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataRow
  class DataRow;
  // Forward declaring type: DataColumn
  class DataColumn;
  // Forward declaring type: DataRowVersion
  struct DataRowVersion;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: NewDiffgramGen
  class NewDiffgramGen;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::NewDiffgramGen);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::NewDiffgramGen*, "System.Data", "NewDiffgramGen");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.NewDiffgramGen
  // [TokenAttribute] Offset: FFFFFFFF
  class NewDiffgramGen : public ::Il2CppObject {
    public:
    public:
    // System.Xml.XmlDocument _doc
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlDocument* doc;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlDocument*) == 0x8);
    // System.Data.DataSet _ds
    // Size: 0x8
    // Offset: 0x18
    ::System::Data::DataSet* ds;
    // Field size check
    static_assert(sizeof(::System::Data::DataSet*) == 0x8);
    // System.Data.DataTable _dt
    // Size: 0x8
    // Offset: 0x20
    ::System::Data::DataTable* dt;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    // System.Xml.XmlWriter _xmlw
    // Size: 0x8
    // Offset: 0x28
    ::System::Xml::XmlWriter* xmlw;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlWriter*) == 0x8);
    // private System.Boolean _fBefore
    // Size: 0x1
    // Offset: 0x30
    bool fBefore;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _fErrors
    // Size: 0x1
    // Offset: 0x31
    bool fErrors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fErrors and: rowsOrder
    char __padding5[0x6] = {};
    // System.Collections.Hashtable _rowsOrder
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Hashtable* rowsOrder;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Collections.ArrayList _tables
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::ArrayList* tables;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Boolean _writeHierarchy
    // Size: 0x1
    // Offset: 0x48
    bool writeHierarchy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: System.Xml.XmlDocument _doc
    [[deprecated]] ::System::Xml::XmlDocument*& dyn__doc();
    // Get instance field reference: System.Data.DataSet _ds
    [[deprecated]] ::System::Data::DataSet*& dyn__ds();
    // Get instance field reference: System.Data.DataTable _dt
    [[deprecated]] ::System::Data::DataTable*& dyn__dt();
    // Get instance field reference: System.Xml.XmlWriter _xmlw
    [[deprecated]] ::System::Xml::XmlWriter*& dyn__xmlw();
    // Get instance field reference: private System.Boolean _fBefore
    [[deprecated]] bool& dyn__fBefore();
    // Get instance field reference: private System.Boolean _fErrors
    [[deprecated]] bool& dyn__fErrors();
    // Get instance field reference: System.Collections.Hashtable _rowsOrder
    [[deprecated]] ::System::Collections::Hashtable*& dyn__rowsOrder();
    // Get instance field reference: private System.Collections.ArrayList _tables
    [[deprecated]] ::System::Collections::ArrayList*& dyn__tables();
    // Get instance field reference: private System.Boolean _writeHierarchy
    [[deprecated]] bool& dyn__writeHierarchy();
    // System.Void .ctor(System.Data.DataSet ds)
    // Offset: 0x13BB340
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NewDiffgramGen* New_ctor(::System::Data::DataSet* ds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::NewDiffgramGen::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NewDiffgramGen*, creationType>(ds)));
    }
    // System.Void .ctor(System.Data.DataTable dt, System.Boolean writeHierarchy)
    // Offset: 0x13BB6CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NewDiffgramGen* New_ctor(::System::Data::DataTable* dt, bool writeHierarchy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::NewDiffgramGen::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NewDiffgramGen*, creationType>(dt, writeHierarchy)));
    }
    // private System.Void CreateTableHierarchy(System.Data.DataTable dt)
    // Offset: 0x13BB7B4
    void CreateTableHierarchy(::System::Data::DataTable* dt);
    // private System.Void DoAssignments(System.Collections.ArrayList tables)
    // Offset: 0x13BB454
    void DoAssignments(::System::Collections::ArrayList* tables);
    // private System.Boolean EmptyData()
    // Offset: 0x13BBB04
    bool EmptyData();
    // System.Void Save(System.Xml.XmlWriter xmlw)
    // Offset: 0x13BBBFC
    void Save(::System::Xml::XmlWriter* xmlw);
    // System.Void Save(System.Xml.XmlWriter xmlw, System.Data.DataTable table)
    // Offset: 0x13BBC04
    void Save(::System::Xml::XmlWriter* xmlw, ::System::Data::DataTable* table);
    // private System.Void GenerateTable(System.Data.DataTable table)
    // Offset: 0x13BC00C
    void GenerateTable(::System::Data::DataTable* table);
    // private System.Void GenerateTableErrors(System.Data.DataTable table)
    // Offset: 0x13BC08C
    void GenerateTableErrors(::System::Data::DataTable* table);
    // private System.Void GenerateRow(System.Data.DataRow row)
    // Offset: 0x13BC604
    void GenerateRow(::System::Data::DataRow* row);
    // private System.Void GenerateColumn(System.Data.DataRow row, System.Data.DataColumn col, System.Data.DataRowVersion version)
    // Offset: 0x13BCBC0
    void GenerateColumn(::System::Data::DataRow* row, ::System::Data::DataColumn* col, ::System::Data::DataRowVersion version);
    // static System.String QualifiedName(System.String prefix, System.String name)
    // Offset: 0x13BD64C
    static ::StringW QualifiedName(::StringW prefix, ::StringW name);
  }; // System.Data.NewDiffgramGen
  #pragma pack(pop)
  static check_size<sizeof(NewDiffgramGen), 72 + sizeof(bool)> __System_Data_NewDiffgramGenSizeCheck;
  static_assert(sizeof(NewDiffgramGen) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::CreateTableHierarchy
// Il2CppName: CreateTableHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::NewDiffgramGen::*)(::System::Data::DataTable*)>(&System::Data::NewDiffgramGen::CreateTableHierarchy)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "CreateTableHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::DoAssignments
// Il2CppName: DoAssignments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::NewDiffgramGen::*)(::System::Collections::ArrayList*)>(&System::Data::NewDiffgramGen::DoAssignments)> {
  static const MethodInfo* get() {
    static auto* tables = &::il2cpp_utils::GetClassFromName("System.Collections", "ArrayList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "DoAssignments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tables});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::EmptyData
// Il2CppName: EmptyData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::NewDiffgramGen::*)()>(&System::Data::NewDiffgramGen::EmptyData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "EmptyData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::NewDiffgramGen::*)(::System::Xml::XmlWriter*)>(&System::Data::NewDiffgramGen::Save)> {
  static const MethodInfo* get() {
    static auto* xmlw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xmlw});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::NewDiffgramGen::*)(::System::Xml::XmlWriter*, ::System::Data::DataTable*)>(&System::Data::NewDiffgramGen::Save)> {
  static const MethodInfo* get() {
    static auto* xmlw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xmlw, table});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::GenerateTable
// Il2CppName: GenerateTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::NewDiffgramGen::*)(::System::Data::DataTable*)>(&System::Data::NewDiffgramGen::GenerateTable)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "GenerateTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::GenerateTableErrors
// Il2CppName: GenerateTableErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::NewDiffgramGen::*)(::System::Data::DataTable*)>(&System::Data::NewDiffgramGen::GenerateTableErrors)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "GenerateTableErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::GenerateRow
// Il2CppName: GenerateRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::NewDiffgramGen::*)(::System::Data::DataRow*)>(&System::Data::NewDiffgramGen::GenerateRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "GenerateRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::GenerateColumn
// Il2CppName: GenerateColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::NewDiffgramGen::*)(::System::Data::DataRow*, ::System::Data::DataColumn*, ::System::Data::DataRowVersion)>(&System::Data::NewDiffgramGen::GenerateColumn)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* col = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "GenerateColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, col, version});
  }
};
// Writing MetadataGetter for method: System::Data::NewDiffgramGen::QualifiedName
// Il2CppName: QualifiedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&System::Data::NewDiffgramGen::QualifiedName)> {
  static const MethodInfo* get() {
    static auto* prefix = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::NewDiffgramGen*), "QualifiedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefix, name});
  }
};
