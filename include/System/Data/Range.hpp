// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: Range
  struct Range;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::System::Data::Range, "System.Data", "Range");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x9
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Data.Range
  // [TokenAttribute] Offset: FFFFFFFF
  struct Range/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Int32 _min
    // Size: 0x4
    // Offset: 0x0
    int min;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _max
    // Size: 0x4
    // Offset: 0x4
    int max;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isNotNull
    // Size: 0x1
    // Offset: 0x8
    bool isNotNull;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: Range
    constexpr Range(int min_ = {}, int max_ = {}, bool isNotNull_ = {}) noexcept : min{min_}, max{max_}, isNotNull{isNotNull_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private System.Int32 _min
    [[deprecated]] int& dyn__min();
    // Get instance field reference: private System.Int32 _max
    [[deprecated]] int& dyn__max();
    // Get instance field reference: private System.Boolean _isNotNull
    [[deprecated]] bool& dyn__isNotNull();
    // public System.Int32 get_Count()
    // Offset: 0x13B255C
    int get_Count();
    // public System.Boolean get_IsNull()
    // Offset: 0x13C26C4
    bool get_IsNull();
    // public System.Int32 get_Min()
    // Offset: 0x13B257C
    int get_Min();
    // public System.Void .ctor(System.Int32 min, System.Int32 max)
    // Offset: 0x13B1F58
    Range(int min, int max);
    // System.Void CheckNull()
    // Offset: 0x13C26D4
    void CheckNull();
  }; // System.Data.Range
  #pragma pack(pop)
  static check_size<sizeof(Range), 8 + sizeof(bool)> __System_Data_RangeSizeCheck;
  static_assert(sizeof(Range) == 0x9);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::Range::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Range::*)()>(&System::Data::Range::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Range), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Range::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::Range::*)()>(&System::Data::Range::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Range), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Range::get_Min
// Il2CppName: get_Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::Range::*)()>(&System::Data::Range::get_Min)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Range), "get_Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::Range::Range
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::Range::CheckNull
// Il2CppName: CheckNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::Range::*)()>(&System::Data::Range::CheckNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::Range), "CheckNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
