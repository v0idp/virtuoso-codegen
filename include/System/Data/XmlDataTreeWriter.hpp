// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlWriter
  class XmlWriter;
}
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataSet
  class DataSet;
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataRow
  class DataRow;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: XmlDataTreeWriter
  class XmlDataTreeWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::XmlDataTreeWriter);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::XmlDataTreeWriter*, "System.Data", "XmlDataTreeWriter");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.XmlDataTreeWriter
  // [TokenAttribute] Offset: FFFFFFFF
  class XmlDataTreeWriter : public ::Il2CppObject {
    public:
    public:
    // private System.Xml.XmlWriter _xmlw
    // Size: 0x8
    // Offset: 0x10
    ::System::Xml::XmlWriter* xmlw;
    // Field size check
    static_assert(sizeof(::System::Xml::XmlWriter*) == 0x8);
    // private System.Data.DataSet _ds
    // Size: 0x8
    // Offset: 0x18
    ::System::Data::DataSet* ds;
    // Field size check
    static_assert(sizeof(::System::Data::DataSet*) == 0x8);
    // private System.Data.DataTable _dt
    // Size: 0x8
    // Offset: 0x20
    ::System::Data::DataTable* dt;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    // private System.Collections.ArrayList _dTables
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::ArrayList* dTables;
    // Field size check
    static_assert(sizeof(::System::Collections::ArrayList*) == 0x8);
    // private System.Data.DataTable[] _topLevelTables
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::System::Data::DataTable*> topLevelTables;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::DataTable*>) == 0x8);
    // private System.Boolean _fFromTable
    // Size: 0x1
    // Offset: 0x38
    bool fFromTable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isDiffgram
    // Size: 0x1
    // Offset: 0x39
    bool isDiffgram;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDiffgram and: rowsOrder
    char __padding6[0x6] = {};
    // private System.Collections.Hashtable _rowsOrder
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Hashtable* rowsOrder;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // private System.Boolean _writeHierarchy
    // Size: 0x1
    // Offset: 0x48
    bool writeHierarchy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Xml.XmlWriter _xmlw
    [[deprecated("Use field access instead!")]] ::System::Xml::XmlWriter*& dyn__xmlw();
    // Get instance field reference: private System.Data.DataSet _ds
    [[deprecated("Use field access instead!")]] ::System::Data::DataSet*& dyn__ds();
    // Get instance field reference: private System.Data.DataTable _dt
    [[deprecated("Use field access instead!")]] ::System::Data::DataTable*& dyn__dt();
    // Get instance field reference: private System.Collections.ArrayList _dTables
    [[deprecated("Use field access instead!")]] ::System::Collections::ArrayList*& dyn__dTables();
    // Get instance field reference: private System.Data.DataTable[] _topLevelTables
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Data::DataTable*>& dyn__topLevelTables();
    // Get instance field reference: private System.Boolean _fFromTable
    [[deprecated("Use field access instead!")]] bool& dyn__fFromTable();
    // Get instance field reference: private System.Boolean _isDiffgram
    [[deprecated("Use field access instead!")]] bool& dyn__isDiffgram();
    // Get instance field reference: private System.Collections.Hashtable _rowsOrder
    [[deprecated("Use field access instead!")]] ::System::Collections::Hashtable*& dyn__rowsOrder();
    // Get instance field reference: private System.Boolean _writeHierarchy
    [[deprecated("Use field access instead!")]] bool& dyn__writeHierarchy();
    // System.Void .ctor(System.Data.DataSet ds)
    // Offset: 0x161DAE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlDataTreeWriter* New_ctor(::System::Data::DataSet* ds) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XmlDataTreeWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlDataTreeWriter*, creationType>(ds)));
    }
    // System.Void .ctor(System.Data.DataTable dt, System.Boolean writeHierarchy)
    // Offset: 0x161DDE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlDataTreeWriter* New_ctor(::System::Data::DataTable* dt, bool writeHierarchy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::XmlDataTreeWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlDataTreeWriter*, creationType>(dt, writeHierarchy)));
    }
    // private System.Data.DataTable[] CreateToplevelTables()
    // Offset: 0x161E294
    ::ArrayW<::System::Data::DataTable*> CreateToplevelTables();
    // private System.Void CreateTablesHierarchy(System.Data.DataTable dt)
    // Offset: 0x161DF44
    void CreateTablesHierarchy(::System::Data::DataTable* dt);
    // static System.Boolean RowHasErrors(System.Data.DataRow row)
    // Offset: 0x161E5B0
    static bool RowHasErrors(::System::Data::DataRow* row);
    // System.Void SaveDiffgramData(System.Xml.XmlWriter xw, System.Collections.Hashtable rowsOrder)
    // Offset: 0x161E684
    void SaveDiffgramData(::System::Xml::XmlWriter* xw, ::System::Collections::Hashtable* rowsOrder);
    // System.Void Save(System.Xml.XmlWriter xw, System.Boolean writeSchema)
    // Offset: 0x162062C
    void Save(::System::Xml::XmlWriter* xw, bool writeSchema);
    // private System.Collections.ArrayList GetNestedChildRelations(System.Data.DataRow row)
    // Offset: 0x1620F94
    ::System::Collections::ArrayList* GetNestedChildRelations(::System::Data::DataRow* row);
    // System.Void XmlDataRowWriter(System.Data.DataRow row, System.String encodedTableName)
    // Offset: 0x161ECE8
    void XmlDataRowWriter(::System::Data::DataRow* row, ::StringW encodedTableName);
    // static System.Boolean PreserveSpace(System.Object value)
    // Offset: 0x1621334
    static bool PreserveSpace(::Il2CppObject* value);
  }; // System.Data.XmlDataTreeWriter
  #pragma pack(pop)
  static check_size<sizeof(XmlDataTreeWriter), 72 + sizeof(bool)> __System_Data_XmlDataTreeWriterSizeCheck;
  static_assert(sizeof(XmlDataTreeWriter) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::CreateToplevelTables
// Il2CppName: CreateToplevelTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataTable*> (System::Data::XmlDataTreeWriter::*)()>(&System::Data::XmlDataTreeWriter::CreateToplevelTables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlDataTreeWriter*), "CreateToplevelTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::CreateTablesHierarchy
// Il2CppName: CreateTablesHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlDataTreeWriter::*)(::System::Data::DataTable*)>(&System::Data::XmlDataTreeWriter::CreateTablesHierarchy)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlDataTreeWriter*), "CreateTablesHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt});
  }
};
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::RowHasErrors
// Il2CppName: RowHasErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Data::DataRow*)>(&System::Data::XmlDataTreeWriter::RowHasErrors)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlDataTreeWriter*), "RowHasErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::SaveDiffgramData
// Il2CppName: SaveDiffgramData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlDataTreeWriter::*)(::System::Xml::XmlWriter*, ::System::Collections::Hashtable*)>(&System::Data::XmlDataTreeWriter::SaveDiffgramData)> {
  static const MethodInfo* get() {
    static auto* xw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* rowsOrder = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlDataTreeWriter*), "SaveDiffgramData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xw, rowsOrder});
  }
};
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlDataTreeWriter::*)(::System::Xml::XmlWriter*, bool)>(&System::Data::XmlDataTreeWriter::Save)> {
  static const MethodInfo* get() {
    static auto* xw = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* writeSchema = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlDataTreeWriter*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xw, writeSchema});
  }
};
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::GetNestedChildRelations
// Il2CppName: GetNestedChildRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::ArrayList* (System::Data::XmlDataTreeWriter::*)(::System::Data::DataRow*)>(&System::Data::XmlDataTreeWriter::GetNestedChildRelations)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlDataTreeWriter*), "GetNestedChildRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::XmlDataRowWriter
// Il2CppName: XmlDataRowWriter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::XmlDataTreeWriter::*)(::System::Data::DataRow*, ::StringW)>(&System::Data::XmlDataTreeWriter::XmlDataRowWriter)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* encodedTableName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlDataTreeWriter*), "XmlDataRowWriter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, encodedTableName});
  }
};
// Writing MetadataGetter for method: System::Data::XmlDataTreeWriter::PreserveSpace
// Il2CppName: PreserveSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*)>(&System::Data::XmlDataTreeWriter::PreserveSpace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::XmlDataTreeWriter*), "PreserveSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
