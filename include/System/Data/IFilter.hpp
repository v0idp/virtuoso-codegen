// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataRow
  class DataRow;
  // Forward declaring type: DataRowVersion
  struct DataRowVersion;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: IFilter
  class IFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::IFilter);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::IFilter*, "System.Data", "IFilter");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.IFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class IFilter {
    public:
    // public System.Boolean Invoke(System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Invoke(::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
  }; // System.Data.IFilter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::IFilter::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::IFilter::*)(::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::IFilter::Invoke)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::IFilter*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, version});
  }
};
