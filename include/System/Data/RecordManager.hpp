// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
  // Forward declaring type: DataRow
  class DataRow;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: RecordManager
  class RecordManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::RecordManager);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::RecordManager*, "System.Data", "RecordManager");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.RecordManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6BA4E0
  class RecordManager : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Data.DataTable _table
    // Size: 0x8
    // Offset: 0x10
    ::System::Data::DataTable* table;
    // Field size check
    static_assert(sizeof(::System::Data::DataTable*) == 0x8);
    // private System.Int32 _lastFreeRecord
    // Size: 0x4
    // Offset: 0x18
    int lastFreeRecord;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _minimumCapacity
    // Size: 0x4
    // Offset: 0x1C
    int minimumCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _recordCapacity
    // Size: 0x4
    // Offset: 0x20
    int recordCapacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: recordCapacity and: freeRecordList
    char __padding3[0x4] = {};
    // private readonly System.Collections.Generic.List`1<System.Int32> _freeRecordList
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<int>* freeRecordList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // private System.Data.DataRow[] _rows
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::System::Data::DataRow*> rows;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::DataRow*>) == 0x8);
    public:
    // Get instance field reference: private readonly System.Data.DataTable _table
    [[deprecated("Use field access instead!")]] ::System::Data::DataTable*& dyn__table();
    // Get instance field reference: private System.Int32 _lastFreeRecord
    [[deprecated("Use field access instead!")]] int& dyn__lastFreeRecord();
    // Get instance field reference: private System.Int32 _minimumCapacity
    [[deprecated("Use field access instead!")]] int& dyn__minimumCapacity();
    // Get instance field reference: private System.Int32 _recordCapacity
    [[deprecated("Use field access instead!")]] int& dyn__recordCapacity();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Int32> _freeRecordList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__freeRecordList();
    // Get instance field reference: private System.Data.DataRow[] _rows
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Data::DataRow*>& dyn__rows();
    // System.Int32 get_LastFreeRecord()
    // Offset: 0x13C2AE0
    int get_LastFreeRecord();
    // System.Int32 get_MinimumCapacity()
    // Offset: 0x13C2AE8
    int get_MinimumCapacity();
    // System.Void set_MinimumCapacity(System.Int32 value)
    // Offset: 0x13C2AF0
    void set_MinimumCapacity(int value);
    // System.Int32 get_RecordCapacity()
    // Offset: 0x13C2B38
    int get_RecordCapacity();
    // System.Void set_RecordCapacity(System.Int32 value)
    // Offset: 0x13C2A44
    void set_RecordCapacity(int value);
    // System.Data.DataRow get_Item(System.Int32 record)
    // Offset: 0x13B0500
    ::System::Data::DataRow* get_Item(int record);
    // System.Void set_Item(System.Int32 record, System.Data.DataRow value)
    // Offset: 0x13C2D04
    void set_Item(int record, ::System::Data::DataRow* value);
    // System.Void .ctor(System.Data.DataTable table)
    // Offset: 0x13C27E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecordManager* New_ctor(::System::Data::DataTable* table) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::RecordManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecordManager*, creationType>(table)));
    }
    // private System.Void GrowRecordCapacity()
    // Offset: 0x13C28B0
    void GrowRecordCapacity();
    // static System.Int32 NewCapacity(System.Int32 capacity)
    // Offset: 0x13C29F8
    static int NewCapacity(int capacity);
    // private System.Int32 NormalizedMinimumCapacity(System.Int32 capacity)
    // Offset: 0x13C2A0C
    int NormalizedMinimumCapacity(int capacity);
    // System.Int32 NewRecordBase()
    // Offset: 0x13C2B40
    int NewRecordBase();
    // System.Void FreeRecord(ref System.Int32 record)
    // Offset: 0x13C2BF4
    void FreeRecord(ByRef<int> record);
    // System.Void Clear(System.Boolean clearAll)
    // Offset: 0x13C2D7C
    void Clear(bool clearAll);
    // System.Int32 ImportRecord(System.Data.DataTable src, System.Int32 record)
    // Offset: 0x13C2F80
    int ImportRecord(::System::Data::DataTable* src, int record);
    // System.Int32 CopyRecord(System.Data.DataTable src, System.Int32 record, System.Int32 copy)
    // Offset: 0x13C2F88
    int CopyRecord(::System::Data::DataTable* src, int record, int copy);
    // System.Void SetRowCache(System.Data.DataRow[] newRows)
    // Offset: 0x13C32E0
    void SetRowCache(::ArrayW<::System::Data::DataRow*> newRows);
  }; // System.Data.RecordManager
  #pragma pack(pop)
  static check_size<sizeof(RecordManager), 48 + sizeof(::ArrayW<::System::Data::DataRow*>)> __System_Data_RecordManagerSizeCheck;
  static_assert(sizeof(RecordManager) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::RecordManager::get_LastFreeRecord
// Il2CppName: get_LastFreeRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::RecordManager::*)()>(&System::Data::RecordManager::get_LastFreeRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "get_LastFreeRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::get_MinimumCapacity
// Il2CppName: get_MinimumCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::RecordManager::*)()>(&System::Data::RecordManager::get_MinimumCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "get_MinimumCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::set_MinimumCapacity
// Il2CppName: set_MinimumCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::RecordManager::*)(int)>(&System::Data::RecordManager::set_MinimumCapacity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "set_MinimumCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::get_RecordCapacity
// Il2CppName: get_RecordCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::RecordManager::*)()>(&System::Data::RecordManager::get_RecordCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "get_RecordCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::set_RecordCapacity
// Il2CppName: set_RecordCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::RecordManager::*)(int)>(&System::Data::RecordManager::set_RecordCapacity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "set_RecordCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::RecordManager::*)(int)>(&System::Data::RecordManager::get_Item)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::RecordManager::*)(int, ::System::Data::DataRow*)>(&System::Data::RecordManager::set_Item)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record, value});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::RecordManager::GrowRecordCapacity
// Il2CppName: GrowRecordCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::RecordManager::*)()>(&System::Data::RecordManager::GrowRecordCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "GrowRecordCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::NewCapacity
// Il2CppName: NewCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&System::Data::RecordManager::NewCapacity)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "NewCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::NormalizedMinimumCapacity
// Il2CppName: NormalizedMinimumCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::RecordManager::*)(int)>(&System::Data::RecordManager::NormalizedMinimumCapacity)> {
  static const MethodInfo* get() {
    static auto* capacity = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "NormalizedMinimumCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{capacity});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::NewRecordBase
// Il2CppName: NewRecordBase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::RecordManager::*)()>(&System::Data::RecordManager::NewRecordBase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "NewRecordBase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::FreeRecord
// Il2CppName: FreeRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::RecordManager::*)(ByRef<int>)>(&System::Data::RecordManager::FreeRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "FreeRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::RecordManager::*)(bool)>(&System::Data::RecordManager::Clear)> {
  static const MethodInfo* get() {
    static auto* clearAll = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearAll});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::ImportRecord
// Il2CppName: ImportRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::RecordManager::*)(::System::Data::DataTable*, int)>(&System::Data::RecordManager::ImportRecord)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "ImportRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, record});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::CopyRecord
// Il2CppName: CopyRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::RecordManager::*)(::System::Data::DataTable*, int, int)>(&System::Data::RecordManager::CopyRecord)> {
  static const MethodInfo* get() {
    static auto* src = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* copy = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "CopyRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{src, record, copy});
  }
};
// Writing MetadataGetter for method: System::Data::RecordManager::SetRowCache
// Il2CppName: SetRowCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::RecordManager::*)(::ArrayW<::System::Data::DataRow*>)>(&System::Data::RecordManager::SetRowCache)> {
  static const MethodInfo* get() {
    static auto* newRows = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "DataRow"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::RecordManager*), "SetRowCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newRows});
  }
};
