// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ComponentModel.MarshalByValueComponent
#include "System/ComponentModel/MarshalByValueComponent.hpp"
// Including type: System.Xml.Serialization.IXmlSerializable
#include "System/Xml/Serialization/IXmlSerializable.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Globalization.CompareOptions
#include "System/Globalization/CompareOptions.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
// Including type: System.Data.IndexField
#include "System/Data/IndexField.hpp"
// Including type: System.Data.SerializationFormat
#include "System/Data/SerializationFormat.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Data
namespace System::Data {
  // Forward declaring type: DataSet
  class DataSet;
  // Forward declaring type: DataView
  class DataView;
  // Forward declaring type: DataRowCollection
  class DataRowCollection;
  // Forward declaring type: DataColumnCollection
  class DataColumnCollection;
  // Forward declaring type: ConstraintCollection
  class ConstraintCollection;
  // Forward declaring type: DataRelationCollection
  class DataRelationCollection;
  // Forward declaring type: RecordManager
  class RecordManager;
  // Forward declaring type: Index
  class Index;
  // Forward declaring type: PropertyCollection
  class PropertyCollection;
  // Forward declaring type: DataExpression
  class DataExpression;
  // Forward declaring type: DataColumn
  class DataColumn;
  // Forward declaring type: UniqueConstraint
  class UniqueConstraint;
  // Forward declaring type: DataRow
  class DataRow;
  // Forward declaring type: DataRelation
  class DataRelation;
  // Forward declaring type: DataRowChangeEventHandler
  class DataRowChangeEventHandler;
  // Forward declaring type: DataColumnChangeEventHandler
  class DataColumnChangeEventHandler;
  // Forward declaring type: DataTableClearEventHandler
  class DataTableClearEventHandler;
  // Forward declaring type: DataTableNewRowEventHandler
  class DataTableNewRowEventHandler;
  // Forward declaring type: DataRowBuilder
  class DataRowBuilder;
  // Forward declaring type: DataViewListener
  class DataViewListener;
  // Forward declaring type: DataRowState
  struct DataRowState;
  // Forward declaring type: DataKey
  struct DataKey;
  // Forward declaring type: DataRowAction
  struct DataRowAction;
  // Forward declaring type: DataViewRowState
  struct DataViewRowState;
  // Forward declaring type: IFilter
  class IFilter;
  // Forward declaring type: DataColumnChangeEventArgs
  class DataColumnChangeEventArgs;
  // Forward declaring type: DataRowChangeEventArgs
  class DataRowChangeEventArgs;
  // Forward declaring type: DataTableClearEventArgs
  class DataTableClearEventArgs;
  // Forward declaring type: DataTableNewRowEventArgs
  class DataTableNewRowEventArgs;
  // Forward declaring type: DataRowVersion
  struct DataRowVersion;
  // Forward declaring type: MissingSchemaAction
  struct MissingSchemaAction;
  // Forward declaring type: XmlWriteMode
  struct XmlWriteMode;
  // Forward declaring type: XmlReadMode
  struct XmlReadMode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
  // Forward declaring type: CompareInfo
  class CompareInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IFormatProvider
  class IFormatProvider;
  // Forward declaring type: StringComparer
  class StringComparer;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyDescriptorCollection
  class PropertyDescriptorCollection;
  // Forward declaring type: PropertyChangedEventHandler
  class PropertyChangedEventHandler;
  // Forward declaring type: PropertyChangedEventArgs
  class PropertyChangedEventArgs;
  // Forward declaring type: ISite
  class ISite;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: BitArray
  class BitArray;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ReaderWriterLockSlim
  class ReaderWriterLockSlim;
}
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Forward declaring type: XmlQualifiedName
  class XmlQualifiedName;
  // Forward declaring type: XmlWriter
  class XmlWriter;
  // Forward declaring type: XmlReader
  class XmlReader;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Xml::Schema
namespace System::Xml::Schema {
  // Forward declaring type: XmlSchemaComplexType
  class XmlSchemaComplexType;
  // Forward declaring type: XmlSchemaSet
  class XmlSchemaSet;
  // Forward declaring type: XmlSchema
  class XmlSchema;
}
// Completed forward declares
// Type namespace: System.Data
namespace System::Data {
  // Forward declaring type: DataTable
  class DataTable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::Data::DataTable);
DEFINE_IL2CPP_ARG_TYPE(::System::Data::DataTable*, "System.Data", "DataTable");
// Type namespace: System.Data
namespace System::Data {
  // Size: 0x224
  #pragma pack(push, 1)
  // Autogenerated type: System.Data.DataTable
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultEventAttribute] Offset: 6BA224
  // [XmlSchemaProviderAttribute] Offset: 6BA224
  // [DefaultPropertyAttribute] Offset: 6BA224
  // [ToolboxItemAttribute] Offset: 6BA224
  // [DesignTimeVisibleAttribute] Offset: 6BA224
  class DataTable : public ::System::ComponentModel::MarshalByValueComponent/*, public ::System::Xml::Serialization::IXmlSerializable, public ::System::Runtime::Serialization::ISerializable*/ {
    public:
    // Nested type: ::System::Data::DataTable::RowDiffIdUsageSection
    struct RowDiffIdUsageSection;
    // Nested type: ::System::Data::DataTable::DSRowDiffIdUsageSection
    struct DSRowDiffIdUsageSection;
    public:
    // private System.Data.DataSet _dataSet
    // Size: 0x8
    // Offset: 0x20
    ::System::Data::DataSet* dataSet;
    // Field size check
    static_assert(sizeof(::System::Data::DataSet*) == 0x8);
    // private System.Data.DataView _defaultView
    // Size: 0x8
    // Offset: 0x28
    ::System::Data::DataView* defaultView;
    // Field size check
    static_assert(sizeof(::System::Data::DataView*) == 0x8);
    // System.Int64 _nextRowID
    // Size: 0x8
    // Offset: 0x30
    int64_t nextRowID;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // readonly System.Data.DataRowCollection _rowCollection
    // Size: 0x8
    // Offset: 0x38
    ::System::Data::DataRowCollection* rowCollection;
    // Field size check
    static_assert(sizeof(::System::Data::DataRowCollection*) == 0x8);
    // readonly System.Data.DataColumnCollection _columnCollection
    // Size: 0x8
    // Offset: 0x40
    ::System::Data::DataColumnCollection* columnCollection;
    // Field size check
    static_assert(sizeof(::System::Data::DataColumnCollection*) == 0x8);
    // private readonly System.Data.ConstraintCollection _constraintCollection
    // Size: 0x8
    // Offset: 0x48
    ::System::Data::ConstraintCollection* constraintCollection;
    // Field size check
    static_assert(sizeof(::System::Data::ConstraintCollection*) == 0x8);
    // private System.Int32 _elementColumnCount
    // Size: 0x4
    // Offset: 0x50
    int elementColumnCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: elementColumnCount and: parentRelationsCollection
    char __padding6[0x4] = {};
    // System.Data.DataRelationCollection _parentRelationsCollection
    // Size: 0x8
    // Offset: 0x58
    ::System::Data::DataRelationCollection* parentRelationsCollection;
    // Field size check
    static_assert(sizeof(::System::Data::DataRelationCollection*) == 0x8);
    // System.Data.DataRelationCollection _childRelationsCollection
    // Size: 0x8
    // Offset: 0x60
    ::System::Data::DataRelationCollection* childRelationsCollection;
    // Field size check
    static_assert(sizeof(::System::Data::DataRelationCollection*) == 0x8);
    // readonly System.Data.RecordManager _recordManager
    // Size: 0x8
    // Offset: 0x68
    ::System::Data::RecordManager* recordManager;
    // Field size check
    static_assert(sizeof(::System::Data::RecordManager*) == 0x8);
    // readonly System.Collections.Generic.List`1<System.Data.Index> _indexes
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::System::Data::Index*>* indexes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Data::Index*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Data.Index> _shadowIndexes
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::System::Data::Index*>* shadowIndexes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Data::Index*>*) == 0x8);
    // private System.Int32 _shadowCount
    // Size: 0x4
    // Offset: 0x80
    int shadowCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: shadowCount and: extendedProperties
    char __padding12[0x4] = {};
    // System.Data.PropertyCollection _extendedProperties
    // Size: 0x8
    // Offset: 0x88
    ::System::Data::PropertyCollection* extendedProperties;
    // Field size check
    static_assert(sizeof(::System::Data::PropertyCollection*) == 0x8);
    // private System.String _tableName
    // Size: 0x8
    // Offset: 0x90
    ::StringW tableName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String _tableNamespace
    // Size: 0x8
    // Offset: 0x98
    ::StringW tableNamespace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _tablePrefix
    // Size: 0x8
    // Offset: 0xA0
    ::StringW tablePrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Data.DataExpression _displayExpression
    // Size: 0x8
    // Offset: 0xA8
    ::System::Data::DataExpression* displayExpression;
    // Field size check
    static_assert(sizeof(::System::Data::DataExpression*) == 0x8);
    // System.Boolean _fNestedInDataset
    // Size: 0x1
    // Offset: 0xB0
    bool fNestedInDataset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fNestedInDataset and: culture
    char __padding18[0x7] = {};
    // private System.Globalization.CultureInfo _culture
    // Size: 0x8
    // Offset: 0xB8
    ::System::Globalization::CultureInfo* culture;
    // Field size check
    static_assert(sizeof(::System::Globalization::CultureInfo*) == 0x8);
    // private System.Boolean _cultureUserSet
    // Size: 0x1
    // Offset: 0xC0
    bool cultureUserSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cultureUserSet and: compareInfo
    char __padding20[0x7] = {};
    // private System.Globalization.CompareInfo _compareInfo
    // Size: 0x8
    // Offset: 0xC8
    ::System::Globalization::CompareInfo* compareInfo;
    // Field size check
    static_assert(sizeof(::System::Globalization::CompareInfo*) == 0x8);
    // private System.Globalization.CompareOptions _compareFlags
    // Size: 0x4
    // Offset: 0xD0
    ::System::Globalization::CompareOptions compareFlags;
    // Field size check
    static_assert(sizeof(::System::Globalization::CompareOptions) == 0x4);
    // Padding between fields: compareFlags and: formatProvider
    char __padding22[0x4] = {};
    // private System.IFormatProvider _formatProvider
    // Size: 0x8
    // Offset: 0xD8
    ::System::IFormatProvider* formatProvider;
    // Field size check
    static_assert(sizeof(::System::IFormatProvider*) == 0x8);
    // private System.StringComparer _hashCodeProvider
    // Size: 0x8
    // Offset: 0xE0
    ::System::StringComparer* hashCodeProvider;
    // Field size check
    static_assert(sizeof(::System::StringComparer*) == 0x8);
    // private System.Boolean _caseSensitive
    // Size: 0x1
    // Offset: 0xE8
    bool caseSensitive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _caseSensitiveUserSet
    // Size: 0x1
    // Offset: 0xE9
    bool caseSensitiveUserSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: caseSensitiveUserSet and: encodedTableName
    char __padding26[0x6] = {};
    // System.String _encodedTableName
    // Size: 0x8
    // Offset: 0xF0
    ::StringW encodedTableName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.Data.DataColumn _xmlText
    // Size: 0x8
    // Offset: 0xF8
    ::System::Data::DataColumn* xmlText;
    // Field size check
    static_assert(sizeof(::System::Data::DataColumn*) == 0x8);
    // System.Data.DataColumn _colUnique
    // Size: 0x8
    // Offset: 0x100
    ::System::Data::DataColumn* colUnique;
    // Field size check
    static_assert(sizeof(::System::Data::DataColumn*) == 0x8);
    // System.Decimal _minOccurs
    // Size: 0x10
    // Offset: 0x108
    ::System::Decimal minOccurs;
    // Field size check
    static_assert(sizeof(::System::Decimal) == 0x10);
    // System.Decimal _maxOccurs
    // Size: 0x10
    // Offset: 0x118
    ::System::Decimal maxOccurs;
    // Field size check
    static_assert(sizeof(::System::Decimal) == 0x10);
    // System.Boolean _repeatableElement
    // Size: 0x1
    // Offset: 0x128
    bool repeatableElement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: repeatableElement and: typeName
    char __padding32[0x7] = {};
    // private System.Object _typeName
    // Size: 0x8
    // Offset: 0x130
    ::Il2CppObject* typeName;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Data.UniqueConstraint _primaryKey
    // Size: 0x8
    // Offset: 0x138
    ::System::Data::UniqueConstraint* primaryKey;
    // Field size check
    static_assert(sizeof(::System::Data::UniqueConstraint*) == 0x8);
    // System.Data.IndexField[] _primaryIndex
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::System::Data::IndexField> primaryIndex;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::IndexField>) == 0x8);
    // private System.Data.DataColumn[] _delayedSetPrimaryKey
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<::System::Data::DataColumn*> delayedSetPrimaryKey;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::DataColumn*>) == 0x8);
    // private System.Data.Index _loadIndex
    // Size: 0x8
    // Offset: 0x150
    ::System::Data::Index* loadIndex;
    // Field size check
    static_assert(sizeof(::System::Data::Index*) == 0x8);
    // private System.Data.Index _loadIndexwithOriginalAdded
    // Size: 0x8
    // Offset: 0x158
    ::System::Data::Index* loadIndexwithOriginalAdded;
    // Field size check
    static_assert(sizeof(::System::Data::Index*) == 0x8);
    // private System.Data.Index _loadIndexwithCurrentDeleted
    // Size: 0x8
    // Offset: 0x160
    ::System::Data::Index* loadIndexwithCurrentDeleted;
    // Field size check
    static_assert(sizeof(::System::Data::Index*) == 0x8);
    // private System.Int32 _suspendIndexEvents
    // Size: 0x4
    // Offset: 0x168
    int suspendIndexEvents;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _inDataLoad
    // Size: 0x1
    // Offset: 0x16C
    bool inDataLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _schemaLoading
    // Size: 0x1
    // Offset: 0x16D
    bool schemaLoading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _enforceConstraints
    // Size: 0x1
    // Offset: 0x16E
    bool enforceConstraints;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean _suspendEnforceConstraints
    // Size: 0x1
    // Offset: 0x16F
    bool suspendEnforceConstraints;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected internal System.Boolean fInitInProgress
    // Size: 0x1
    // Offset: 0x170
    bool fInitInProgress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _inLoad
    // Size: 0x1
    // Offset: 0x171
    bool inLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean _fInLoadDiffgram
    // Size: 0x1
    // Offset: 0x172
    bool fInLoadDiffgram;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Byte _isTypedDataTable
    // Size: 0x1
    // Offset: 0x173
    uint8_t isTypedDataTable;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: isTypedDataTable and: emptyDataRowArray
    char __padding48[0x4] = {};
    // private System.Data.DataRow[] _emptyDataRowArray
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::System::Data::DataRow*> emptyDataRowArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::DataRow*>) == 0x8);
    // private System.ComponentModel.PropertyDescriptorCollection _propertyDescriptorCollectionCache
    // Size: 0x8
    // Offset: 0x180
    ::System::ComponentModel::PropertyDescriptorCollection* propertyDescriptorCollectionCache;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyDescriptorCollection*) == 0x8);
    // private System.Data.DataRelation[] _nestedParentRelations
    // Size: 0x8
    // Offset: 0x188
    ::ArrayW<::System::Data::DataRelation*> nestedParentRelations;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Data::DataRelation*>) == 0x8);
    // System.Collections.Generic.List`1<System.Data.DataColumn> _dependentColumns
    // Size: 0x8
    // Offset: 0x190
    ::System::Collections::Generic::List_1<::System::Data::DataColumn*>* dependentColumns;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Data::DataColumn*>*) == 0x8);
    // private System.Boolean _mergingData
    // Size: 0x1
    // Offset: 0x198
    bool mergingData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: mergingData and: onRowChangedDelegate
    char __padding53[0x7] = {};
    // private System.Data.DataRowChangeEventHandler _onRowChangedDelegate
    // Size: 0x8
    // Offset: 0x1A0
    ::System::Data::DataRowChangeEventHandler* onRowChangedDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataRowChangeEventHandler*) == 0x8);
    // private System.Data.DataRowChangeEventHandler _onRowChangingDelegate
    // Size: 0x8
    // Offset: 0x1A8
    ::System::Data::DataRowChangeEventHandler* onRowChangingDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataRowChangeEventHandler*) == 0x8);
    // private System.Data.DataRowChangeEventHandler _onRowDeletingDelegate
    // Size: 0x8
    // Offset: 0x1B0
    ::System::Data::DataRowChangeEventHandler* onRowDeletingDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataRowChangeEventHandler*) == 0x8);
    // private System.Data.DataRowChangeEventHandler _onRowDeletedDelegate
    // Size: 0x8
    // Offset: 0x1B8
    ::System::Data::DataRowChangeEventHandler* onRowDeletedDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataRowChangeEventHandler*) == 0x8);
    // private System.Data.DataColumnChangeEventHandler _onColumnChangedDelegate
    // Size: 0x8
    // Offset: 0x1C0
    ::System::Data::DataColumnChangeEventHandler* onColumnChangedDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataColumnChangeEventHandler*) == 0x8);
    // private System.Data.DataColumnChangeEventHandler _onColumnChangingDelegate
    // Size: 0x8
    // Offset: 0x1C8
    ::System::Data::DataColumnChangeEventHandler* onColumnChangingDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataColumnChangeEventHandler*) == 0x8);
    // private System.Data.DataTableClearEventHandler _onTableClearingDelegate
    // Size: 0x8
    // Offset: 0x1D0
    ::System::Data::DataTableClearEventHandler* onTableClearingDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataTableClearEventHandler*) == 0x8);
    // private System.Data.DataTableClearEventHandler _onTableClearedDelegate
    // Size: 0x8
    // Offset: 0x1D8
    ::System::Data::DataTableClearEventHandler* onTableClearedDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataTableClearEventHandler*) == 0x8);
    // private System.Data.DataTableNewRowEventHandler _onTableNewRowDelegate
    // Size: 0x8
    // Offset: 0x1E0
    ::System::Data::DataTableNewRowEventHandler* onTableNewRowDelegate;
    // Field size check
    static_assert(sizeof(::System::Data::DataTableNewRowEventHandler*) == 0x8);
    // private System.ComponentModel.PropertyChangedEventHandler _onPropertyChangingDelegate
    // Size: 0x8
    // Offset: 0x1E8
    ::System::ComponentModel::PropertyChangedEventHandler* onPropertyChangingDelegate;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyChangedEventHandler*) == 0x8);
    // private readonly System.Data.DataRowBuilder _rowBuilder
    // Size: 0x8
    // Offset: 0x1F0
    ::System::Data::DataRowBuilder* rowBuilder;
    // Field size check
    static_assert(sizeof(::System::Data::DataRowBuilder*) == 0x8);
    // readonly System.Collections.Generic.List`1<System.Data.DataView> _delayedViews
    // Size: 0x8
    // Offset: 0x1F8
    ::System::Collections::Generic::List_1<::System::Data::DataView*>* delayedViews;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Data::DataView*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<System.Data.DataViewListener> _dataViewListeners
    // Size: 0x8
    // Offset: 0x200
    ::System::Collections::Generic::List_1<::System::Data::DataViewListener*>* dataViewListeners;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::Data::DataViewListener*>*) == 0x8);
    // System.Collections.Hashtable _rowDiffId
    // Size: 0x8
    // Offset: 0x208
    ::System::Collections::Hashtable* rowDiffId;
    // Field size check
    static_assert(sizeof(::System::Collections::Hashtable*) == 0x8);
    // readonly System.Threading.ReaderWriterLockSlim _indexesLock
    // Size: 0x8
    // Offset: 0x210
    ::System::Threading::ReaderWriterLockSlim* indexesLock;
    // Field size check
    static_assert(sizeof(::System::Threading::ReaderWriterLockSlim*) == 0x8);
    // System.Int32 _ukColumnPositionForInference
    // Size: 0x4
    // Offset: 0x218
    int ukColumnPositionForInference;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Data.SerializationFormat _remotingFormat
    // Size: 0x4
    // Offset: 0x21C
    ::System::Data::SerializationFormat remotingFormat;
    // Field size check
    static_assert(sizeof(::System::Data::SerializationFormat) == 0x4);
    // private readonly System.Int32 _objectID
    // Size: 0x4
    // Offset: 0x220
    int objectID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Xml::Serialization::IXmlSerializable
    operator ::System::Xml::Serialization::IXmlSerializable() noexcept {
      return *reinterpret_cast<::System::Xml::Serialization::IXmlSerializable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::Serialization::ISerializable
    operator ::System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<::System::Runtime::Serialization::ISerializable*>(this);
    }
    // Get static field: static private System.Int32 s_objectTypeCount
    static int _get_s_objectTypeCount();
    // Set static field: static private System.Int32 s_objectTypeCount
    static void _set_s_objectTypeCount(int value);
    // Get instance field reference: private System.Data.DataSet _dataSet
    [[deprecated]] ::System::Data::DataSet*& dyn__dataSet();
    // Get instance field reference: private System.Data.DataView _defaultView
    [[deprecated]] ::System::Data::DataView*& dyn__defaultView();
    // Get instance field reference: System.Int64 _nextRowID
    [[deprecated]] int64_t& dyn__nextRowID();
    // Get instance field reference: readonly System.Data.DataRowCollection _rowCollection
    [[deprecated]] ::System::Data::DataRowCollection*& dyn__rowCollection();
    // Get instance field reference: readonly System.Data.DataColumnCollection _columnCollection
    [[deprecated]] ::System::Data::DataColumnCollection*& dyn__columnCollection();
    // Get instance field reference: private readonly System.Data.ConstraintCollection _constraintCollection
    [[deprecated]] ::System::Data::ConstraintCollection*& dyn__constraintCollection();
    // Get instance field reference: private System.Int32 _elementColumnCount
    [[deprecated]] int& dyn__elementColumnCount();
    // Get instance field reference: System.Data.DataRelationCollection _parentRelationsCollection
    [[deprecated]] ::System::Data::DataRelationCollection*& dyn__parentRelationsCollection();
    // Get instance field reference: System.Data.DataRelationCollection _childRelationsCollection
    [[deprecated]] ::System::Data::DataRelationCollection*& dyn__childRelationsCollection();
    // Get instance field reference: readonly System.Data.RecordManager _recordManager
    [[deprecated]] ::System::Data::RecordManager*& dyn__recordManager();
    // Get instance field reference: readonly System.Collections.Generic.List`1<System.Data.Index> _indexes
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Data::Index*>*& dyn__indexes();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Data.Index> _shadowIndexes
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Data::Index*>*& dyn__shadowIndexes();
    // Get instance field reference: private System.Int32 _shadowCount
    [[deprecated]] int& dyn__shadowCount();
    // Get instance field reference: System.Data.PropertyCollection _extendedProperties
    [[deprecated]] ::System::Data::PropertyCollection*& dyn__extendedProperties();
    // Get instance field reference: private System.String _tableName
    [[deprecated]] ::StringW& dyn__tableName();
    // Get instance field reference: System.String _tableNamespace
    [[deprecated]] ::StringW& dyn__tableNamespace();
    // Get instance field reference: private System.String _tablePrefix
    [[deprecated]] ::StringW& dyn__tablePrefix();
    // Get instance field reference: System.Data.DataExpression _displayExpression
    [[deprecated]] ::System::Data::DataExpression*& dyn__displayExpression();
    // Get instance field reference: System.Boolean _fNestedInDataset
    [[deprecated]] bool& dyn__fNestedInDataset();
    // Get instance field reference: private System.Globalization.CultureInfo _culture
    [[deprecated]] ::System::Globalization::CultureInfo*& dyn__culture();
    // Get instance field reference: private System.Boolean _cultureUserSet
    [[deprecated]] bool& dyn__cultureUserSet();
    // Get instance field reference: private System.Globalization.CompareInfo _compareInfo
    [[deprecated]] ::System::Globalization::CompareInfo*& dyn__compareInfo();
    // Get instance field reference: private System.Globalization.CompareOptions _compareFlags
    [[deprecated]] ::System::Globalization::CompareOptions& dyn__compareFlags();
    // Get instance field reference: private System.IFormatProvider _formatProvider
    [[deprecated]] ::System::IFormatProvider*& dyn__formatProvider();
    // Get instance field reference: private System.StringComparer _hashCodeProvider
    [[deprecated]] ::System::StringComparer*& dyn__hashCodeProvider();
    // Get instance field reference: private System.Boolean _caseSensitive
    [[deprecated]] bool& dyn__caseSensitive();
    // Get instance field reference: private System.Boolean _caseSensitiveUserSet
    [[deprecated]] bool& dyn__caseSensitiveUserSet();
    // Get instance field reference: System.String _encodedTableName
    [[deprecated]] ::StringW& dyn__encodedTableName();
    // Get instance field reference: System.Data.DataColumn _xmlText
    [[deprecated]] ::System::Data::DataColumn*& dyn__xmlText();
    // Get instance field reference: System.Data.DataColumn _colUnique
    [[deprecated]] ::System::Data::DataColumn*& dyn__colUnique();
    // Get instance field reference: System.Decimal _minOccurs
    [[deprecated]] ::System::Decimal& dyn__minOccurs();
    // Get instance field reference: System.Decimal _maxOccurs
    [[deprecated]] ::System::Decimal& dyn__maxOccurs();
    // Get instance field reference: System.Boolean _repeatableElement
    [[deprecated]] bool& dyn__repeatableElement();
    // Get instance field reference: private System.Object _typeName
    [[deprecated]] ::Il2CppObject*& dyn__typeName();
    // Get instance field reference: System.Data.UniqueConstraint _primaryKey
    [[deprecated]] ::System::Data::UniqueConstraint*& dyn__primaryKey();
    // Get instance field reference: System.Data.IndexField[] _primaryIndex
    [[deprecated]] ::ArrayW<::System::Data::IndexField>& dyn__primaryIndex();
    // Get instance field reference: private System.Data.DataColumn[] _delayedSetPrimaryKey
    [[deprecated]] ::ArrayW<::System::Data::DataColumn*>& dyn__delayedSetPrimaryKey();
    // Get instance field reference: private System.Data.Index _loadIndex
    [[deprecated]] ::System::Data::Index*& dyn__loadIndex();
    // Get instance field reference: private System.Data.Index _loadIndexwithOriginalAdded
    [[deprecated]] ::System::Data::Index*& dyn__loadIndexwithOriginalAdded();
    // Get instance field reference: private System.Data.Index _loadIndexwithCurrentDeleted
    [[deprecated]] ::System::Data::Index*& dyn__loadIndexwithCurrentDeleted();
    // Get instance field reference: private System.Int32 _suspendIndexEvents
    [[deprecated]] int& dyn__suspendIndexEvents();
    // Get instance field reference: private System.Boolean _inDataLoad
    [[deprecated]] bool& dyn__inDataLoad();
    // Get instance field reference: private System.Boolean _schemaLoading
    [[deprecated]] bool& dyn__schemaLoading();
    // Get instance field reference: private System.Boolean _enforceConstraints
    [[deprecated]] bool& dyn__enforceConstraints();
    // Get instance field reference: System.Boolean _suspendEnforceConstraints
    [[deprecated]] bool& dyn__suspendEnforceConstraints();
    // Get instance field reference: protected internal System.Boolean fInitInProgress
    [[deprecated]] bool& dyn_fInitInProgress();
    // Get instance field reference: private System.Boolean _inLoad
    [[deprecated]] bool& dyn__inLoad();
    // Get instance field reference: System.Boolean _fInLoadDiffgram
    [[deprecated]] bool& dyn__fInLoadDiffgram();
    // Get instance field reference: private System.Byte _isTypedDataTable
    [[deprecated]] uint8_t& dyn__isTypedDataTable();
    // Get instance field reference: private System.Data.DataRow[] _emptyDataRowArray
    [[deprecated]] ::ArrayW<::System::Data::DataRow*>& dyn__emptyDataRowArray();
    // Get instance field reference: private System.ComponentModel.PropertyDescriptorCollection _propertyDescriptorCollectionCache
    [[deprecated]] ::System::ComponentModel::PropertyDescriptorCollection*& dyn__propertyDescriptorCollectionCache();
    // Get instance field reference: private System.Data.DataRelation[] _nestedParentRelations
    [[deprecated]] ::ArrayW<::System::Data::DataRelation*>& dyn__nestedParentRelations();
    // Get instance field reference: System.Collections.Generic.List`1<System.Data.DataColumn> _dependentColumns
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Data::DataColumn*>*& dyn__dependentColumns();
    // Get instance field reference: private System.Boolean _mergingData
    [[deprecated]] bool& dyn__mergingData();
    // Get instance field reference: private System.Data.DataRowChangeEventHandler _onRowChangedDelegate
    [[deprecated]] ::System::Data::DataRowChangeEventHandler*& dyn__onRowChangedDelegate();
    // Get instance field reference: private System.Data.DataRowChangeEventHandler _onRowChangingDelegate
    [[deprecated]] ::System::Data::DataRowChangeEventHandler*& dyn__onRowChangingDelegate();
    // Get instance field reference: private System.Data.DataRowChangeEventHandler _onRowDeletingDelegate
    [[deprecated]] ::System::Data::DataRowChangeEventHandler*& dyn__onRowDeletingDelegate();
    // Get instance field reference: private System.Data.DataRowChangeEventHandler _onRowDeletedDelegate
    [[deprecated]] ::System::Data::DataRowChangeEventHandler*& dyn__onRowDeletedDelegate();
    // Get instance field reference: private System.Data.DataColumnChangeEventHandler _onColumnChangedDelegate
    [[deprecated]] ::System::Data::DataColumnChangeEventHandler*& dyn__onColumnChangedDelegate();
    // Get instance field reference: private System.Data.DataColumnChangeEventHandler _onColumnChangingDelegate
    [[deprecated]] ::System::Data::DataColumnChangeEventHandler*& dyn__onColumnChangingDelegate();
    // Get instance field reference: private System.Data.DataTableClearEventHandler _onTableClearingDelegate
    [[deprecated]] ::System::Data::DataTableClearEventHandler*& dyn__onTableClearingDelegate();
    // Get instance field reference: private System.Data.DataTableClearEventHandler _onTableClearedDelegate
    [[deprecated]] ::System::Data::DataTableClearEventHandler*& dyn__onTableClearedDelegate();
    // Get instance field reference: private System.Data.DataTableNewRowEventHandler _onTableNewRowDelegate
    [[deprecated]] ::System::Data::DataTableNewRowEventHandler*& dyn__onTableNewRowDelegate();
    // Get instance field reference: private System.ComponentModel.PropertyChangedEventHandler _onPropertyChangingDelegate
    [[deprecated]] ::System::ComponentModel::PropertyChangedEventHandler*& dyn__onPropertyChangingDelegate();
    // Get instance field reference: private readonly System.Data.DataRowBuilder _rowBuilder
    [[deprecated]] ::System::Data::DataRowBuilder*& dyn__rowBuilder();
    // Get instance field reference: readonly System.Collections.Generic.List`1<System.Data.DataView> _delayedViews
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Data::DataView*>*& dyn__delayedViews();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.Data.DataViewListener> _dataViewListeners
    [[deprecated]] ::System::Collections::Generic::List_1<::System::Data::DataViewListener*>*& dyn__dataViewListeners();
    // Get instance field reference: System.Collections.Hashtable _rowDiffId
    [[deprecated]] ::System::Collections::Hashtable*& dyn__rowDiffId();
    // Get instance field reference: readonly System.Threading.ReaderWriterLockSlim _indexesLock
    [[deprecated]] ::System::Threading::ReaderWriterLockSlim*& dyn__indexesLock();
    // Get instance field reference: System.Int32 _ukColumnPositionForInference
    [[deprecated]] int& dyn__ukColumnPositionForInference();
    // Get instance field reference: private System.Data.SerializationFormat _remotingFormat
    [[deprecated]] ::System::Data::SerializationFormat& dyn__remotingFormat();
    // Get instance field reference: private readonly System.Int32 _objectID
    [[deprecated]] int& dyn__objectID();
    // public System.Boolean get_CaseSensitive()
    // Offset: 0x1048F40
    bool get_CaseSensitive();
    // public System.Void set_CaseSensitive(System.Boolean value)
    // Offset: 0x1048F48
    void set_CaseSensitive(bool value);
    // System.Boolean get_AreIndexEventsSuspended()
    // Offset: 0x1048FF0
    bool get_AreIndexEventsSuspended();
    // private System.Boolean get_IsTypedDataTable()
    // Offset: 0x10494C8
    bool get_IsTypedDataTable();
    // System.Boolean get_SelfNested()
    // Offset: 0x10495A4
    bool get_SelfNested();
    // System.Collections.Generic.List`1<System.Data.Index> get_LiveIndexes()
    // Offset: 0x1049920
    ::System::Collections::Generic::List_1<::System::Data::Index*>* get_LiveIndexes();
    // public System.Data.SerializationFormat get_RemotingFormat()
    // Offset: 0x10499E8
    ::System::Data::SerializationFormat get_RemotingFormat();
    // public System.Void set_RemotingFormat(System.Data.SerializationFormat value)
    // Offset: 0x10499F0
    void set_RemotingFormat(::System::Data::SerializationFormat value);
    // System.Int32 get_UKColumnPositionForInference()
    // Offset: 0x1049A5C
    int get_UKColumnPositionForInference();
    // System.Void set_UKColumnPositionForInference(System.Int32 value)
    // Offset: 0x1049A64
    void set_UKColumnPositionForInference(int value);
    // public System.Data.DataRelationCollection get_ChildRelations()
    // Offset: 0x1049A6C
    ::System::Data::DataRelationCollection* get_ChildRelations();
    // public System.Data.DataColumnCollection get_Columns()
    // Offset: 0x1049ADC
    ::System::Data::DataColumnCollection* get_Columns();
    // private System.Globalization.CompareInfo get_CompareInfo()
    // Offset: 0x1049AE4
    ::System::Globalization::CompareInfo* get_CompareInfo();
    // public System.Data.ConstraintCollection get_Constraints()
    // Offset: 0x1049B24
    ::System::Data::ConstraintCollection* get_Constraints();
    // public System.Data.DataSet get_DataSet()
    // Offset: 0x1049B48
    ::System::Data::DataSet* get_DataSet();
    // System.String get_DisplayExpressionInternal()
    // Offset: 0x1049C00
    ::StringW get_DisplayExpressionInternal();
    // System.Boolean get_EnforceConstraints()
    // Offset: 0x1049C68
    bool get_EnforceConstraints();
    // System.Void set_EnforceConstraints(System.Boolean value)
    // Offset: 0x1049C98
    void set_EnforceConstraints(bool value);
    // System.Boolean get_SuspendEnforceConstraints()
    // Offset: 0x104A25C
    bool get_SuspendEnforceConstraints();
    // System.Void set_SuspendEnforceConstraints(System.Boolean value)
    // Offset: 0x104A264
    void set_SuspendEnforceConstraints(bool value);
    // public System.Data.PropertyCollection get_ExtendedProperties()
    // Offset: 0x10463B8
    ::System::Data::PropertyCollection* get_ExtendedProperties();
    // System.IFormatProvider get_FormatProvider()
    // Offset: 0x103F630
    ::System::IFormatProvider* get_FormatProvider();
    // public System.Globalization.CultureInfo get_Locale()
    // Offset: 0x104A270
    ::System::Globalization::CultureInfo* get_Locale();
    // public System.Void set_Locale(System.Globalization.CultureInfo value)
    // Offset: 0x104A278
    void set_Locale(::System::Globalization::CultureInfo* value);
    // public System.Int32 get_MinimumCapacity()
    // Offset: 0x104A938
    int get_MinimumCapacity();
    // public System.Void set_MinimumCapacity(System.Int32 value)
    // Offset: 0x10478A0
    void set_MinimumCapacity(int value);
    // System.Int32 get_RecordCapacity()
    // Offset: 0x104A954
    int get_RecordCapacity();
    // System.Int32 get_ElementColumnCount()
    // Offset: 0x104A970
    int get_ElementColumnCount();
    // System.Void set_ElementColumnCount(System.Int32 value)
    // Offset: 0x104A978
    void set_ElementColumnCount(int value);
    // public System.Data.DataRelationCollection get_ParentRelations()
    // Offset: 0x10498B0
    ::System::Data::DataRelationCollection* get_ParentRelations();
    // System.Boolean get_MergingData()
    // Offset: 0x104A9C0
    bool get_MergingData();
    // System.Void set_MergingData(System.Boolean value)
    // Offset: 0x104A9C8
    void set_MergingData(bool value);
    // System.Data.DataRelation[] get_NestedParentRelations()
    // Offset: 0x104A9D4
    ::ArrayW<::System::Data::DataRelation*> get_NestedParentRelations();
    // System.Boolean get_SchemaLoading()
    // Offset: 0x104A9DC
    bool get_SchemaLoading();
    // System.Int32 get_NestedParentsCount()
    // Offset: 0x104AE18
    int get_NestedParentsCount();
    // public System.Data.DataColumn[] get_PrimaryKey()
    // Offset: 0x104B0F4
    ::ArrayW<::System::Data::DataColumn*> get_PrimaryKey();
    // public System.Void set_PrimaryKey(System.Data.DataColumn[] value)
    // Offset: 0x104B1E8
    void set_PrimaryKey(::ArrayW<::System::Data::DataColumn*> value);
    // public System.Data.DataRowCollection get_Rows()
    // Offset: 0x104B62C
    ::System::Data::DataRowCollection* get_Rows();
    // public System.String get_TableName()
    // Offset: 0x104B634
    ::StringW get_TableName();
    // public System.Void set_TableName(System.String value)
    // Offset: 0x104B63C
    void set_TableName(::StringW value);
    // System.String get_EncodedTableName()
    // Offset: 0x104BBD8
    ::StringW get_EncodedTableName();
    // public System.String get_Namespace()
    // Offset: 0x1043B20
    ::StringW get_Namespace();
    // public System.Void set_Namespace(System.String value)
    // Offset: 0x1046084
    void set_Namespace(::StringW value);
    // public System.String get_Prefix()
    // Offset: 0x104CE80
    ::StringW get_Prefix();
    // public System.Void set_Prefix(System.String value)
    // Offset: 0x104CE88
    void set_Prefix(::StringW value);
    // System.Data.DataColumn get_XmlText()
    // Offset: 0x104D00C
    ::System::Data::DataColumn* get_XmlText();
    // System.Void set_XmlText(System.Data.DataColumn value)
    // Offset: 0x104D014
    void set_XmlText(::System::Data::DataColumn* value);
    // System.Decimal get_MaxOccurs()
    // Offset: 0x104D0C0
    ::System::Decimal get_MaxOccurs();
    // System.Void set_MaxOccurs(System.Decimal value)
    // Offset: 0x104D0CC
    void set_MaxOccurs(::System::Decimal value);
    // System.Decimal get_MinOccurs()
    // Offset: 0x104D0D4
    ::System::Decimal get_MinOccurs();
    // System.Void set_MinOccurs(System.Decimal value)
    // Offset: 0x104D0E0
    void set_MinOccurs(::System::Decimal value);
    // System.Boolean get_NeedColumnChangeEvents()
    // Offset: 0x10521DC
    bool get_NeedColumnChangeEvents();
    // System.Xml.XmlQualifiedName get_TypeName()
    // Offset: 0x1046318
    ::System::Xml::XmlQualifiedName* get_TypeName();
    // System.Void set_TypeName(System.Xml.XmlQualifiedName value)
    // Offset: 0x1054A7C
    void set_TypeName(::System::Xml::XmlQualifiedName* value);
    // System.Collections.Hashtable get_RowDiffId()
    // Offset: 0x1059440
    ::System::Collections::Hashtable* get_RowDiffId();
    // System.Int32 get_ObjectID()
    // Offset: 0x10594A8
    int get_ObjectID();
    // public System.Void .ctor(System.String tableName)
    // Offset: 0x1041FD0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataTable* New_ctor(::StringW tableName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::DataTable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataTable*, creationType>(tableName)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1042040
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataTable* New_ctor(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::DataTable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataTable*, creationType>(info, context)));
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x104252C
    void GetObjectData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context);
    // private System.Void SerializeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Boolean isSingleTable, System.Data.SerializationFormat remotingFormat)
    // Offset: 0x1042618
    void SerializeDataTable(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, bool isSingleTable, ::System::Data::SerializationFormat remotingFormat);
    // System.Void DeserializeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Boolean isSingleTable, System.Data.SerializationFormat remotingFormat)
    // Offset: 0x10421F4
    void DeserializeDataTable(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, bool isSingleTable, ::System::Data::SerializationFormat remotingFormat);
    // System.Void SerializeTableSchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Boolean isSingleTable)
    // Offset: 0x10428D4
    void SerializeTableSchema(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, bool isSingleTable);
    // System.Void DeserializeTableSchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Boolean isSingleTable)
    // Offset: 0x1043BA8
    void DeserializeTableSchema(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, bool isSingleTable);
    // System.Void SerializeConstraints(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Int32 serIndex, System.Boolean allConstraints)
    // Offset: 0x1046920
    void SerializeConstraints(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, int serIndex, bool allConstraints);
    // System.Void DeserializeConstraints(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Int32 serIndex, System.Boolean allConstraints)
    // Offset: 0x10478CC
    void DeserializeConstraints(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, int serIndex, bool allConstraints);
    // System.Void SerializeExpressionColumns(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Int32 serIndex)
    // Offset: 0x10485C0
    void SerializeExpressionColumns(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, int serIndex);
    // System.Void DeserializeExpressionColumns(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Int32 serIndex)
    // Offset: 0x1048730
    void DeserializeExpressionColumns(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, int serIndex);
    // System.Void SerializeTableData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Int32 serIndex)
    // Offset: 0x104354C
    void SerializeTableData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, int serIndex);
    // System.Void DeserializeTableData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Int32 serIndex)
    // Offset: 0x1044A38
    void DeserializeTableData(::System::Runtime::Serialization::SerializationInfo* info, ::System::Runtime::Serialization::StreamingContext context, int serIndex);
    // private System.Data.DataRowState ConvertToRowState(System.Collections.BitArray bitStates, System.Int32 bitIndex)
    // Offset: 0x1048BA4
    ::System::Data::DataRowState ConvertToRowState(::System::Collections::BitArray* bitStates, int bitIndex);
    // System.Void GetRowAndColumnErrors(System.Int32 rowIndex, System.Collections.Hashtable rowErrors, System.Collections.Hashtable colErrors)
    // Offset: 0x10488A8
    void GetRowAndColumnErrors(int rowIndex, ::System::Collections::Hashtable* rowErrors, ::System::Collections::Hashtable* colErrors);
    // private System.Void ConvertToRowError(System.Int32 rowIndex, System.Collections.Hashtable rowErrors, System.Collections.Hashtable colErrors)
    // Offset: 0x1048C58
    void ConvertToRowError(int rowIndex, ::System::Collections::Hashtable* rowErrors, ::System::Collections::Hashtable* colErrors);
    // System.Void RestoreIndexEvents(System.Boolean forceReset)
    // Offset: 0x1049000
    void RestoreIndexEvents(bool forceReset);
    // System.Void SuspendIndexEvents()
    // Offset: 0x1049410
    void SuspendIndexEvents();
    // System.Boolean SetCaseSensitiveValue(System.Boolean isCaseSensitive, System.Boolean userSet, System.Boolean resetIndexes)
    // Offset: 0x1047074
    bool SetCaseSensitiveValue(bool isCaseSensitive, bool userSet, bool resetIndexes);
    // System.Boolean ShouldSerializeCaseSensitive()
    // Offset: 0x104959C
    bool ShouldSerializeCaseSensitive();
    // private System.Void ResetConstraints()
    // Offset: 0x1049B2C
    void ResetConstraints();
    // System.Void SetDataSet(System.Data.DataSet dataSet)
    // Offset: 0x1049B50
    void SetDataSet(::System::Data::DataSet* dataSet);
    // System.Void EnableConstraints()
    // Offset: 0x1049CE8
    void EnableConstraints();
    // System.Boolean SetLocaleValue(System.Globalization.CultureInfo culture, System.Boolean userSet, System.Boolean resetIndexes)
    // Offset: 0x1047364
    bool SetLocaleValue(::System::Globalization::CultureInfo* culture, bool userSet, bool resetIndexes);
    // System.Boolean ShouldSerializeLocale()
    // Offset: 0x104A930
    bool ShouldSerializeLocale();
    // System.Void CacheNestedParent()
    // Offset: 0x104A9E4
    void CacheNestedParent();
    // private System.Data.DataRelation[] FindNestedParentRelations()
    // Offset: 0x104AA08
    ::ArrayW<::System::Data::DataRelation*> FindNestedParentRelations();
    // private System.String GetInheritedNamespace(System.Collections.Generic.List`1<System.Data.DataTable> visitedTables)
    // Offset: 0x104BC50
    ::StringW GetInheritedNamespace(::System::Collections::Generic::List_1<::System::Data::DataTable*>* visitedTables);
    // System.Boolean IsNamespaceInherited()
    // Offset: 0x104CB30
    bool IsNamespaceInherited();
    // System.Void CheckCascadingNamespaceConflict(System.String realNamespace)
    // Offset: 0x104BE5C
    void CheckCascadingNamespaceConflict(::StringW realNamespace);
    // System.Void CheckNamespaceValidityForNestedRelations(System.String realNamespace)
    // Offset: 0x104C200
    void CheckNamespaceValidityForNestedRelations(::StringW realNamespace);
    // System.Void CheckNamespaceValidityForNestedParentRelations(System.String ns, System.Data.DataTable parentTable)
    // Offset: 0x104CB40
    void CheckNamespaceValidityForNestedParentRelations(::StringW ns, ::System::Data::DataTable* parentTable);
    // System.Void DoRaiseNamespaceChange()
    // Offset: 0x104C5BC
    void DoRaiseNamespaceChange();
    // System.Void SetKeyValues(System.Data.DataKey key, System.Object[] keyValues, System.Int32 record)
    // Offset: 0x104D0E8
    void SetKeyValues(::System::Data::DataKey key, ::ArrayW<::Il2CppObject*> keyValues, int record);
    // System.Data.DataRow FindByIndex(System.Data.Index ndx, System.Object[] key)
    // Offset: 0x104D184
    ::System::Data::DataRow* FindByIndex(::System::Data::Index* ndx, ::ArrayW<::Il2CppObject*> key);
    // System.Data.DataRow FindMergeTarget(System.Data.DataRow row, System.Data.DataKey key, System.Data.Index ndx)
    // Offset: 0x104D220
    ::System::Data::DataRow* FindMergeTarget(::System::Data::DataRow* row, ::System::Data::DataKey key, ::System::Data::Index* ndx);
    // private System.Void SetMergeRecords(System.Data.DataRow row, System.Int32 newRecord, System.Int32 oldRecord, System.Data.DataRowAction action)
    // Offset: 0x104D29C
    void SetMergeRecords(::System::Data::DataRow* row, int newRecord, int oldRecord, ::System::Data::DataRowAction action);
    // System.Data.DataRow MergeRow(System.Data.DataRow row, System.Data.DataRow targetRow, System.Boolean preserveChanges, System.Data.Index idxSearch)
    // Offset: 0x104D650
    ::System::Data::DataRow* MergeRow(::System::Data::DataRow* row, ::System::Data::DataRow* targetRow, bool preserveChanges, ::System::Data::Index* idxSearch);
    // protected System.Data.DataTable CreateInstance()
    // Offset: 0x104E040
    ::System::Data::DataTable* CreateInstance();
    // public System.Data.DataTable Clone()
    // Offset: 0x104E0D0
    ::System::Data::DataTable* Clone();
    // System.Data.DataTable Clone(System.Data.DataSet cloneDS)
    // Offset: 0x104E0D8
    ::System::Data::DataTable* Clone(::System::Data::DataSet* cloneDS);
    // private System.Data.DataTable IncrementalCloneTo(System.Data.DataTable sourceTable, System.Data.DataTable targetTable)
    // Offset: 0x104E2CC
    ::System::Data::DataTable* IncrementalCloneTo(::System::Data::DataTable* sourceTable, ::System::Data::DataTable* targetTable);
    // private System.Data.DataTable CloneHierarchy(System.Data.DataTable sourceTable, System.Data.DataSet ds, System.Collections.Hashtable visitedMap)
    // Offset: 0x104E5D8
    ::System::Data::DataTable* CloneHierarchy(::System::Data::DataTable* sourceTable, ::System::Data::DataSet* ds, ::System::Collections::Hashtable* visitedMap);
    // private System.Data.DataTable CloneTo(System.Data.DataTable clone, System.Data.DataSet cloneDS, System.Boolean skipExpressionColumns)
    // Offset: 0x1045414
    ::System::Data::DataTable* CloneTo(::System::Data::DataTable* clone, ::System::Data::DataSet* cloneDS, bool skipExpressionColumns);
    // System.Void AddRow(System.Data.DataRow row, System.Int32 proposedID)
    // Offset: 0x104EA24
    void AddRow(::System::Data::DataRow* row, int proposedID);
    // System.Void InsertRow(System.Data.DataRow row, System.Int32 proposedID, System.Int32 pos)
    // Offset: 0x104EA34
    void InsertRow(::System::Data::DataRow* row, int proposedID, int pos);
    // System.Void InsertRow(System.Data.DataRow row, System.Int64 proposedID, System.Int32 pos, System.Boolean fireEvent)
    // Offset: 0x104EA40
    void InsertRow(::System::Data::DataRow* row, int64_t proposedID, int pos, bool fireEvent);
    // System.Void CheckNotModifying(System.Data.DataRow row)
    // Offset: 0x104F610
    void CheckNotModifying(::System::Data::DataRow* row);
    // public System.Void Clear()
    // Offset: 0x104F63C
    void Clear();
    // System.Void Clear(System.Boolean clearAll)
    // Offset: 0x104F644
    void Clear(bool clearAll);
    // System.Void CascadeAll(System.Data.DataRow row, System.Data.DataRowAction action)
    // Offset: 0x104FF68
    void CascadeAll(::System::Data::DataRow* row, ::System::Data::DataRowAction action);
    // System.Void CommitRow(System.Data.DataRow row)
    // Offset: 0x105002C
    void CommitRow(::System::Data::DataRow* row);
    // System.Int32 Compare(System.String s1, System.String s2)
    // Offset: 0x1050208
    int Compare(::StringW s1, ::StringW s2);
    // System.Int32 Compare(System.String s1, System.String s2, System.Globalization.CompareInfo comparer)
    // Offset: 0x1050210
    int Compare(::StringW s1, ::StringW s2, ::System::Globalization::CompareInfo* comparer);
    // System.Int32 IndexOf(System.String s1, System.String s2)
    // Offset: 0x1050378
    int IndexOf(::StringW s1, ::StringW s2);
    // System.Boolean IsSuffix(System.String s1, System.String s2)
    // Offset: 0x10503C4
    bool IsSuffix(::StringW s1, ::StringW s2);
    // System.Void DeleteRow(System.Data.DataRow row)
    // Offset: 0x1050410
    void DeleteRow(::System::Data::DataRow* row);
    // System.String FormatSortString(System.Data.IndexField[] indexDesc)
    // Offset: 0x1050474
    ::StringW FormatSortString(::ArrayW<::System::Data::IndexField> indexDesc);
    // System.Void FreeRecord(ref System.Int32 record)
    // Offset: 0x10505B8
    void FreeRecord(ByRef<int> record);
    // System.Data.Index GetIndex(System.String sort, System.Data.DataViewRowState recordStates, System.Data.IFilter rowFilter)
    // Offset: 0x10505D4
    ::System::Data::Index* GetIndex(::StringW sort, ::System::Data::DataViewRowState recordStates, ::System::Data::IFilter* rowFilter);
    // System.Data.Index GetIndex(System.Data.IndexField[] indexDesc, System.Data.DataViewRowState recordStates, System.Data.IFilter rowFilter)
    // Offset: 0x10509C0
    ::System::Data::Index* GetIndex(::ArrayW<::System::Data::IndexField> indexDesc, ::System::Data::DataViewRowState recordStates, ::System::Data::IFilter* rowFilter);
    // System.Collections.Generic.List`1<System.Data.DataViewListener> GetListeners()
    // Offset: 0x1050B9C
    ::System::Collections::Generic::List_1<::System::Data::DataViewListener*>* GetListeners();
    // System.Int32 GetSpecialHashCode(System.String name)
    // Offset: 0x104A828
    int GetSpecialHashCode(::StringW name);
    // System.Void InsertRow(System.Data.DataRow row, System.Int64 proposedID)
    // Offset: 0x104DB7C
    void InsertRow(::System::Data::DataRow* row, int64_t proposedID);
    // System.Int32 NewRecord()
    // Offset: 0x10518F0
    int NewRecord();
    // System.Int32 NewUninitializedRecord()
    // Offset: 0x10519E8
    int NewUninitializedRecord();
    // System.Int32 NewRecord(System.Int32 sourceRecord)
    // Offset: 0x10518F8
    int NewRecord(int sourceRecord);
    // System.Data.DataRow NewEmptyRow()
    // Offset: 0x1048B40
    ::System::Data::DataRow* NewEmptyRow();
    // private System.Data.DataRow NewUninitializedRow()
    // Offset: 0x1051A04
    ::System::Data::DataRow* NewUninitializedRow();
    // public System.Data.DataRow NewRow()
    // Offset: 0x1051AD8
    ::System::Data::DataRow* NewRow();
    // System.Data.DataRow CreateEmptyRow()
    // Offset: 0x1051BA4
    ::System::Data::DataRow* CreateEmptyRow();
    // private System.Void NewRowCreated(System.Data.DataRow row)
    // Offset: 0x1051B10
    void NewRowCreated(::System::Data::DataRow* row);
    // System.Data.DataRow NewRow(System.Int32 record)
    // Offset: 0x1051A3C
    ::System::Data::DataRow* NewRow(int record);
    // protected System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
    // Offset: 0x1051F50
    ::System::Data::DataRow* NewRowFromBuilder(::System::Data::DataRowBuilder* builder);
    // protected System.Type GetRowType()
    // Offset: 0x1051FB0
    ::System::Type* GetRowType();
    // protected internal System.Data.DataRow[] NewRowArray(System.Int32 size)
    // Offset: 0x1052028
    ::ArrayW<::System::Data::DataRow*> NewRowArray(int size);
    // protected internal System.Void OnColumnChanging(System.Data.DataColumnChangeEventArgs e)
    // Offset: 0x105221C
    void OnColumnChanging(::System::Data::DataColumnChangeEventArgs* e);
    // protected internal System.Void OnColumnChanged(System.Data.DataColumnChangeEventArgs e)
    // Offset: 0x10522FC
    void OnColumnChanged(::System::Data::DataColumnChangeEventArgs* e);
    // protected System.Void OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs pcevent)
    // Offset: 0x10523DC
    void OnPropertyChanging(::System::ComponentModel::PropertyChangedEventArgs* pcevent);
    // System.Void OnRemoveColumnInternal(System.Data.DataColumn column)
    // Offset: 0x10524BC
    void OnRemoveColumnInternal(::System::Data::DataColumn* column);
    // protected System.Void OnRemoveColumn(System.Data.DataColumn column)
    // Offset: 0x10524CC
    void OnRemoveColumn(::System::Data::DataColumn* column);
    // private System.Data.DataRowChangeEventArgs OnRowChanged(System.Data.DataRowChangeEventArgs args, System.Data.DataRow eRow, System.Data.DataRowAction eAction)
    // Offset: 0x1050158
    ::System::Data::DataRowChangeEventArgs* OnRowChanged(::System::Data::DataRowChangeEventArgs* args, ::System::Data::DataRow* eRow, ::System::Data::DataRowAction eAction);
    // private System.Data.DataRowChangeEventArgs OnRowChanging(System.Data.DataRowChangeEventArgs args, System.Data.DataRow eRow, System.Data.DataRowAction eAction)
    // Offset: 0x10500A8
    ::System::Data::DataRowChangeEventArgs* OnRowChanging(::System::Data::DataRowChangeEventArgs* args, ::System::Data::DataRow* eRow, ::System::Data::DataRowAction eAction);
    // protected System.Void OnRowChanged(System.Data.DataRowChangeEventArgs e)
    // Offset: 0x10524D0
    void OnRowChanged(::System::Data::DataRowChangeEventArgs* e);
    // protected System.Void OnRowChanging(System.Data.DataRowChangeEventArgs e)
    // Offset: 0x10525B0
    void OnRowChanging(::System::Data::DataRowChangeEventArgs* e);
    // protected System.Void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
    // Offset: 0x1052690
    void OnRowDeleting(::System::Data::DataRowChangeEventArgs* e);
    // protected System.Void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
    // Offset: 0x1052770
    void OnRowDeleted(::System::Data::DataRowChangeEventArgs* e);
    // protected System.Void OnTableCleared(System.Data.DataTableClearEventArgs e)
    // Offset: 0x1052850
    void OnTableCleared(::System::Data::DataTableClearEventArgs* e);
    // protected System.Void OnTableClearing(System.Data.DataTableClearEventArgs e)
    // Offset: 0x1052930
    void OnTableClearing(::System::Data::DataTableClearEventArgs* e);
    // protected System.Void OnTableNewRow(System.Data.DataTableNewRowEventArgs e)
    // Offset: 0x1052A10
    void OnTableNewRow(::System::Data::DataTableNewRowEventArgs* e);
    // System.Data.IndexField[] ParseSortString(System.String sortString)
    // Offset: 0x1050614
    ::ArrayW<::System::Data::IndexField> ParseSortString(::StringW sortString);
    // System.Void RaisePropertyChanging(System.String name)
    // Offset: 0x104BB5C
    void RaisePropertyChanging(::StringW name);
    // System.Void RecordChanged(System.Int32 record)
    // Offset: 0x1052AF0
    void RecordChanged(int record);
    // System.Void RecordChanged(System.Int32[] oldIndex, System.Int32[] newIndex)
    // Offset: 0x1052C7C
    void RecordChanged(::ArrayW<int> oldIndex, ::ArrayW<int> newIndex);
    // System.Void RecordStateChanged(System.Int32 record, System.Data.DataViewRowState oldState, System.Data.DataViewRowState newState)
    // Offset: 0x1050D3C
    void RecordStateChanged(int record, ::System::Data::DataViewRowState oldState, ::System::Data::DataViewRowState newState);
    // System.Void RecordStateChanged(System.Int32 record1, System.Data.DataViewRowState oldState1, System.Data.DataViewRowState newState1, System.Int32 record2, System.Data.DataViewRowState oldState2, System.Data.DataViewRowState newState2)
    // Offset: 0x1050EE0
    void RecordStateChanged(int record1, ::System::Data::DataViewRowState oldState1, ::System::Data::DataViewRowState newState1, int record2, ::System::Data::DataViewRowState oldState2, ::System::Data::DataViewRowState newState2);
    // System.Int32[] RemoveRecordFromIndexes(System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0x1052E78
    ::ArrayW<int> RemoveRecordFromIndexes(::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
    // System.Int32[] InsertRecordToIndexes(System.Data.DataRow row, System.Data.DataRowVersion version)
    // Offset: 0x1053074
    ::ArrayW<int> InsertRecordToIndexes(::System::Data::DataRow* row, ::System::Data::DataRowVersion version);
    // System.Void SilentlySetValue(System.Data.DataRow dr, System.Data.DataColumn dc, System.Data.DataRowVersion version, System.Object newValue)
    // Offset: 0x1053218
    void SilentlySetValue(::System::Data::DataRow* dr, ::System::Data::DataColumn* dc, ::System::Data::DataRowVersion version, ::Il2CppObject* newValue);
    // System.Void RemoveRow(System.Data.DataRow row, System.Boolean check)
    // Offset: 0x1053B84
    void RemoveRow(::System::Data::DataRow* row, bool check);
    // public System.Void Reset()
    // Offset: 0x1053D28
    void Reset();
    // System.Void ResetIndexes()
    // Offset: 0x104540C
    void ResetIndexes();
    // System.Void ResetInternalIndexes(System.Data.DataColumn column)
    // Offset: 0x1053F88
    void ResetInternalIndexes(::System::Data::DataColumn* column);
    // System.Void RollbackRow(System.Data.DataRow row)
    // Offset: 0x1054180
    void RollbackRow(::System::Data::DataRow* row);
    // private System.Data.DataRowChangeEventArgs RaiseRowChanged(System.Data.DataRowChangeEventArgs args, System.Data.DataRow eRow, System.Data.DataRowAction eAction)
    // Offset: 0x10516B4
    ::System::Data::DataRowChangeEventArgs* RaiseRowChanged(::System::Data::DataRowChangeEventArgs* args, ::System::Data::DataRow* eRow, ::System::Data::DataRowAction eAction);
    // private System.Data.DataRowChangeEventArgs RaiseRowChanging(System.Data.DataRowChangeEventArgs args, System.Data.DataRow eRow, System.Data.DataRowAction eAction)
    // Offset: 0x1054210
    ::System::Data::DataRowChangeEventArgs* RaiseRowChanging(::System::Data::DataRowChangeEventArgs* args, ::System::Data::DataRow* eRow, ::System::Data::DataRowAction eAction);
    // private System.Data.DataRowChangeEventArgs RaiseRowChanging(System.Data.DataRowChangeEventArgs args, System.Data.DataRow eRow, System.Data.DataRowAction eAction, System.Boolean fireEvent)
    // Offset: 0x1050BA4
    ::System::Data::DataRowChangeEventArgs* RaiseRowChanging(::System::Data::DataRowChangeEventArgs* args, ::System::Data::DataRow* eRow, ::System::Data::DataRowAction eAction, bool fireEvent);
    // System.Void SetNewRecord(System.Data.DataRow row, System.Int32 proposedRecord, System.Data.DataRowAction action, System.Boolean isInMerge, System.Boolean fireEvent, System.Boolean suppressEnsurePropertyChanged)
    // Offset: 0x104D35C
    void SetNewRecord(::System::Data::DataRow* row, int proposedRecord, ::System::Data::DataRowAction action, bool isInMerge, bool fireEvent, bool suppressEnsurePropertyChanged);
    // private System.Void SetNewRecordWorker(System.Data.DataRow row, System.Int32 proposedRecord, System.Data.DataRowAction action, System.Boolean isInMerge, System.Boolean suppressEnsurePropertyChanged, System.Int32 position, System.Boolean fireEvent, out System.Exception deferredException)
    // Offset: 0x104EDC4
    void SetNewRecordWorker(::System::Data::DataRow* row, int proposedRecord, ::System::Data::DataRowAction action, bool isInMerge, bool suppressEnsurePropertyChanged, int position, bool fireEvent, ByRef<::System::Exception*> deferredException);
    // System.Void SetOldRecord(System.Data.DataRow row, System.Int32 proposedRecord)
    // Offset: 0x104D3C0
    void SetOldRecord(::System::Data::DataRow* row, int proposedRecord);
    // private System.Void RestoreShadowIndexes()
    // Offset: 0x10493F4
    void RestoreShadowIndexes();
    // private System.Void SetShadowIndexes()
    // Offset: 0x10493B0
    void SetShadowIndexes();
    // System.Void ShadowIndexCopy()
    // Offset: 0x10543E8
    void ShadowIndexCopy();
    // System.Boolean UpdatingCurrent(System.Data.DataRow row, System.Data.DataRowAction action)
    // Offset: 0x10541D0
    bool UpdatingCurrent(::System::Data::DataRow* row, ::System::Data::DataRowAction action);
    // System.Data.DataColumn AddUniqueKey(System.Int32 position)
    // Offset: 0x10544E8
    ::System::Data::DataColumn* AddUniqueKey(int position);
    // System.Data.DataColumn AddUniqueKey()
    // Offset: 0x1054774
    ::System::Data::DataColumn* AddUniqueKey();
    // System.Data.DataColumn AddForeignKey(System.Data.DataColumn parentKey)
    // Offset: 0x105477C
    ::System::Data::DataColumn* AddForeignKey(::System::Data::DataColumn* parentKey);
    // System.Void UpdatePropertyDescriptorCollectionCache()
    // Offset: 0x105482C
    void UpdatePropertyDescriptorCollectionCache();
    // System.ComponentModel.PropertyDescriptorCollection GetPropertyDescriptorCollection(System.Attribute[] attributes)
    // Offset: 0x1054834
    ::System::ComponentModel::PropertyDescriptorCollection* GetPropertyDescriptorCollection(::ArrayW<::System::Attribute*> attributes);
    // public System.Void Merge(System.Data.DataTable table)
    // Offset: 0x1054A84
    void Merge(::System::Data::DataTable* table);
    // public System.Void Merge(System.Data.DataTable table, System.Boolean preserveChanges, System.Data.MissingSchemaAction missingSchemaAction)
    // Offset: 0x1054A90
    void Merge(::System::Data::DataTable* table, bool preserveChanges, ::System::Data::MissingSchemaAction missingSchemaAction);
    // public System.Void WriteXml(System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, System.Boolean writeHierarchy)
    // Offset: 0x1054D10
    void WriteXml(::System::Xml::XmlWriter* writer, ::System::Data::XmlWriteMode mode, bool writeHierarchy);
    // private System.Boolean CheckForClosureOnExpressions(System.Data.DataTable dt, System.Boolean writeHierarchy)
    // Offset: 0x10550B4
    bool CheckForClosureOnExpressions(::System::Data::DataTable* dt, bool writeHierarchy);
    // private System.Boolean CheckForClosureOnExpressionTables(System.Collections.Generic.List`1<System.Data.DataTable> tableList)
    // Offset: 0x1046420
    bool CheckForClosureOnExpressionTables(::System::Collections::Generic::List_1<::System::Data::DataTable*>* tableList);
    // public System.Void WriteXmlSchema(System.Xml.XmlWriter writer, System.Boolean writeHierarchy)
    // Offset: 0x10554D4
    void WriteXmlSchema(::System::Xml::XmlWriter* writer, bool writeHierarchy);
    // private System.Void RestoreConstraint(System.Boolean originalEnforceConstraint)
    // Offset: 0x1055800
    void RestoreConstraint(bool originalEnforceConstraint);
    // private System.Boolean IsEmptyXml(System.Xml.XmlReader reader)
    // Offset: 0x1055864
    bool IsEmptyXml(::System::Xml::XmlReader* reader);
    // System.Data.XmlReadMode ReadXml(System.Xml.XmlReader reader, System.Data.XmlReadMode mode, System.Boolean denyResolving)
    // Offset: 0x1055A40
    ::System::Data::XmlReadMode ReadXml(::System::Xml::XmlReader* reader, ::System::Data::XmlReadMode mode, bool denyResolving);
    // System.Void ReadEndElement(System.Xml.XmlReader reader)
    // Offset: 0x10572B4
    void ReadEndElement(::System::Xml::XmlReader* reader);
    // System.Void ReadXDRSchema(System.Xml.XmlReader reader)
    // Offset: 0x1057358
    void ReadXDRSchema(::System::Xml::XmlReader* reader);
    // System.Boolean MoveToElement(System.Xml.XmlReader reader, System.Int32 depth)
    // Offset: 0x10586F8
    bool MoveToElement(::System::Xml::XmlReader* reader, int depth);
    // private System.Void ReadXmlDiffgram(System.Xml.XmlReader reader)
    // Offset: 0x1056900
    void ReadXmlDiffgram(::System::Xml::XmlReader* reader);
    // System.Void ReadXSDSchema(System.Xml.XmlReader reader, System.Boolean denyResolving)
    // Offset: 0x10587B0
    void ReadXSDSchema(::System::Xml::XmlReader* reader, bool denyResolving);
    // System.Void ReadXmlSchema(System.Xml.XmlReader reader, System.Boolean denyResolving)
    // Offset: 0x10573CC
    void ReadXmlSchema(::System::Xml::XmlReader* reader, bool denyResolving);
    // private System.Void CreateTableList(System.Data.DataTable currentTable, System.Collections.Generic.List`1<System.Data.DataTable> tableList)
    // Offset: 0x1055174
    void CreateTableList(::System::Data::DataTable* currentTable, ::System::Collections::Generic::List_1<::System::Data::DataTable*>* tableList);
    // private System.Void CreateRelationList(System.Collections.Generic.List`1<System.Data.DataTable> tableList, System.Collections.Generic.List`1<System.Data.DataRelation> relationList)
    // Offset: 0x1058950
    void CreateRelationList(::System::Collections::Generic::List_1<::System::Data::DataTable*>* tableList, ::System::Collections::Generic::List_1<::System::Data::DataRelation*>* relationList);
    // static public System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema(System.Xml.Schema.XmlSchemaSet schemaSet)
    // Offset: 0x1058E28
    static ::System::Xml::Schema::XmlSchemaComplexType* GetDataTableSchema(::System::Xml::Schema::XmlSchemaSet* schemaSet);
    // private System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
    // Offset: 0x1059034
    ::System::Xml::Schema::XmlSchema* System_Xml_Serialization_IXmlSerializable_GetSchema();
    // protected System.Xml.Schema.XmlSchema GetSchema()
    // Offset: 0x1059044
    ::System::Xml::Schema::XmlSchema* GetSchema();
    // private System.Void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader)
    // Offset: 0x1059228
    void System_Xml_Serialization_IXmlSerializable_ReadXml(::System::Xml::XmlReader* reader);
    // private System.Void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer)
    // Offset: 0x10593FC
    void System_Xml_Serialization_IXmlSerializable_WriteXml(::System::Xml::XmlWriter* writer);
    // protected System.Void ReadXmlSerializable(System.Xml.XmlReader reader)
    // Offset: 0x1059434
    void ReadXmlSerializable(::System::Xml::XmlReader* reader);
    // System.Void AddDependentColumn(System.Data.DataColumn expressionColumn)
    // Offset: 0x10594B0
    void AddDependentColumn(::System::Data::DataColumn* expressionColumn);
    // System.Void RemoveDependentColumn(System.Data.DataColumn expressionColumn)
    // Offset: 0x1059598
    void RemoveDependentColumn(::System::Data::DataColumn* expressionColumn);
    // System.Void EvaluateExpressions()
    // Offset: 0x1059638
    void EvaluateExpressions();
    // System.Void EvaluateExpressions(System.Data.DataRow row, System.Data.DataRowAction action, System.Collections.Generic.List`1<System.Data.DataRow> cachedRows)
    // Offset: 0x1051118
    void EvaluateExpressions(::System::Data::DataRow* row, ::System::Data::DataRowAction action, ::System::Collections::Generic::List_1<::System::Data::DataRow*>* cachedRows);
    // System.Void EvaluateExpressions(System.Data.DataColumn column)
    // Offset: 0x1059970
    void EvaluateExpressions(::System::Data::DataColumn* column);
    // System.Void EvaluateDependentExpressions(System.Data.DataColumn column)
    // Offset: 0x104FE2C
    void EvaluateDependentExpressions(::System::Data::DataColumn* column);
    // System.Void EvaluateDependentExpressions(System.Collections.Generic.List`1<System.Data.DataColumn> columns, System.Data.DataRow row, System.Data.DataRowVersion version, System.Collections.Generic.List`1<System.Data.DataRow> cachedRows)
    // Offset: 0x1053390
    void EvaluateDependentExpressions(::System::Collections::Generic::List_1<::System::Data::DataColumn*>* columns, ::System::Data::DataRow* row, ::System::Data::DataRowVersion version, ::System::Collections::Generic::List_1<::System::Data::DataRow*>* cachedRows);
    // public override System.ComponentModel.ISite get_Site()
    // Offset: 0x104EA1C
    // Implemented from: System.ComponentModel.MarshalByValueComponent
    // Base method: System.ComponentModel.ISite MarshalByValueComponent::get_Site()
    ::System::ComponentModel::ISite* get_Site();
    // public System.Void .ctor()
    // Offset: 0x1041A90
    // Implemented from: System.ComponentModel.MarshalByValueComponent
    // Base method: System.Void MarshalByValueComponent::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DataTable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::Data::DataTable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DataTable*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x1054470
    // Implemented from: System.ComponentModel.MarshalByValueComponent
    // Base method: System.String MarshalByValueComponent::ToString()
    ::StringW ToString();
  }; // System.Data.DataTable
  #pragma pack(pop)
  static check_size<sizeof(DataTable), 544 + sizeof(int)> __System_Data_DataTableSizeCheck;
  static_assert(sizeof(DataTable) == 0x224);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::Data::DataTable::get_CaseSensitive
// Il2CppName: get_CaseSensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_CaseSensitive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_CaseSensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_CaseSensitive
// Il2CppName: set_CaseSensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(bool)>(&System::Data::DataTable::set_CaseSensitive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_CaseSensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_AreIndexEventsSuspended
// Il2CppName: get_AreIndexEventsSuspended
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_AreIndexEventsSuspended)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_AreIndexEventsSuspended", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_IsTypedDataTable
// Il2CppName: get_IsTypedDataTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_IsTypedDataTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_IsTypedDataTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_SelfNested
// Il2CppName: get_SelfNested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_SelfNested)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_SelfNested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_LiveIndexes
// Il2CppName: get_LiveIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Data::Index*>* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_LiveIndexes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_LiveIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_RemotingFormat
// Il2CppName: get_RemotingFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::SerializationFormat (System::Data::DataTable::*)()>(&System::Data::DataTable::get_RemotingFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_RemotingFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_RemotingFormat
// Il2CppName: set_RemotingFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::SerializationFormat)>(&System::Data::DataTable::set_RemotingFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Data", "SerializationFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_RemotingFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_UKColumnPositionForInference
// Il2CppName: get_UKColumnPositionForInference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)()>(&System::Data::DataTable::get_UKColumnPositionForInference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_UKColumnPositionForInference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_UKColumnPositionForInference
// Il2CppName: set_UKColumnPositionForInference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(int)>(&System::Data::DataTable::set_UKColumnPositionForInference)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_UKColumnPositionForInference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_ChildRelations
// Il2CppName: get_ChildRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRelationCollection* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_ChildRelations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_ChildRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_Columns
// Il2CppName: get_Columns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataColumnCollection* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_Columns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_Columns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_CompareInfo
// Il2CppName: get_CompareInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CompareInfo* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_CompareInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_CompareInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_Constraints
// Il2CppName: get_Constraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::ConstraintCollection* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_Constraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_Constraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_DataSet
// Il2CppName: get_DataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataSet* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_DataSet)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_DataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_DisplayExpressionInternal
// Il2CppName: get_DisplayExpressionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataTable::*)()>(&System::Data::DataTable::get_DisplayExpressionInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_DisplayExpressionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_EnforceConstraints
// Il2CppName: get_EnforceConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_EnforceConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_EnforceConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_EnforceConstraints
// Il2CppName: set_EnforceConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(bool)>(&System::Data::DataTable::set_EnforceConstraints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_EnforceConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_SuspendEnforceConstraints
// Il2CppName: get_SuspendEnforceConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_SuspendEnforceConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_SuspendEnforceConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_SuspendEnforceConstraints
// Il2CppName: set_SuspendEnforceConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(bool)>(&System::Data::DataTable::set_SuspendEnforceConstraints)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_SuspendEnforceConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_ExtendedProperties
// Il2CppName: get_ExtendedProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::PropertyCollection* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_ExtendedProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_ExtendedProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_FormatProvider
// Il2CppName: get_FormatProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IFormatProvider* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_FormatProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_FormatProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_Locale
// Il2CppName: get_Locale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Globalization::CultureInfo* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_Locale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_Locale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_Locale
// Il2CppName: set_Locale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Globalization::CultureInfo*)>(&System::Data::DataTable::set_Locale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_Locale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_MinimumCapacity
// Il2CppName: get_MinimumCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)()>(&System::Data::DataTable::get_MinimumCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_MinimumCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_MinimumCapacity
// Il2CppName: set_MinimumCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(int)>(&System::Data::DataTable::set_MinimumCapacity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_MinimumCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_RecordCapacity
// Il2CppName: get_RecordCapacity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)()>(&System::Data::DataTable::get_RecordCapacity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_RecordCapacity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_ElementColumnCount
// Il2CppName: get_ElementColumnCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)()>(&System::Data::DataTable::get_ElementColumnCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_ElementColumnCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_ElementColumnCount
// Il2CppName: set_ElementColumnCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(int)>(&System::Data::DataTable::set_ElementColumnCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_ElementColumnCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_ParentRelations
// Il2CppName: get_ParentRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRelationCollection* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_ParentRelations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_ParentRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_MergingData
// Il2CppName: get_MergingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_MergingData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_MergingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_MergingData
// Il2CppName: set_MergingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(bool)>(&System::Data::DataTable::set_MergingData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_MergingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_NestedParentRelations
// Il2CppName: get_NestedParentRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataRelation*> (System::Data::DataTable::*)()>(&System::Data::DataTable::get_NestedParentRelations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_NestedParentRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_SchemaLoading
// Il2CppName: get_SchemaLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_SchemaLoading)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_SchemaLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_NestedParentsCount
// Il2CppName: get_NestedParentsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)()>(&System::Data::DataTable::get_NestedParentsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_NestedParentsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_PrimaryKey
// Il2CppName: get_PrimaryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataColumn*> (System::Data::DataTable::*)()>(&System::Data::DataTable::get_PrimaryKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_PrimaryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_PrimaryKey
// Il2CppName: set_PrimaryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::ArrayW<::System::Data::DataColumn*>)>(&System::Data::DataTable::set_PrimaryKey)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "DataColumn"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_PrimaryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_Rows
// Il2CppName: get_Rows
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRowCollection* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_Rows)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_Rows", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_TableName
// Il2CppName: get_TableName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataTable::*)()>(&System::Data::DataTable::get_TableName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_TableName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_TableName
// Il2CppName: set_TableName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::StringW)>(&System::Data::DataTable::set_TableName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_TableName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_EncodedTableName
// Il2CppName: get_EncodedTableName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataTable::*)()>(&System::Data::DataTable::get_EncodedTableName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_EncodedTableName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataTable::*)()>(&System::Data::DataTable::get_Namespace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_Namespace
// Il2CppName: set_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::StringW)>(&System::Data::DataTable::set_Namespace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataTable::*)()>(&System::Data::DataTable::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_Prefix
// Il2CppName: set_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::StringW)>(&System::Data::DataTable::set_Prefix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_XmlText
// Il2CppName: get_XmlText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataColumn* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_XmlText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_XmlText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_XmlText
// Il2CppName: set_XmlText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::set_XmlText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_XmlText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_MaxOccurs
// Il2CppName: get_MaxOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Data::DataTable::*)()>(&System::Data::DataTable::get_MaxOccurs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_MaxOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_MaxOccurs
// Il2CppName: set_MaxOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Decimal)>(&System::Data::DataTable::set_MaxOccurs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_MaxOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_MinOccurs
// Il2CppName: get_MinOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Decimal (System::Data::DataTable::*)()>(&System::Data::DataTable::get_MinOccurs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_MinOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_MinOccurs
// Il2CppName: set_MinOccurs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Decimal)>(&System::Data::DataTable::set_MinOccurs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Decimal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_MinOccurs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_NeedColumnChangeEvents
// Il2CppName: get_NeedColumnChangeEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::get_NeedColumnChangeEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_NeedColumnChangeEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_TypeName
// Il2CppName: get_TypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::XmlQualifiedName* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_TypeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_TypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::set_TypeName
// Il2CppName: set_TypeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlQualifiedName*)>(&System::Data::DataTable::set_TypeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlQualifiedName")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "set_TypeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_RowDiffId
// Il2CppName: get_RowDiffId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Hashtable* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_RowDiffId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_RowDiffId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_ObjectID
// Il2CppName: get_ObjectID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)()>(&System::Data::DataTable::get_ObjectID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_ObjectID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::DataTable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::DataTable::GetObjectData
// Il2CppName: GetObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext)>(&System::Data::DataTable::GetObjectData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SerializeDataTable
// Il2CppName: SerializeDataTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, bool, ::System::Data::SerializationFormat)>(&System::Data::DataTable::SerializeDataTable)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* isSingleTable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* remotingFormat = &::il2cpp_utils::GetClassFromName("System.Data", "SerializationFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SerializeDataTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, isSingleTable, remotingFormat});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::DeserializeDataTable
// Il2CppName: DeserializeDataTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, bool, ::System::Data::SerializationFormat)>(&System::Data::DataTable::DeserializeDataTable)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* isSingleTable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* remotingFormat = &::il2cpp_utils::GetClassFromName("System.Data", "SerializationFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "DeserializeDataTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, isSingleTable, remotingFormat});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SerializeTableSchema
// Il2CppName: SerializeTableSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, bool)>(&System::Data::DataTable::SerializeTableSchema)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* isSingleTable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SerializeTableSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, isSingleTable});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::DeserializeTableSchema
// Il2CppName: DeserializeTableSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, bool)>(&System::Data::DataTable::DeserializeTableSchema)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* isSingleTable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "DeserializeTableSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, isSingleTable});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SerializeConstraints
// Il2CppName: SerializeConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, int, bool)>(&System::Data::DataTable::SerializeConstraints)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* serIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* allConstraints = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SerializeConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, serIndex, allConstraints});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::DeserializeConstraints
// Il2CppName: DeserializeConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, int, bool)>(&System::Data::DataTable::DeserializeConstraints)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* serIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* allConstraints = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "DeserializeConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, serIndex, allConstraints});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SerializeExpressionColumns
// Il2CppName: SerializeExpressionColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, int)>(&System::Data::DataTable::SerializeExpressionColumns)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* serIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SerializeExpressionColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, serIndex});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::DeserializeExpressionColumns
// Il2CppName: DeserializeExpressionColumns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, int)>(&System::Data::DataTable::DeserializeExpressionColumns)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* serIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "DeserializeExpressionColumns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, serIndex});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SerializeTableData
// Il2CppName: SerializeTableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, int)>(&System::Data::DataTable::SerializeTableData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* serIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SerializeTableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, serIndex});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::DeserializeTableData
// Il2CppName: DeserializeTableData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Runtime::Serialization::SerializationInfo*, ::System::Runtime::Serialization::StreamingContext, int)>(&System::Data::DataTable::DeserializeTableData)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "SerializationInfo")->byval_arg;
    static auto* context = &::il2cpp_utils::GetClassFromName("System.Runtime.Serialization", "StreamingContext")->byval_arg;
    static auto* serIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "DeserializeTableData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info, context, serIndex});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ConvertToRowState
// Il2CppName: ConvertToRowState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRowState (System::Data::DataTable::*)(::System::Collections::BitArray*, int)>(&System::Data::DataTable::ConvertToRowState)> {
  static const MethodInfo* get() {
    static auto* bitStates = &::il2cpp_utils::GetClassFromName("System.Collections", "BitArray")->byval_arg;
    static auto* bitIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ConvertToRowState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bitStates, bitIndex});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetRowAndColumnErrors
// Il2CppName: GetRowAndColumnErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(int, ::System::Collections::Hashtable*, ::System::Collections::Hashtable*)>(&System::Data::DataTable::GetRowAndColumnErrors)> {
  static const MethodInfo* get() {
    static auto* rowIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rowErrors = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    static auto* colErrors = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetRowAndColumnErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rowIndex, rowErrors, colErrors});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ConvertToRowError
// Il2CppName: ConvertToRowError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(int, ::System::Collections::Hashtable*, ::System::Collections::Hashtable*)>(&System::Data::DataTable::ConvertToRowError)> {
  static const MethodInfo* get() {
    static auto* rowIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rowErrors = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    static auto* colErrors = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ConvertToRowError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rowIndex, rowErrors, colErrors});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RestoreIndexEvents
// Il2CppName: RestoreIndexEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(bool)>(&System::Data::DataTable::RestoreIndexEvents)> {
  static const MethodInfo* get() {
    static auto* forceReset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RestoreIndexEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forceReset});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SuspendIndexEvents
// Il2CppName: SuspendIndexEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::SuspendIndexEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SuspendIndexEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetCaseSensitiveValue
// Il2CppName: SetCaseSensitiveValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)(bool, bool, bool)>(&System::Data::DataTable::SetCaseSensitiveValue)> {
  static const MethodInfo* get() {
    static auto* isCaseSensitive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* userSet = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resetIndexes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetCaseSensitiveValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isCaseSensitive, userSet, resetIndexes});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ShouldSerializeCaseSensitive
// Il2CppName: ShouldSerializeCaseSensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::ShouldSerializeCaseSensitive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ShouldSerializeCaseSensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ResetConstraints
// Il2CppName: ResetConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::ResetConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ResetConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetDataSet
// Il2CppName: SetDataSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataSet*)>(&System::Data::DataTable::SetDataSet)> {
  static const MethodInfo* get() {
    static auto* dataSet = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetDataSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataSet});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::EnableConstraints
// Il2CppName: EnableConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::EnableConstraints)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "EnableConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetLocaleValue
// Il2CppName: SetLocaleValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)(::System::Globalization::CultureInfo*, bool, bool)>(&System::Data::DataTable::SetLocaleValue)> {
  static const MethodInfo* get() {
    static auto* culture = &::il2cpp_utils::GetClassFromName("System.Globalization", "CultureInfo")->byval_arg;
    static auto* userSet = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* resetIndexes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetLocaleValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{culture, userSet, resetIndexes});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ShouldSerializeLocale
// Il2CppName: ShouldSerializeLocale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::ShouldSerializeLocale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ShouldSerializeLocale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CacheNestedParent
// Il2CppName: CacheNestedParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::CacheNestedParent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CacheNestedParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::FindNestedParentRelations
// Il2CppName: FindNestedParentRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataRelation*> (System::Data::DataTable::*)()>(&System::Data::DataTable::FindNestedParentRelations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "FindNestedParentRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetInheritedNamespace
// Il2CppName: GetInheritedNamespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataTable::*)(::System::Collections::Generic::List_1<::System::Data::DataTable*>*)>(&System::Data::DataTable::GetInheritedNamespace)> {
  static const MethodInfo* get() {
    static auto* visitedTables = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataTable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetInheritedNamespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visitedTables});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::IsNamespaceInherited
// Il2CppName: IsNamespaceInherited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)()>(&System::Data::DataTable::IsNamespaceInherited)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "IsNamespaceInherited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CheckCascadingNamespaceConflict
// Il2CppName: CheckCascadingNamespaceConflict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::StringW)>(&System::Data::DataTable::CheckCascadingNamespaceConflict)> {
  static const MethodInfo* get() {
    static auto* realNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CheckCascadingNamespaceConflict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{realNamespace});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CheckNamespaceValidityForNestedRelations
// Il2CppName: CheckNamespaceValidityForNestedRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::StringW)>(&System::Data::DataTable::CheckNamespaceValidityForNestedRelations)> {
  static const MethodInfo* get() {
    static auto* realNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CheckNamespaceValidityForNestedRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{realNamespace});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CheckNamespaceValidityForNestedParentRelations
// Il2CppName: CheckNamespaceValidityForNestedParentRelations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::StringW, ::System::Data::DataTable*)>(&System::Data::DataTable::CheckNamespaceValidityForNestedParentRelations)> {
  static const MethodInfo* get() {
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parentTable = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CheckNamespaceValidityForNestedParentRelations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ns, parentTable});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::DoRaiseNamespaceChange
// Il2CppName: DoRaiseNamespaceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::DoRaiseNamespaceChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "DoRaiseNamespaceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetKeyValues
// Il2CppName: SetKeyValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataKey, ::ArrayW<::Il2CppObject*>, int)>(&System::Data::DataTable::SetKeyValues)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System.Data", "DataKey")->byval_arg;
    static auto* keyValues = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetKeyValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key, keyValues, record});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::FindByIndex
// Il2CppName: FindByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)(::System::Data::Index*, ::ArrayW<::Il2CppObject*>)>(&System::Data::DataTable::FindByIndex)> {
  static const MethodInfo* get() {
    static auto* ndx = &::il2cpp_utils::GetClassFromName("System.Data", "Index")->byval_arg;
    static auto* key = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "FindByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ndx, key});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::FindMergeTarget
// Il2CppName: FindMergeTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)(::System::Data::DataRow*, ::System::Data::DataKey, ::System::Data::Index*)>(&System::Data::DataTable::FindMergeTarget)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System.Data", "DataKey")->byval_arg;
    static auto* ndx = &::il2cpp_utils::GetClassFromName("System.Data", "Index")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "FindMergeTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, key, ndx});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetMergeRecords
// Il2CppName: SetMergeRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, int, int, ::System::Data::DataRowAction)>(&System::Data::DataTable::SetMergeRecords)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* newRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetMergeRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, newRecord, oldRecord, action});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::MergeRow
// Il2CppName: MergeRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)(::System::Data::DataRow*, ::System::Data::DataRow*, bool, ::System::Data::Index*)>(&System::Data::DataTable::MergeRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* targetRow = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* preserveChanges = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* idxSearch = &::il2cpp_utils::GetClassFromName("System.Data", "Index")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "MergeRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, targetRow, preserveChanges, idxSearch});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::DataTable::*)()>(&System::Data::DataTable::CreateInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::DataTable::*)()>(&System::Data::DataTable::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::DataTable::*)(::System::Data::DataSet*)>(&System::Data::DataTable::Clone)> {
  static const MethodInfo* get() {
    static auto* cloneDS = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cloneDS});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::IncrementalCloneTo
// Il2CppName: IncrementalCloneTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::DataTable::*)(::System::Data::DataTable*, ::System::Data::DataTable*)>(&System::Data::DataTable::IncrementalCloneTo)> {
  static const MethodInfo* get() {
    static auto* sourceTable = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* targetTable = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "IncrementalCloneTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceTable, targetTable});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CloneHierarchy
// Il2CppName: CloneHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::DataTable::*)(::System::Data::DataTable*, ::System::Data::DataSet*, ::System::Collections::Hashtable*)>(&System::Data::DataTable::CloneHierarchy)> {
  static const MethodInfo* get() {
    static auto* sourceTable = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* ds = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* visitedMap = &::il2cpp_utils::GetClassFromName("System.Collections", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CloneHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceTable, ds, visitedMap});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CloneTo
// Il2CppName: CloneTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataTable* (System::Data::DataTable::*)(::System::Data::DataTable*, ::System::Data::DataSet*, bool)>(&System::Data::DataTable::CloneTo)> {
  static const MethodInfo* get() {
    static auto* clone = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* cloneDS = &::il2cpp_utils::GetClassFromName("System.Data", "DataSet")->byval_arg;
    static auto* skipExpressionColumns = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CloneTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clone, cloneDS, skipExpressionColumns});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::AddRow
// Il2CppName: AddRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, int)>(&System::Data::DataTable::AddRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* proposedID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "AddRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, proposedID});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::InsertRow
// Il2CppName: InsertRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, int, int)>(&System::Data::DataTable::InsertRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* proposedID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "InsertRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, proposedID, pos});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::InsertRow
// Il2CppName: InsertRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, int64_t, int, bool)>(&System::Data::DataTable::InsertRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* proposedID = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fireEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "InsertRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, proposedID, pos, fireEvent});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CheckNotModifying
// Il2CppName: CheckNotModifying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*)>(&System::Data::DataTable::CheckNotModifying)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CheckNotModifying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(bool)>(&System::Data::DataTable::Clear)> {
  static const MethodInfo* get() {
    static auto* clearAll = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearAll});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CascadeAll
// Il2CppName: CascadeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, ::System::Data::DataRowAction)>(&System::Data::DataTable::CascadeAll)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CascadeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, action});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CommitRow
// Il2CppName: CommitRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*)>(&System::Data::DataTable::CommitRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CommitRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)(::StringW, ::StringW)>(&System::Data::DataTable::Compare)> {
  static const MethodInfo* get() {
    static auto* s1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s1, s2});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)(::StringW, ::StringW, ::System::Globalization::CompareInfo*)>(&System::Data::DataTable::Compare)> {
  static const MethodInfo* get() {
    static auto* s1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* comparer = &::il2cpp_utils::GetClassFromName("System.Globalization", "CompareInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s1, s2, comparer});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::IndexOf
// Il2CppName: IndexOf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)(::StringW, ::StringW)>(&System::Data::DataTable::IndexOf)> {
  static const MethodInfo* get() {
    static auto* s1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "IndexOf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s1, s2});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::IsSuffix
// Il2CppName: IsSuffix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)(::StringW, ::StringW)>(&System::Data::DataTable::IsSuffix)> {
  static const MethodInfo* get() {
    static auto* s1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* s2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "IsSuffix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{s1, s2});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::DeleteRow
// Il2CppName: DeleteRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*)>(&System::Data::DataTable::DeleteRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "DeleteRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::FormatSortString
// Il2CppName: FormatSortString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataTable::*)(::ArrayW<::System::Data::IndexField>)>(&System::Data::DataTable::FormatSortString)> {
  static const MethodInfo* get() {
    static auto* indexDesc = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "IndexField"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "FormatSortString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexDesc});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::FreeRecord
// Il2CppName: FreeRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(ByRef<int>)>(&System::Data::DataTable::FreeRecord)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "FreeRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetIndex
// Il2CppName: GetIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Index* (System::Data::DataTable::*)(::StringW, ::System::Data::DataViewRowState, ::System::Data::IFilter*)>(&System::Data::DataTable::GetIndex)> {
  static const MethodInfo* get() {
    static auto* sort = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* recordStates = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* rowFilter = &::il2cpp_utils::GetClassFromName("System.Data", "IFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sort, recordStates, rowFilter});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetIndex
// Il2CppName: GetIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::Index* (System::Data::DataTable::*)(::ArrayW<::System::Data::IndexField>, ::System::Data::DataViewRowState, ::System::Data::IFilter*)>(&System::Data::DataTable::GetIndex)> {
  static const MethodInfo* get() {
    static auto* indexDesc = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Data", "IndexField"), 1)->byval_arg;
    static auto* recordStates = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* rowFilter = &::il2cpp_utils::GetClassFromName("System.Data", "IFilter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indexDesc, recordStates, rowFilter});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetListeners
// Il2CppName: GetListeners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Data::DataViewListener*>* (System::Data::DataTable::*)()>(&System::Data::DataTable::GetListeners)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetListeners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetSpecialHashCode
// Il2CppName: GetSpecialHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)(::StringW)>(&System::Data::DataTable::GetSpecialHashCode)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetSpecialHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::InsertRow
// Il2CppName: InsertRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, int64_t)>(&System::Data::DataTable::InsertRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* proposedID = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "InsertRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, proposedID});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewRecord
// Il2CppName: NewRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)()>(&System::Data::DataTable::NewRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewUninitializedRecord
// Il2CppName: NewUninitializedRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)()>(&System::Data::DataTable::NewUninitializedRecord)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewUninitializedRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewRecord
// Il2CppName: NewRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::Data::DataTable::*)(int)>(&System::Data::DataTable::NewRecord)> {
  static const MethodInfo* get() {
    static auto* sourceRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceRecord});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewEmptyRow
// Il2CppName: NewEmptyRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)()>(&System::Data::DataTable::NewEmptyRow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewEmptyRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewUninitializedRow
// Il2CppName: NewUninitializedRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)()>(&System::Data::DataTable::NewUninitializedRow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewUninitializedRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewRow
// Il2CppName: NewRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)()>(&System::Data::DataTable::NewRow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CreateEmptyRow
// Il2CppName: CreateEmptyRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)()>(&System::Data::DataTable::CreateEmptyRow)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CreateEmptyRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewRowCreated
// Il2CppName: NewRowCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*)>(&System::Data::DataTable::NewRowCreated)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewRowCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewRow
// Il2CppName: NewRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)(int)>(&System::Data::DataTable::NewRow)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewRowFromBuilder
// Il2CppName: NewRowFromBuilder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRow* (System::Data::DataTable::*)(::System::Data::DataRowBuilder*)>(&System::Data::DataTable::NewRowFromBuilder)> {
  static const MethodInfo* get() {
    static auto* builder = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewRowFromBuilder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{builder});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetRowType
// Il2CppName: GetRowType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::Data::DataTable::*)()>(&System::Data::DataTable::GetRowType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetRowType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::NewRowArray
// Il2CppName: NewRowArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::DataRow*> (System::Data::DataTable::*)(int)>(&System::Data::DataTable::NewRowArray)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "NewRowArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnColumnChanging
// Il2CppName: OnColumnChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumnChangeEventArgs*)>(&System::Data::DataTable::OnColumnChanging)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumnChangeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnColumnChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnColumnChanged
// Il2CppName: OnColumnChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumnChangeEventArgs*)>(&System::Data::DataTable::OnColumnChanged)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumnChangeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnColumnChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnPropertyChanging
// Il2CppName: OnPropertyChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::ComponentModel::PropertyChangedEventArgs*)>(&System::Data::DataTable::OnPropertyChanging)> {
  static const MethodInfo* get() {
    static auto* pcevent = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyChangedEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnPropertyChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pcevent});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnRemoveColumnInternal
// Il2CppName: OnRemoveColumnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::OnRemoveColumnInternal)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnRemoveColumnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnRemoveColumn
// Il2CppName: OnRemoveColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::OnRemoveColumn)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnRemoveColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnRowChanged
// Il2CppName: OnRowChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRowChangeEventArgs* (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*, ::System::Data::DataRow*, ::System::Data::DataRowAction)>(&System::Data::DataTable::OnRowChanged)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    static auto* eRow = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* eAction = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnRowChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args, eRow, eAction});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnRowChanging
// Il2CppName: OnRowChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRowChangeEventArgs* (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*, ::System::Data::DataRow*, ::System::Data::DataRowAction)>(&System::Data::DataTable::OnRowChanging)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    static auto* eRow = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* eAction = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnRowChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args, eRow, eAction});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnRowChanged
// Il2CppName: OnRowChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*)>(&System::Data::DataTable::OnRowChanged)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnRowChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnRowChanging
// Il2CppName: OnRowChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*)>(&System::Data::DataTable::OnRowChanging)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnRowChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnRowDeleting
// Il2CppName: OnRowDeleting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*)>(&System::Data::DataTable::OnRowDeleting)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnRowDeleting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnRowDeleted
// Il2CppName: OnRowDeleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*)>(&System::Data::DataTable::OnRowDeleted)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnRowDeleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnTableCleared
// Il2CppName: OnTableCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataTableClearEventArgs*)>(&System::Data::DataTable::OnTableCleared)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataTableClearEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnTableCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnTableClearing
// Il2CppName: OnTableClearing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataTableClearEventArgs*)>(&System::Data::DataTable::OnTableClearing)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataTableClearEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnTableClearing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::OnTableNewRow
// Il2CppName: OnTableNewRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataTableNewRowEventArgs*)>(&System::Data::DataTable::OnTableNewRow)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("System.Data", "DataTableNewRowEventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "OnTableNewRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ParseSortString
// Il2CppName: ParseSortString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::Data::IndexField> (System::Data::DataTable::*)(::StringW)>(&System::Data::DataTable::ParseSortString)> {
  static const MethodInfo* get() {
    static auto* sortString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ParseSortString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sortString});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RaisePropertyChanging
// Il2CppName: RaisePropertyChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::StringW)>(&System::Data::DataTable::RaisePropertyChanging)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RaisePropertyChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RecordChanged
// Il2CppName: RecordChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(int)>(&System::Data::DataTable::RecordChanged)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RecordChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RecordChanged
// Il2CppName: RecordChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::ArrayW<int>, ::ArrayW<int>)>(&System::Data::DataTable::RecordChanged)> {
  static const MethodInfo* get() {
    static auto* oldIndex = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* newIndex = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RecordChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldIndex, newIndex});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RecordStateChanged
// Il2CppName: RecordStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(int, ::System::Data::DataViewRowState, ::System::Data::DataViewRowState)>(&System::Data::DataTable::RecordStateChanged)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* newState = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RecordStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record, oldState, newState});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RecordStateChanged
// Il2CppName: RecordStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(int, ::System::Data::DataViewRowState, ::System::Data::DataViewRowState, int, ::System::Data::DataViewRowState, ::System::Data::DataViewRowState)>(&System::Data::DataTable::RecordStateChanged)> {
  static const MethodInfo* get() {
    static auto* record1 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldState1 = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* newState1 = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* record2 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* oldState2 = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    static auto* newState2 = &::il2cpp_utils::GetClassFromName("System.Data", "DataViewRowState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RecordStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record1, oldState1, newState1, record2, oldState2, newState2});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RemoveRecordFromIndexes
// Il2CppName: RemoveRecordFromIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (System::Data::DataTable::*)(::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::DataTable::RemoveRecordFromIndexes)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RemoveRecordFromIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, version});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::InsertRecordToIndexes
// Il2CppName: InsertRecordToIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (System::Data::DataTable::*)(::System::Data::DataRow*, ::System::Data::DataRowVersion)>(&System::Data::DataTable::InsertRecordToIndexes)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "InsertRecordToIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, version});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SilentlySetValue
// Il2CppName: SilentlySetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, ::System::Data::DataColumn*, ::System::Data::DataRowVersion, ::Il2CppObject*)>(&System::Data::DataTable::SilentlySetValue)> {
  static const MethodInfo* get() {
    static auto* dr = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* dc = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SilentlySetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dr, dc, version, newValue});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RemoveRow
// Il2CppName: RemoveRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, bool)>(&System::Data::DataTable::RemoveRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* check = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RemoveRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, check});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ResetIndexes
// Il2CppName: ResetIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::ResetIndexes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ResetIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ResetInternalIndexes
// Il2CppName: ResetInternalIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::ResetInternalIndexes)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ResetInternalIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RollbackRow
// Il2CppName: RollbackRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*)>(&System::Data::DataTable::RollbackRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RollbackRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RaiseRowChanged
// Il2CppName: RaiseRowChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRowChangeEventArgs* (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*, ::System::Data::DataRow*, ::System::Data::DataRowAction)>(&System::Data::DataTable::RaiseRowChanged)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    static auto* eRow = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* eAction = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RaiseRowChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args, eRow, eAction});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RaiseRowChanging
// Il2CppName: RaiseRowChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRowChangeEventArgs* (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*, ::System::Data::DataRow*, ::System::Data::DataRowAction)>(&System::Data::DataTable::RaiseRowChanging)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    static auto* eRow = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* eAction = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RaiseRowChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args, eRow, eAction});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RaiseRowChanging
// Il2CppName: RaiseRowChanging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataRowChangeEventArgs* (System::Data::DataTable::*)(::System::Data::DataRowChangeEventArgs*, ::System::Data::DataRow*, ::System::Data::DataRowAction, bool)>(&System::Data::DataTable::RaiseRowChanging)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowChangeEventArgs")->byval_arg;
    static auto* eRow = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* eAction = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    static auto* fireEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RaiseRowChanging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args, eRow, eAction, fireEvent});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetNewRecord
// Il2CppName: SetNewRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, int, ::System::Data::DataRowAction, bool, bool, bool)>(&System::Data::DataTable::SetNewRecord)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* proposedRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    static auto* isInMerge = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fireEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* suppressEnsurePropertyChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetNewRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, proposedRecord, action, isInMerge, fireEvent, suppressEnsurePropertyChanged});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetNewRecordWorker
// Il2CppName: SetNewRecordWorker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, int, ::System::Data::DataRowAction, bool, bool, int, bool, ByRef<::System::Exception*>)>(&System::Data::DataTable::SetNewRecordWorker)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* proposedRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    static auto* isInMerge = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* suppressEnsurePropertyChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fireEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* deferredException = &::il2cpp_utils::GetClassFromName("System", "Exception")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetNewRecordWorker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, proposedRecord, action, isInMerge, suppressEnsurePropertyChanged, position, fireEvent, deferredException});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetOldRecord
// Il2CppName: SetOldRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, int)>(&System::Data::DataTable::SetOldRecord)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* proposedRecord = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetOldRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, proposedRecord});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RestoreShadowIndexes
// Il2CppName: RestoreShadowIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::RestoreShadowIndexes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RestoreShadowIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::SetShadowIndexes
// Il2CppName: SetShadowIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::SetShadowIndexes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "SetShadowIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ShadowIndexCopy
// Il2CppName: ShadowIndexCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::ShadowIndexCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ShadowIndexCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::UpdatingCurrent
// Il2CppName: UpdatingCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)(::System::Data::DataRow*, ::System::Data::DataRowAction)>(&System::Data::DataTable::UpdatingCurrent)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "UpdatingCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, action});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::AddUniqueKey
// Il2CppName: AddUniqueKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataColumn* (System::Data::DataTable::*)(int)>(&System::Data::DataTable::AddUniqueKey)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "AddUniqueKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::AddUniqueKey
// Il2CppName: AddUniqueKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataColumn* (System::Data::DataTable::*)()>(&System::Data::DataTable::AddUniqueKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "AddUniqueKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::AddForeignKey
// Il2CppName: AddForeignKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::DataColumn* (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::AddForeignKey)> {
  static const MethodInfo* get() {
    static auto* parentKey = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "AddForeignKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentKey});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::UpdatePropertyDescriptorCollectionCache
// Il2CppName: UpdatePropertyDescriptorCollectionCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::UpdatePropertyDescriptorCollectionCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "UpdatePropertyDescriptorCollectionCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetPropertyDescriptorCollection
// Il2CppName: GetPropertyDescriptorCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::PropertyDescriptorCollection* (System::Data::DataTable::*)(::ArrayW<::System::Attribute*>)>(&System::Data::DataTable::GetPropertyDescriptorCollection)> {
  static const MethodInfo* get() {
    static auto* attributes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Attribute"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetPropertyDescriptorCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributes});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Merge
// Il2CppName: Merge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataTable*)>(&System::Data::DataTable::Merge)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Merge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::Merge
// Il2CppName: Merge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataTable*, bool, ::System::Data::MissingSchemaAction)>(&System::Data::DataTable::Merge)> {
  static const MethodInfo* get() {
    static auto* table = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* preserveChanges = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* missingSchemaAction = &::il2cpp_utils::GetClassFromName("System.Data", "MissingSchemaAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "Merge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{table, preserveChanges, missingSchemaAction});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::WriteXml
// Il2CppName: WriteXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlWriter*, ::System::Data::XmlWriteMode, bool)>(&System::Data::DataTable::WriteXml)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Data", "XmlWriteMode")->byval_arg;
    static auto* writeHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "WriteXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, mode, writeHierarchy});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CheckForClosureOnExpressions
// Il2CppName: CheckForClosureOnExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)(::System::Data::DataTable*, bool)>(&System::Data::DataTable::CheckForClosureOnExpressions)> {
  static const MethodInfo* get() {
    static auto* dt = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* writeHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CheckForClosureOnExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dt, writeHierarchy});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CheckForClosureOnExpressionTables
// Il2CppName: CheckForClosureOnExpressionTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)(::System::Collections::Generic::List_1<::System::Data::DataTable*>*)>(&System::Data::DataTable::CheckForClosureOnExpressionTables)> {
  static const MethodInfo* get() {
    static auto* tableList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataTable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CheckForClosureOnExpressionTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableList});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::WriteXmlSchema
// Il2CppName: WriteXmlSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlWriter*, bool)>(&System::Data::DataTable::WriteXmlSchema)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    static auto* writeHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "WriteXmlSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, writeHierarchy});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RestoreConstraint
// Il2CppName: RestoreConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(bool)>(&System::Data::DataTable::RestoreConstraint)> {
  static const MethodInfo* get() {
    static auto* originalEnforceConstraint = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RestoreConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalEnforceConstraint});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::IsEmptyXml
// Il2CppName: IsEmptyXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)(::System::Xml::XmlReader*)>(&System::Data::DataTable::IsEmptyXml)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "IsEmptyXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ReadXml
// Il2CppName: ReadXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Data::XmlReadMode (System::Data::DataTable::*)(::System::Xml::XmlReader*, ::System::Data::XmlReadMode, bool)>(&System::Data::DataTable::ReadXml)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("System.Data", "XmlReadMode")->byval_arg;
    static auto* denyResolving = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ReadXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, mode, denyResolving});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ReadEndElement
// Il2CppName: ReadEndElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlReader*)>(&System::Data::DataTable::ReadEndElement)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ReadEndElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ReadXDRSchema
// Il2CppName: ReadXDRSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlReader*)>(&System::Data::DataTable::ReadXDRSchema)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ReadXDRSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::MoveToElement
// Il2CppName: MoveToElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::Data::DataTable::*)(::System::Xml::XmlReader*, int)>(&System::Data::DataTable::MoveToElement)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "MoveToElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, depth});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ReadXmlDiffgram
// Il2CppName: ReadXmlDiffgram
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlReader*)>(&System::Data::DataTable::ReadXmlDiffgram)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ReadXmlDiffgram", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ReadXSDSchema
// Il2CppName: ReadXSDSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlReader*, bool)>(&System::Data::DataTable::ReadXSDSchema)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* denyResolving = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ReadXSDSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, denyResolving});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ReadXmlSchema
// Il2CppName: ReadXmlSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlReader*, bool)>(&System::Data::DataTable::ReadXmlSchema)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    static auto* denyResolving = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ReadXmlSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader, denyResolving});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CreateTableList
// Il2CppName: CreateTableList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataTable*, ::System::Collections::Generic::List_1<::System::Data::DataTable*>*)>(&System::Data::DataTable::CreateTableList)> {
  static const MethodInfo* get() {
    static auto* currentTable = &::il2cpp_utils::GetClassFromName("System.Data", "DataTable")->byval_arg;
    static auto* tableList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataTable")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CreateTableList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentTable, tableList});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::CreateRelationList
// Il2CppName: CreateRelationList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Collections::Generic::List_1<::System::Data::DataTable*>*, ::System::Collections::Generic::List_1<::System::Data::DataRelation*>*)>(&System::Data::DataTable::CreateRelationList)> {
  static const MethodInfo* get() {
    static auto* tableList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataTable")})->byval_arg;
    static auto* relationList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataRelation")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "CreateRelationList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableList, relationList});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetDataTableSchema
// Il2CppName: GetDataTableSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchemaComplexType* (*)(::System::Xml::Schema::XmlSchemaSet*)>(&System::Data::DataTable::GetDataTableSchema)> {
  static const MethodInfo* get() {
    static auto* schemaSet = &::il2cpp_utils::GetClassFromName("System.Xml.Schema", "XmlSchemaSet")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetDataTableSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemaSet});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::System_Xml_Serialization_IXmlSerializable_GetSchema
// Il2CppName: System.Xml.Serialization.IXmlSerializable.GetSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Data::DataTable::*)()>(&System::Data::DataTable::System_Xml_Serialization_IXmlSerializable_GetSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "System.Xml.Serialization.IXmlSerializable.GetSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::GetSchema
// Il2CppName: GetSchema
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Xml::Schema::XmlSchema* (System::Data::DataTable::*)()>(&System::Data::DataTable::GetSchema)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "GetSchema", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::System_Xml_Serialization_IXmlSerializable_ReadXml
// Il2CppName: System.Xml.Serialization.IXmlSerializable.ReadXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlReader*)>(&System::Data::DataTable::System_Xml_Serialization_IXmlSerializable_ReadXml)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "System.Xml.Serialization.IXmlSerializable.ReadXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::System_Xml_Serialization_IXmlSerializable_WriteXml
// Il2CppName: System.Xml.Serialization.IXmlSerializable.WriteXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlWriter*)>(&System::Data::DataTable::System_Xml_Serialization_IXmlSerializable_WriteXml)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "System.Xml.Serialization.IXmlSerializable.WriteXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::ReadXmlSerializable
// Il2CppName: ReadXmlSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Xml::XmlReader*)>(&System::Data::DataTable::ReadXmlSerializable)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("System.Xml", "XmlReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ReadXmlSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::AddDependentColumn
// Il2CppName: AddDependentColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::AddDependentColumn)> {
  static const MethodInfo* get() {
    static auto* expressionColumn = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "AddDependentColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expressionColumn});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::RemoveDependentColumn
// Il2CppName: RemoveDependentColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::RemoveDependentColumn)> {
  static const MethodInfo* get() {
    static auto* expressionColumn = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "RemoveDependentColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expressionColumn});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::EvaluateExpressions
// Il2CppName: EvaluateExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)()>(&System::Data::DataTable::EvaluateExpressions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "EvaluateExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::EvaluateExpressions
// Il2CppName: EvaluateExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataRow*, ::System::Data::DataRowAction, ::System::Collections::Generic::List_1<::System::Data::DataRow*>*)>(&System::Data::DataTable::EvaluateExpressions)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* action = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowAction")->byval_arg;
    static auto* cachedRows = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataRow")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "EvaluateExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, action, cachedRows});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::EvaluateExpressions
// Il2CppName: EvaluateExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::EvaluateExpressions)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "EvaluateExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::EvaluateDependentExpressions
// Il2CppName: EvaluateDependentExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Data::DataColumn*)>(&System::Data::DataTable::EvaluateDependentExpressions)> {
  static const MethodInfo* get() {
    static auto* column = &::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "EvaluateDependentExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{column});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::EvaluateDependentExpressions
// Il2CppName: EvaluateDependentExpressions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (System::Data::DataTable::*)(::System::Collections::Generic::List_1<::System::Data::DataColumn*>*, ::System::Data::DataRow*, ::System::Data::DataRowVersion, ::System::Collections::Generic::List_1<::System::Data::DataRow*>*)>(&System::Data::DataTable::EvaluateDependentExpressions)> {
  static const MethodInfo* get() {
    static auto* columns = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataColumn")})->byval_arg;
    static auto* row = &::il2cpp_utils::GetClassFromName("System.Data", "DataRow")->byval_arg;
    static auto* version = &::il2cpp_utils::GetClassFromName("System.Data", "DataRowVersion")->byval_arg;
    static auto* cachedRows = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System.Data", "DataRow")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "EvaluateDependentExpressions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{columns, row, version, cachedRows});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::get_Site
// Il2CppName: get_Site
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::ISite* (System::Data::DataTable::*)()>(&System::Data::DataTable::get_Site)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "get_Site", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::Data::DataTable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::Data::DataTable::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (System::Data::DataTable::*)()>(&System::Data::DataTable::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::Data::DataTable*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
