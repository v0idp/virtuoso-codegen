// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: PropertyDescriptor
  class PropertyDescriptor;
  // Forward declaring type: IExtenderProvider
  class IExtenderProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Forward declaring type: ExtenderProvidedPropertyAttribute
  class ExtenderProvidedPropertyAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::System::ComponentModel::ExtenderProvidedPropertyAttribute);
DEFINE_IL2CPP_ARG_TYPE(::System::ComponentModel::ExtenderProvidedPropertyAttribute*, "System.ComponentModel", "ExtenderProvidedPropertyAttribute");
// Type namespace: System.ComponentModel
namespace System::ComponentModel {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.ComponentModel.ExtenderProvidedPropertyAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 69CC38
  class ExtenderProvidedPropertyAttribute : public ::System::Attribute {
    public:
    public:
    // private System.ComponentModel.PropertyDescriptor extenderProperty
    // Size: 0x8
    // Offset: 0x10
    ::System::ComponentModel::PropertyDescriptor* extenderProperty;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::PropertyDescriptor*) == 0x8);
    // private System.ComponentModel.IExtenderProvider provider
    // Size: 0x8
    // Offset: 0x18
    ::System::ComponentModel::IExtenderProvider* provider;
    // Field size check
    static_assert(sizeof(::System::ComponentModel::IExtenderProvider*) == 0x8);
    // private System.Type receiverType
    // Size: 0x8
    // Offset: 0x20
    ::System::Type* receiverType;
    // Field size check
    static_assert(sizeof(::System::Type*) == 0x8);
    public:
    // Get instance field reference: private System.ComponentModel.PropertyDescriptor extenderProperty
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::PropertyDescriptor*& dyn_extenderProperty();
    // Get instance field reference: private System.ComponentModel.IExtenderProvider provider
    [[deprecated("Use field access instead!")]] ::System::ComponentModel::IExtenderProvider*& dyn_provider();
    // Get instance field reference: private System.Type receiverType
    [[deprecated("Use field access instead!")]] ::System::Type*& dyn_receiverType();
    // public System.ComponentModel.IExtenderProvider get_Provider()
    // Offset: 0xF005F8
    ::System::ComponentModel::IExtenderProvider* get_Provider();
    // public System.Type get_ReceiverType()
    // Offset: 0xF00600
    ::System::Type* get_ReceiverType();
    // public System.Void .ctor()
    // Offset: 0xF005F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ExtenderProvidedPropertyAttribute* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::System::ComponentModel::ExtenderProvidedPropertyAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ExtenderProvidedPropertyAttribute*, creationType>()));
    }
    // static System.ComponentModel.ExtenderProvidedPropertyAttribute Create(System.ComponentModel.PropertyDescriptor extenderProperty, System.Type receiverType, System.ComponentModel.IExtenderProvider provider)
    // Offset: 0xF00134
    static ::System::ComponentModel::ExtenderProvidedPropertyAttribute* Create(::System::ComponentModel::PropertyDescriptor* extenderProperty, ::System::Type* receiverType, ::System::ComponentModel::IExtenderProvider* provider);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xF00608
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xF006EC
    // Implemented from: System.Attribute
    // Base method: System.Int32 Attribute::GetHashCode()
    int GetHashCode();
    // public override System.Boolean IsDefaultAttribute()
    // Offset: 0xF006F4
    // Implemented from: System.Attribute
    // Base method: System.Boolean Attribute::IsDefaultAttribute()
    bool IsDefaultAttribute();
  }; // System.ComponentModel.ExtenderProvidedPropertyAttribute
  #pragma pack(pop)
  static check_size<sizeof(ExtenderProvidedPropertyAttribute), 32 + sizeof(::System::Type*)> __System_ComponentModel_ExtenderProvidedPropertyAttributeSizeCheck;
  static_assert(sizeof(ExtenderProvidedPropertyAttribute) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: System::ComponentModel::ExtenderProvidedPropertyAttribute::get_Provider
// Il2CppName: get_Provider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::IExtenderProvider* (System::ComponentModel::ExtenderProvidedPropertyAttribute::*)()>(&System::ComponentModel::ExtenderProvidedPropertyAttribute::get_Provider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ExtenderProvidedPropertyAttribute*), "get_Provider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ExtenderProvidedPropertyAttribute::get_ReceiverType
// Il2CppName: get_ReceiverType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (System::ComponentModel::ExtenderProvidedPropertyAttribute::*)()>(&System::ComponentModel::ExtenderProvidedPropertyAttribute::get_ReceiverType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ExtenderProvidedPropertyAttribute*), "get_ReceiverType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ExtenderProvidedPropertyAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: System::ComponentModel::ExtenderProvidedPropertyAttribute::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ComponentModel::ExtenderProvidedPropertyAttribute* (*)(::System::ComponentModel::PropertyDescriptor*, ::System::Type*, ::System::ComponentModel::IExtenderProvider*)>(&System::ComponentModel::ExtenderProvidedPropertyAttribute::Create)> {
  static const MethodInfo* get() {
    static auto* extenderProperty = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "PropertyDescriptor")->byval_arg;
    static auto* receiverType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* provider = &::il2cpp_utils::GetClassFromName("System.ComponentModel", "IExtenderProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ExtenderProvidedPropertyAttribute*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{extenderProperty, receiverType, provider});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ExtenderProvidedPropertyAttribute::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::ExtenderProvidedPropertyAttribute::*)(::Il2CppObject*)>(&System::ComponentModel::ExtenderProvidedPropertyAttribute::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ExtenderProvidedPropertyAttribute*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ExtenderProvidedPropertyAttribute::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (System::ComponentModel::ExtenderProvidedPropertyAttribute::*)()>(&System::ComponentModel::ExtenderProvidedPropertyAttribute::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ExtenderProvidedPropertyAttribute*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: System::ComponentModel::ExtenderProvidedPropertyAttribute::IsDefaultAttribute
// Il2CppName: IsDefaultAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (System::ComponentModel::ExtenderProvidedPropertyAttribute::*)()>(&System::ComponentModel::ExtenderProvidedPropertyAttribute::IsDefaultAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(System::ComponentModel::ExtenderProvidedPropertyAttribute*), "IsDefaultAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
