// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.StringList
#include "Firebase/StringList.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::StringList::StringListEnumerator);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::StringList::StringListEnumerator*, "Firebase", "StringList/StringListEnumerator");
// Type namespace: Firebase
namespace Firebase {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.StringList/Firebase.StringListEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  class StringList::StringListEnumerator : public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<::StringW>*/ {
    public:
    public:
    // private Firebase.StringList collectionRef
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::StringList* collectionRef;
    // Field size check
    static_assert(sizeof(::Firebase::StringList*) == 0x8);
    // private System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0x18
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentIndex and: currentObject
    char __padding1[0x4] = {};
    // private System.Object currentObject
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* currentObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int32 currentSize
    // Size: 0x4
    // Offset: 0x28
    int currentSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::StringW>
    operator ::System::Collections::Generic::IEnumerator_1<::StringW>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::StringW>*>(this);
    }
    // Get instance field reference: private Firebase.StringList collectionRef
    [[deprecated("Use field access instead!")]] ::Firebase::StringList*& dyn_collectionRef();
    // Get instance field reference: private System.Int32 currentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentIndex();
    // Get instance field reference: private System.Object currentObject
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_currentObject();
    // Get instance field reference: private System.Int32 currentSize
    [[deprecated("Use field access instead!")]] int& dyn_currentSize();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x188C500
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.String get_Current()
    // Offset: 0x188C3FC
    ::StringW get_Current();
    // public System.Void .ctor(Firebase.StringList collection)
    // Offset: 0x188A654
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StringList::StringListEnumerator* New_ctor(::Firebase::StringList* collection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::StringList::StringListEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StringList::StringListEnumerator*, creationType>(collection)));
    }
    // public System.Boolean MoveNext()
    // Offset: 0x188C504
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x188C574
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x188C600
    void Dispose();
  }; // Firebase.StringList/Firebase.StringListEnumerator
  #pragma pack(pop)
  static check_size<sizeof(StringList::StringListEnumerator), 40 + sizeof(int)> __Firebase_StringList_StringListEnumeratorSizeCheck;
  static_assert(sizeof(StringList::StringListEnumerator) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::StringList::StringListEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Firebase::StringList::StringListEnumerator::*)()>(&Firebase::StringList::StringListEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::StringList::StringListEnumerator*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::StringList::StringListEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::StringList::StringListEnumerator::*)()>(&Firebase::StringList::StringListEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::StringList::StringListEnumerator*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::StringList::StringListEnumerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::StringList::StringListEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::StringList::StringListEnumerator::*)()>(&Firebase::StringList::StringListEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::StringList::StringListEnumerator*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::StringList::StringListEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::StringList::StringListEnumerator::*)()>(&Firebase::StringList::StringListEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::StringList::StringListEnumerator*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::StringList::StringListEnumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::StringList::StringListEnumerator::*)()>(&Firebase::StringList::StringListEnumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::StringList::StringListEnumerator*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
