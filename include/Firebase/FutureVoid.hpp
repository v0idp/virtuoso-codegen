// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.FutureBase
#include "Firebase/FutureBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase
namespace Firebase {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: Firebase
namespace Firebase {
  // Forward declaring type: FutureVoid
  class FutureVoid;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::FutureVoid);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::FutureVoid*, "Firebase", "FutureVoid");
// Type namespace: Firebase
namespace Firebase {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.FutureVoid
  // [TokenAttribute] Offset: FFFFFFFF
  class FutureVoid : public ::Firebase::FutureBase {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x28
    char ___base_padding[0x7] = {};
    // Nested type: ::Firebase::FutureVoid::Action
    class Action;
    // Nested type: ::Firebase::FutureVoid::SWIG_CompletionDelegate
    class SWIG_CompletionDelegate;
    // Nested type: ::Firebase::FutureVoid::$GetTask$c__AnonStorey0
    class $GetTask$c__AnonStorey0;
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x28
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // private System.IntPtr callbackData
    // Size: 0x8
    // Offset: 0x38
    ::System::IntPtr callbackData;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private Firebase.FutureVoid/Firebase.SWIG_CompletionDelegate SWIG_CompletionCB
    // Size: 0x8
    // Offset: 0x40
    ::Firebase::FutureVoid::SWIG_CompletionDelegate* SWIG_CompletionCB;
    // Field size check
    static_assert(sizeof(::Firebase::FutureVoid::SWIG_CompletionDelegate*) == 0x8);
    public:
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,Firebase.FutureVoid/Firebase.Action> Callbacks
    static ::System::Collections::Generic::Dictionary_2<int, ::Firebase::FutureVoid::Action*>* _get_Callbacks();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,Firebase.FutureVoid/Firebase.Action> Callbacks
    static void _set_Callbacks(::System::Collections::Generic::Dictionary_2<int, ::Firebase::FutureVoid::Action*>* value);
    // Get static field: static private System.Int32 CallbackIndex
    static int _get_CallbackIndex();
    // Set static field: static private System.Int32 CallbackIndex
    static void _set_CallbackIndex(int value);
    // Get static field: static private System.Object CallbackLock
    static ::Il2CppObject* _get_CallbackLock();
    // Set static field: static private System.Object CallbackLock
    static void _set_CallbackLock(::Il2CppObject* value);
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: private System.IntPtr callbackData
    [[deprecated]] ::System::IntPtr& dyn_callbackData();
    // Get instance field reference: private Firebase.FutureVoid/Firebase.SWIG_CompletionDelegate SWIG_CompletionCB
    [[deprecated]] ::Firebase::FutureVoid::SWIG_CompletionDelegate*& dyn_SWIG_CompletionCB();
    // static private System.Void .cctor()
    // Offset: 0x1889848
    static void _cctor();
    // static public System.Threading.Tasks.Task GetTask(Firebase.FutureVoid fu)
    // Offset: 0x1889024
    static ::System::Threading::Tasks::Task* GetTask(::Firebase::FutureVoid* fu);
    // private System.Void ThrowIfDisposed()
    // Offset: 0x188943C
    void ThrowIfDisposed();
    // public System.Void SetOnCompletionCallback(Firebase.FutureVoid/Firebase.Action userCompletionCallback)
    // Offset: 0x1889200
    void SetOnCompletionCallback(::Firebase::FutureVoid::Action* userCompletionCallback);
    // private System.Void SetCompletionData(System.IntPtr data)
    // Offset: 0x1888FF0
    void SetCompletionData(::System::IntPtr data);
    // static private System.Void SWIG_CompletionDispatcher(System.Int32 key)
    // Offset: 0x1888B78
    static void SWIG_CompletionDispatcher(int key);
    // System.IntPtr SWIG_OnCompletion(Firebase.FutureVoid/Firebase.SWIG_CompletionDelegate cs_callback, System.Int32 cs_key)
    // Offset: 0x18894E4
    ::System::IntPtr SWIG_OnCompletion(::Firebase::FutureVoid::SWIG_CompletionDelegate* cs_callback, int cs_key);
    // public System.Void SWIG_FreeCompletionData(System.IntPtr data)
    // Offset: 0x1889598
    void SWIG_FreeCompletionData(::System::IntPtr data);
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x1888D1C
    // Implemented from: Firebase.FutureBase
    // Base method: System.Void FutureBase::.ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FutureVoid* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::FutureVoid::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FutureVoid*, creationType>(cPtr, cMemoryOwn)));
    }
    // protected override System.Void Finalize()
    // Offset: 0x1888DD8
    // Implemented from: Firebase.FutureBase
    // Base method: System.Void FutureBase::Finalize()
    void Finalize();
    // public override System.Void Dispose()
    // Offset: 0x1888E40
    // Implemented from: Firebase.FutureBase
    // Base method: System.Void FutureBase::Dispose()
    void Dispose();
  }; // Firebase.FutureVoid
  #pragma pack(pop)
  static check_size<sizeof(FutureVoid), 64 + sizeof(::Firebase::FutureVoid::SWIG_CompletionDelegate*)> __Firebase_FutureVoidSizeCheck;
  static_assert(sizeof(FutureVoid) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::FutureVoid::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::FutureVoid::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::GetTask
// Il2CppName: GetTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::Firebase::FutureVoid*)>(&Firebase::FutureVoid::GetTask)> {
  static const MethodInfo* get() {
    static auto* fu = &::il2cpp_utils::GetClassFromName("Firebase", "FutureVoid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "GetTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fu});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::ThrowIfDisposed
// Il2CppName: ThrowIfDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::FutureVoid::*)()>(&Firebase::FutureVoid::ThrowIfDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "ThrowIfDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::SetOnCompletionCallback
// Il2CppName: SetOnCompletionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::FutureVoid::*)(::Firebase::FutureVoid::Action*)>(&Firebase::FutureVoid::SetOnCompletionCallback)> {
  static const MethodInfo* get() {
    static auto* userCompletionCallback = &::il2cpp_utils::GetClassFromName("Firebase", "FutureVoid/Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "SetOnCompletionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userCompletionCallback});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::SetCompletionData
// Il2CppName: SetCompletionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::FutureVoid::*)(::System::IntPtr)>(&Firebase::FutureVoid::SetCompletionData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "SetCompletionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::SWIG_CompletionDispatcher
// Il2CppName: SWIG_CompletionDispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Firebase::FutureVoid::SWIG_CompletionDispatcher)> {
  static const MethodInfo* get() {
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "SWIG_CompletionDispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{key});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::SWIG_OnCompletion
// Il2CppName: SWIG_OnCompletion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Firebase::FutureVoid::*)(::Firebase::FutureVoid::SWIG_CompletionDelegate*, int)>(&Firebase::FutureVoid::SWIG_OnCompletion)> {
  static const MethodInfo* get() {
    static auto* cs_callback = &::il2cpp_utils::GetClassFromName("Firebase", "FutureVoid/SWIG_CompletionDelegate")->byval_arg;
    static auto* cs_key = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "SWIG_OnCompletion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cs_callback, cs_key});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::SWIG_FreeCompletionData
// Il2CppName: SWIG_FreeCompletionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::FutureVoid::*)(::System::IntPtr)>(&Firebase::FutureVoid::SWIG_FreeCompletionData)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "SWIG_FreeCompletionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::FutureVoid::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::FutureVoid::*)()>(&Firebase::FutureVoid::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::FutureVoid::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::FutureVoid::*)()>(&Firebase::FutureVoid::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::FutureVoid*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
