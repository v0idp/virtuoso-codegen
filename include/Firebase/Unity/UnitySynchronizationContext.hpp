// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Threading.SynchronizationContext
#include "System/Threading/SynchronizationContext.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Unity
namespace Firebase::Unity {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SendOrPostCallback
  class SendOrPostCallback;
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Firebase.Unity
namespace Firebase::Unity {
  // Forward declaring type: UnitySynchronizationContext
  class UnitySynchronizationContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Unity::UnitySynchronizationContext);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Unity::UnitySynchronizationContext*, "Firebase.Unity", "UnitySynchronizationContext");
// Type namespace: Firebase.Unity
namespace Firebase::Unity {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Unity.UnitySynchronizationContext
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class UnitySynchronizationContext : public ::System::Threading::SynchronizationContext {
    public:
    // Writing base type padding for base size: 0x14 to desired offset: 0x18
    char ___base_padding[0x4] = {};
    // Nested type: ::Firebase::Unity::UnitySynchronizationContext::SynchronizationContextBehavoir
    class SynchronizationContextBehavoir;
    // Nested type: ::Firebase::Unity::UnitySynchronizationContext::$SignaledCoroutine$c__Iterator0
    class $SignaledCoroutine$c__Iterator0;
    // Nested type: ::Firebase::Unity::UnitySynchronizationContext::$SendCoroutine$c__AnonStorey1
    class $SendCoroutine$c__AnonStorey1;
    // Nested type: ::Firebase::Unity::UnitySynchronizationContext::$SendCoroutine$c__AnonStorey2
    class $SendCoroutine$c__AnonStorey2;
    // Nested type: ::Firebase::Unity::UnitySynchronizationContext::$Send$c__AnonStorey3
    class $Send$c__AnonStorey3;
    // Nested type: ::Firebase::Unity::UnitySynchronizationContext::$Send$c__AnonStorey4
    class $Send$c__AnonStorey4;
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private System.Collections.Generic.Queue`1<System.Tuple`2<System.Threading.SendOrPostCallback,System.Object>> queue
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Queue_1<::System::Tuple_2<::System::Threading::SendOrPostCallback*, ::Il2CppObject*>*>* queue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::System::Tuple_2<::System::Threading::SendOrPostCallback*, ::Il2CppObject*>*>*) == 0x8);
    // private Firebase.Unity.UnitySynchronizationContext/Firebase.Unity.SynchronizationContextBehavoir behavior
    // Size: 0x8
    // Offset: 0x20
    ::Firebase::Unity::UnitySynchronizationContext::SynchronizationContextBehavoir* behavior;
    // Field size check
    static_assert(sizeof(::Firebase::Unity::UnitySynchronizationContext::SynchronizationContextBehavoir*) == 0x8);
    // private System.Int32 mainThreadId
    // Size: 0x4
    // Offset: 0x28
    int mainThreadId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::Threading::SynchronizationContextProperties
    constexpr operator ::System::Threading::SynchronizationContextProperties() const noexcept = delete;
    // Get static field: static private Firebase.Unity.UnitySynchronizationContext _instance
    static ::Firebase::Unity::UnitySynchronizationContext* _get__instance();
    // Set static field: static private Firebase.Unity.UnitySynchronizationContext _instance
    static void _set__instance(::Firebase::Unity::UnitySynchronizationContext* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.ManualResetEvent> signalDictionary
    static ::System::Collections::Generic::Dictionary_2<int, ::System::Threading::ManualResetEvent*>* _get_signalDictionary();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.ManualResetEvent> signalDictionary
    static void _set_signalDictionary(::System::Collections::Generic::Dictionary_2<int, ::System::Threading::ManualResetEvent*>* value);
    // Get instance field reference: private System.Collections.Generic.Queue`1<System.Tuple`2<System.Threading.SendOrPostCallback,System.Object>> queue
    ::System::Collections::Generic::Queue_1<::System::Tuple_2<::System::Threading::SendOrPostCallback*, ::Il2CppObject*>*>*& dyn_queue();
    // Get instance field reference: private Firebase.Unity.UnitySynchronizationContext/Firebase.Unity.SynchronizationContextBehavoir behavior
    ::Firebase::Unity::UnitySynchronizationContext::SynchronizationContextBehavoir*& dyn_behavior();
    // Get instance field reference: private System.Int32 mainThreadId
    int& dyn_mainThreadId();
    // private System.Void .ctor(UnityEngine.GameObject gameObject)
    // Offset: 0x12CBA6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnitySynchronizationContext* New_ctor(::UnityEngine::GameObject* gameObject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Unity::UnitySynchronizationContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnitySynchronizationContext*, creationType>(gameObject)));
    }
    // static private System.Void .cctor()
    // Offset: 0x12CC004
    static void _cctor();
    // static public System.Void Create(UnityEngine.GameObject gameObject)
    // Offset: 0x12CA200
    static void Create(::UnityEngine::GameObject* gameObject);
    // static public System.Void Destroy()
    // Offset: 0x12CA998
    static void Destroy();
    // private System.Threading.ManualResetEvent GetThreadEvent()
    // Offset: 0x12CBB80
    ::System::Threading::ManualResetEvent* GetThreadEvent();
    // public override System.Void Post(System.Threading.SendOrPostCallback d, System.Object state)
    // Offset: 0x12CBD7C
    // Implemented from: System.Threading.SynchronizationContext
    // Base method: System.Void SynchronizationContext::Post(System.Threading.SendOrPostCallback d, System.Object state)
    void Post(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state);
    // public override System.Void Send(System.Threading.SendOrPostCallback d, System.Object state)
    // Offset: 0x12CBE98
    // Implemented from: System.Threading.SynchronizationContext
    // Base method: System.Void SynchronizationContext::Send(System.Threading.SendOrPostCallback d, System.Object state)
    void Send(::System::Threading::SendOrPostCallback* d, ::Il2CppObject* state);
  }; // Firebase.Unity.UnitySynchronizationContext
  #pragma pack(pop)
  static check_size<sizeof(UnitySynchronizationContext), 40 + sizeof(int)> __Firebase_Unity_UnitySynchronizationContextSizeCheck;
  static_assert(sizeof(UnitySynchronizationContext) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Unity::UnitySynchronizationContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Unity::UnitySynchronizationContext::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Unity::UnitySynchronizationContext::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Unity::UnitySynchronizationContext*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Unity::UnitySynchronizationContext::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::GameObject*)>(&Firebase::Unity::UnitySynchronizationContext::Create)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Unity::UnitySynchronizationContext*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
// Writing MetadataGetter for method: Firebase::Unity::UnitySynchronizationContext::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Unity::UnitySynchronizationContext::Destroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Unity::UnitySynchronizationContext*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Unity::UnitySynchronizationContext::GetThreadEvent
// Il2CppName: GetThreadEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::ManualResetEvent* (Firebase::Unity::UnitySynchronizationContext::*)()>(&Firebase::Unity::UnitySynchronizationContext::GetThreadEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Unity::UnitySynchronizationContext*), "GetThreadEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Unity::UnitySynchronizationContext::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Unity::UnitySynchronizationContext::*)(::System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&Firebase::Unity::UnitySynchronizationContext::Post)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System.Threading", "SendOrPostCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Unity::UnitySynchronizationContext*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d, state});
  }
};
// Writing MetadataGetter for method: Firebase::Unity::UnitySynchronizationContext::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Unity::UnitySynchronizationContext::*)(::System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&Firebase::Unity::UnitySynchronizationContext::Send)> {
  static const MethodInfo* get() {
    static auto* d = &::il2cpp_utils::GetClassFromName("System.Threading", "SendOrPostCallback")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Unity::UnitySynchronizationContext*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{d, state});
  }
};
