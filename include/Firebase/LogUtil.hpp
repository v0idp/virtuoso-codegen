// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase
namespace Firebase {
  // Forward declaring type: LogLevel
  struct LogLevel;
}
// Forward declaring namespace: Firebase::Platform
namespace Firebase::Platform {
  // Forward declaring type: PlatformLogLevel
  struct PlatformLogLevel;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Completed forward declares
// Type namespace: Firebase
namespace Firebase {
  // Forward declaring type: LogUtil
  class LogUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::LogUtil);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::LogUtil*, "Firebase", "LogUtil");
// Type namespace: Firebase
namespace Firebase {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.LogUtil
  // [TokenAttribute] Offset: FFFFFFFF
  class LogUtil : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Firebase::LogUtil::LogMessageDelegate
    class LogMessageDelegate;
    public:
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x10
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return disposed;
    }
    // Get static field: static private Firebase.LogUtil _instance
    static ::Firebase::LogUtil* _get__instance();
    // Set static field: static private Firebase.LogUtil _instance
    static void _set__instance(::Firebase::LogUtil* value);
    // Get static field: static private System.Object InitializeLoggingLock
    static ::Il2CppObject* _get_InitializeLoggingLock();
    // Set static field: static private System.Object InitializeLoggingLock
    static void _set_InitializeLoggingLock(::Il2CppObject* value);
    // Get static field: static private Firebase.LogUtil/Firebase.LogMessageDelegate <>f__mg$cache0
    static ::Firebase::LogUtil::LogMessageDelegate* _get_$$f__mg$cache0();
    // Set static field: static private Firebase.LogUtil/Firebase.LogMessageDelegate <>f__mg$cache0
    static void _set_$$f__mg$cache0(::Firebase::LogUtil::LogMessageDelegate* value);
    // Get instance field reference: private System.Boolean _disposed
    [[deprecated]] bool& dyn__disposed();
    // static private System.Void .cctor()
    // Offset: 0x1889A00
    static void _cctor();
    // static public System.Void InitializeLogging()
    // Offset: 0x1885050
    static void InitializeLogging();
    // static Firebase.Platform.PlatformLogLevel ConvertLogLevel(Firebase.LogLevel logLevel)
    // Offset: 0x1888644
    static ::Firebase::Platform::PlatformLogLevel ConvertLogLevel(::Firebase::LogLevel logLevel);
    // static System.Void LogMessage(Firebase.LogLevel logLevel, System.String message)
    // Offset: 0x1887920
    static void LogMessage(::Firebase::LogLevel logLevel, ::StringW message);
    // static System.Void LogMessageFromCallback(Firebase.LogLevel logLevel, System.String message)
    // Offset: 0x1889948
    static void LogMessageFromCallback(::Firebase::LogLevel logLevel, ::StringW message);
    // public System.Void Dispose()
    // Offset: 0x1889CD0
    void Dispose();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1889C98
    void Dispose(bool disposing);
    // private System.Void <LogUtil>m__0(System.Object sender, System.EventArgs e)
    // Offset: 0x1889D4C
    void $LogUtil$m__0(::Il2CppObject* sender, ::System::EventArgs* e);
    // public System.Void .ctor()
    // Offset: 0x1889A98
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LogUtil* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::LogUtil::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LogUtil*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x1889C1C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Firebase.LogUtil
  #pragma pack(pop)
  static check_size<sizeof(LogUtil), 16 + sizeof(bool)> __Firebase_LogUtilSizeCheck;
  static_assert(sizeof(LogUtil) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::LogUtil::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::LogUtil::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::LogUtil::InitializeLogging
// Il2CppName: InitializeLogging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::LogUtil::InitializeLogging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), "InitializeLogging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::LogUtil::ConvertLogLevel
// Il2CppName: ConvertLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Platform::PlatformLogLevel (*)(::Firebase::LogLevel)>(&Firebase::LogUtil::ConvertLogLevel)> {
  static const MethodInfo* get() {
    static auto* logLevel = &::il2cpp_utils::GetClassFromName("Firebase", "LogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), "ConvertLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logLevel});
  }
};
// Writing MetadataGetter for method: Firebase::LogUtil::LogMessage
// Il2CppName: LogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::LogLevel, ::StringW)>(&Firebase::LogUtil::LogMessage)> {
  static const MethodInfo* get() {
    static auto* logLevel = &::il2cpp_utils::GetClassFromName("Firebase", "LogLevel")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), "LogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logLevel, message});
  }
};
// Writing MetadataGetter for method: Firebase::LogUtil::LogMessageFromCallback
// Il2CppName: LogMessageFromCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::LogLevel, ::StringW)>(&Firebase::LogUtil::LogMessageFromCallback)> {
  static const MethodInfo* get() {
    static auto* logLevel = &::il2cpp_utils::GetClassFromName("Firebase", "LogLevel")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), "LogMessageFromCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logLevel, message});
  }
};
// Writing MetadataGetter for method: Firebase::LogUtil::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::LogUtil::*)()>(&Firebase::LogUtil::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::LogUtil::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::LogUtil::*)(bool)>(&Firebase::LogUtil::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: Firebase::LogUtil::$LogUtil$m__0
// Il2CppName: <LogUtil>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::LogUtil::*)(::Il2CppObject*, ::System::EventArgs*)>(&Firebase::LogUtil::$LogUtil$m__0)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* e = &::il2cpp_utils::GetClassFromName("System", "EventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), "<LogUtil>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, e});
  }
};
// Writing MetadataGetter for method: Firebase::LogUtil::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::LogUtil::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::LogUtil::*)()>(&Firebase::LogUtil::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::LogUtil*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
