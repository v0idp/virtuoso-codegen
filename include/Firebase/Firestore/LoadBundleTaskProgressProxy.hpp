// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: LoadBundleTaskProgressProxy
  class LoadBundleTaskProgressProxy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::LoadBundleTaskProgressProxy);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::LoadBundleTaskProgressProxy*, "Firebase.Firestore", "LoadBundleTaskProgressProxy");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.LoadBundleTaskProgressProxy
  // [TokenAttribute] Offset: FFFFFFFF
  class LoadBundleTaskProgressProxy : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Firebase::Firestore::LoadBundleTaskProgressProxy::State
    struct State;
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0xD5A94C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoadBundleTaskProgressProxy* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::LoadBundleTaskProgressProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoadBundleTaskProgressProxy*, creationType>(cPtr, cMemoryOwn)));
    }
    // public System.Void Dispose()
    // Offset: 0xD62A58
    void Dispose();
    // public System.Int32 documents_loaded()
    // Offset: 0xD624F8
    int documents_loaded();
    // public System.Int32 total_documents()
    // Offset: 0xD62594
    int total_documents();
    // public System.Int64 bytes_loaded()
    // Offset: 0xD62630
    int64_t bytes_loaded();
    // public System.Int64 total_bytes()
    // Offset: 0xD626CC
    int64_t total_bytes();
    // public Firebase.Firestore.LoadBundleTaskProgressProxy/Firebase.Firestore.State state()
    // Offset: 0xD62768
    ::Firebase::Firestore::LoadBundleTaskProgressProxy::State state();
    // protected override System.Void Finalize()
    // Offset: 0xD629E8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Firebase.Firestore.LoadBundleTaskProgressProxy
  #pragma pack(pop)
  static check_size<sizeof(LoadBundleTaskProgressProxy), 32 + sizeof(bool)> __Firebase_Firestore_LoadBundleTaskProgressProxySizeCheck;
  static_assert(sizeof(LoadBundleTaskProgressProxy) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::LoadBundleTaskProgressProxy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::LoadBundleTaskProgressProxy::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::LoadBundleTaskProgressProxy::*)()>(&Firebase::Firestore::LoadBundleTaskProgressProxy::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::LoadBundleTaskProgressProxy*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::LoadBundleTaskProgressProxy::documents_loaded
// Il2CppName: documents_loaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::LoadBundleTaskProgressProxy::*)()>(&Firebase::Firestore::LoadBundleTaskProgressProxy::documents_loaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::LoadBundleTaskProgressProxy*), "documents_loaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::LoadBundleTaskProgressProxy::total_documents
// Il2CppName: total_documents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::LoadBundleTaskProgressProxy::*)()>(&Firebase::Firestore::LoadBundleTaskProgressProxy::total_documents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::LoadBundleTaskProgressProxy*), "total_documents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::LoadBundleTaskProgressProxy::bytes_loaded
// Il2CppName: bytes_loaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Firebase::Firestore::LoadBundleTaskProgressProxy::*)()>(&Firebase::Firestore::LoadBundleTaskProgressProxy::bytes_loaded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::LoadBundleTaskProgressProxy*), "bytes_loaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::LoadBundleTaskProgressProxy::total_bytes
// Il2CppName: total_bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Firebase::Firestore::LoadBundleTaskProgressProxy::*)()>(&Firebase::Firestore::LoadBundleTaskProgressProxy::total_bytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::LoadBundleTaskProgressProxy*), "total_bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::LoadBundleTaskProgressProxy::state
// Il2CppName: state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::LoadBundleTaskProgressProxy::State (Firebase::Firestore::LoadBundleTaskProgressProxy::*)()>(&Firebase::Firestore::LoadBundleTaskProgressProxy::state)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::LoadBundleTaskProgressProxy*), "state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::LoadBundleTaskProgressProxy::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::LoadBundleTaskProgressProxy::*)()>(&Firebase::Firestore::LoadBundleTaskProgressProxy::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::LoadBundleTaskProgressProxy*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
