// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: GeoPointProxy
  class GeoPointProxy;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: GeoPoint
  struct GeoPoint;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::GeoPoint, "Firebase.Firestore", "GeoPoint");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: Firebase.Firestore.GeoPoint
  // [TokenAttribute] Offset: FFFFFFFF
  struct GeoPoint/*, public ::System::ValueType, public ::System::IEquatable_1<::Firebase::Firestore::GeoPoint>*/ {
    public:
    public:
    // private readonly System.Double _latitude
    // Size: 0x8
    // Offset: 0x0
    double latitude;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private readonly System.Double _longitude
    // Size: 0x8
    // Offset: 0x8
    double longitude;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    public:
    // Creating value type constructor for type: GeoPoint
    constexpr GeoPoint(double latitude_ = {}, double longitude_ = {}) noexcept : latitude{latitude_}, longitude{longitude_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Firebase::Firestore::GeoPoint>
    operator ::System::IEquatable_1<::Firebase::Firestore::GeoPoint>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Firebase::Firestore::GeoPoint>*>(this);
    }
    // Get instance field reference: private readonly System.Double _latitude
    [[deprecated("Use field access instead!")]] double& dyn__latitude();
    // Get instance field reference: private readonly System.Double _longitude
    [[deprecated("Use field access instead!")]] double& dyn__longitude();
    // public System.Double get_Latitude()
    // Offset: 0xD619F8
    double get_Latitude();
    // public System.Double get_Longitude()
    // Offset: 0xD61A00
    double get_Longitude();
    // public System.Void .ctor(System.Double latitude, System.Double longitude)
    // Offset: 0xD618A8
    // ABORTED: conflicts with another method.  GeoPoint(double latitude, double longitude);
    // public System.Boolean Equals(Firebase.Firestore.GeoPoint other)
    // Offset: 0xD61A9C
    bool Equals(::Firebase::Firestore::GeoPoint other);
    // Firebase.Firestore.GeoPointProxy ConvertToProxy()
    // Offset: 0xD61C28
    ::Firebase::Firestore::GeoPointProxy* ConvertToProxy();
    // static Firebase.Firestore.GeoPoint ConvertFromProxy(Firebase.Firestore.GeoPointProxy obj)
    // Offset: 0xD4CE64
    static ::Firebase::Firestore::GeoPoint ConvertFromProxy(::Firebase::Firestore::GeoPointProxy* obj);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xD61A08
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xD61AC8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xD61B7C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Firebase.Firestore.GeoPoint
  #pragma pack(pop)
  static check_size<sizeof(GeoPoint), 8 + sizeof(double)> __Firebase_Firestore_GeoPointSizeCheck;
  static_assert(sizeof(GeoPoint) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::get_Latitude
// Il2CppName: get_Latitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Firebase::Firestore::GeoPoint::*)()>(&Firebase::Firestore::GeoPoint::get_Latitude)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::GeoPoint), "get_Latitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::get_Longitude
// Il2CppName: get_Longitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Firebase::Firestore::GeoPoint::*)()>(&Firebase::Firestore::GeoPoint::get_Longitude)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::GeoPoint), "get_Longitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::GeoPoint
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::GeoPoint::*)(::Firebase::Firestore::GeoPoint)>(&Firebase::Firestore::GeoPoint::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "GeoPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::GeoPoint), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::ConvertToProxy
// Il2CppName: ConvertToProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::GeoPointProxy* (Firebase::Firestore::GeoPoint::*)()>(&Firebase::Firestore::GeoPoint::ConvertToProxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::GeoPoint), "ConvertToProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::ConvertFromProxy
// Il2CppName: ConvertFromProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::GeoPoint (*)(::Firebase::Firestore::GeoPointProxy*)>(&Firebase::Firestore::GeoPoint::ConvertFromProxy)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "GeoPointProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::GeoPoint), "ConvertFromProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::GeoPoint::*)(::Il2CppObject*)>(&Firebase::Firestore::GeoPoint::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::GeoPoint), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::GeoPoint::*)()>(&Firebase::Firestore::GeoPoint::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::GeoPoint), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::GeoPoint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::GeoPoint::*)()>(&Firebase::Firestore::GeoPoint::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::GeoPoint), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
