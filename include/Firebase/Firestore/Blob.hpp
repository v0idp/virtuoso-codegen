// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: Blob
  struct Blob;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Blob, "Firebase.Firestore", "Blob");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Firebase.Firestore.Blob
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 6D8304
  struct Blob/*, public ::System::ValueType, public ::System::IEquatable_1<::Firebase::Firestore::Blob>*/ {
    public:
    public:
    // private readonly System.Byte[] _bytes
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint8_t> bytes;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private System.Int32 _hash
    // Size: 0x4
    // Offset: 0x8
    int hash;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Blob
    constexpr Blob(::ArrayW<uint8_t> bytes_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), int hash_ = {}) noexcept : bytes{bytes_}, hash{hash_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Firebase::Firestore::Blob>
    operator ::System::IEquatable_1<::Firebase::Firestore::Blob>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Firebase::Firestore::Blob>*>(this);
    }
    // Get instance field reference: private readonly System.Byte[] _bytes
    [[deprecated]] ::ArrayW<uint8_t>& dyn__bytes();
    // Get instance field reference: private System.Int32 _hash
    [[deprecated]] int& dyn__hash();
    // public System.Int32 get_Length()
    // Offset: 0xD4A868
    int get_Length();
    // private System.Void .ctor(System.Byte[] bytes)
    // Offset: 0xD4A7D8
    Blob(::ArrayW<uint8_t> bytes);
    // public System.Byte[] ToBytes()
    // Offset: 0xD4A884
    ::ArrayW<uint8_t> ToBytes();
    // static public Firebase.Firestore.Blob CopyFrom(System.Byte[] bytes)
    // Offset: 0xD4A900
    static ::Firebase::Firestore::Blob CopyFrom(::ArrayW<uint8_t> bytes);
    // public System.Boolean Equals(Firebase.Firestore.Blob other)
    // Offset: 0xD4A9B4
    bool Equals(::Firebase::Firestore::Blob other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xD4A92C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xD4AA48
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xD4AAAC
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Firebase.Firestore.Blob
  #pragma pack(pop)
  static check_size<sizeof(Blob), 8 + sizeof(int)> __Firebase_Firestore_BlobSizeCheck;
  static_assert(sizeof(Blob) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Blob::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::Blob::*)()>(&Firebase::Firestore::Blob::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Blob), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Blob::Blob
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::Blob::ToBytes
// Il2CppName: ToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Firebase::Firestore::Blob::*)()>(&Firebase::Firestore::Blob::ToBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Blob), "ToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Blob::CopyFrom
// Il2CppName: CopyFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::Blob (*)(::ArrayW<uint8_t>)>(&Firebase::Firestore::Blob::CopyFrom)> {
  static const MethodInfo* get() {
    static auto* bytes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Blob), "CopyFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Blob::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::Blob::*)(::Firebase::Firestore::Blob)>(&Firebase::Firestore::Blob::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "Blob")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Blob), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Blob::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::Blob::*)(::Il2CppObject*)>(&Firebase::Firestore::Blob::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Blob), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Blob::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::Blob::*)()>(&Firebase::Firestore::Blob::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Blob), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Blob::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::Blob::*)()>(&Firebase::Firestore::Blob::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Blob), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
