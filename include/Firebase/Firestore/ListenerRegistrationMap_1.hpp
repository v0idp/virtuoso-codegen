// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: ListenerRegistrationMap`1<T>
  template<typename T>
  class ListenerRegistrationMap_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Firebase::Firestore::ListenerRegistrationMap_1, "Firebase.Firestore", "ListenerRegistrationMap`1");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // WARNING Size may be invalid!
  // Autogenerated type: Firebase.Firestore.ListenerRegistrationMap`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ListenerRegistrationMap_1 : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Tuple`2<System.Object,T>> callbacks
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<int, ::System::Tuple_2<::Il2CppObject*, T>*>* callbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Tuple_2<::Il2CppObject*, T>*>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<int, ::System::Tuple_2<::Il2CppObject*, T>*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<int, ::System::Tuple_2<::Il2CppObject*, T>*>*() const noexcept {
      return callbacks;
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Dictionary`2<System.Int32,System.Tuple`2<System.Object,T>> callbacks
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<int, ::System::Tuple_2<::Il2CppObject*, T>*>*& dyn_callbacks() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::ListenerRegistrationMap_1::dyn_callbacks");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callbacks"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Dictionary_2<int, ::System::Tuple_2<::Il2CppObject*, T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // private System.Void AssertGenericArgumentIsDelegate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AssertGenericArgumentIsDelegate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::ListenerRegistrationMap_1::AssertGenericArgumentIsDelegate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssertGenericArgumentIsDelegate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean TryGetCallback(System.Int32 uid, out T callback)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool TryGetCallback(int uid, ByRef<T> callback) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::ListenerRegistrationMap_1::TryGetCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uid), ::il2cpp_utils::ExtractIndependentType<T&>()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, uid, byref(callback));
    }
    // public System.Void Unregister(System.Int32 uid)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unregister(int uid) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::ListenerRegistrationMap_1::Unregister");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Firebase::Firestore::ListenerRegistrationMap_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, uid);
    }
    // public System.Void ClearCallbacksForOwner(System.Object owner)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClearCallbacksForOwner(::Il2CppObject* owner) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::ListenerRegistrationMap_1::ClearCallbacksForOwner");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearCallbacksForOwner", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(owner)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, owner);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ListenerRegistrationMap_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::ListenerRegistrationMap_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ListenerRegistrationMap_1<T>*, creationType>()));
    }
  }; // Firebase.Firestore.ListenerRegistrationMap`1
  // Could not write size check! Type: Firebase.Firestore.ListenerRegistrationMap`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
