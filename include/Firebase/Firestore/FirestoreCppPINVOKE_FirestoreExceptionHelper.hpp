// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Firestore.FirestoreCppPINVOKE
#include "Firebase/Firestore/FirestoreCppPINVOKE.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper*, "Firebase.Firestore", "FirestoreCppPINVOKE/FirestoreExceptionHelper");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.FirestoreCppPINVOKE/Firebase.Firestore.FirestoreExceptionHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class FirestoreCppPINVOKE::FirestoreExceptionHelper : public ::Il2CppObject {
    public:
    // Nested type: ::Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::FirestoreExceptionDelegate
    class FirestoreExceptionDelegate;
    // Get static field: static private Firebase.Firestore.FirestoreCppPINVOKE/Firebase.Firestore.FirestoreExceptionHelper/Firebase.Firestore.FirestoreExceptionDelegate firestoreDelegate
    static ::Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::FirestoreExceptionDelegate* _get_firestoreDelegate();
    // Set static field: static private Firebase.Firestore.FirestoreCppPINVOKE/Firebase.Firestore.FirestoreExceptionHelper/Firebase.Firestore.FirestoreExceptionDelegate firestoreDelegate
    static void _set_firestoreDelegate(::Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::FirestoreExceptionDelegate* value);
    // static private System.Void .cctor()
    // Offset: 0xD67418
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0xD5CC8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FirestoreCppPINVOKE::FirestoreExceptionHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FirestoreCppPINVOKE::FirestoreExceptionHelper*, creationType>()));
    }
    // static public System.Void FirestoreExceptionRegisterCallback(Firebase.Firestore.FirestoreCppPINVOKE/Firebase.Firestore.FirestoreExceptionHelper/Firebase.Firestore.FirestoreExceptionDelegate firestoreCallback)
    // Offset: 0xD674C0
    static void FirestoreExceptionRegisterCallback(::Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::FirestoreExceptionDelegate* firestoreCallback);
    // static private System.Void SetPendingFirestoreException(System.String message)
    // Offset: 0xD673B8
    static void SetPendingFirestoreException(::StringW message);
  }; // Firebase.Firestore.FirestoreCppPINVOKE/Firebase.Firestore.FirestoreExceptionHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::FirestoreExceptionRegisterCallback
// Il2CppName: FirestoreExceptionRegisterCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::FirestoreExceptionDelegate*)>(&Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::FirestoreExceptionRegisterCallback)> {
  static const MethodInfo* get() {
    static auto* firestoreCallback = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "FirestoreCppPINVOKE/FirestoreExceptionHelper/FirestoreExceptionDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper*), "FirestoreExceptionRegisterCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firestoreCallback});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::SetPendingFirestoreException
// Il2CppName: SetPendingFirestoreException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper::SetPendingFirestoreException)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirestoreCppPINVOKE::FirestoreExceptionHelper*), "SetPendingFirestoreException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
