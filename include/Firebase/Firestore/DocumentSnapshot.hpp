// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Firestore.ServerTimestampBehavior
#include "Firebase/Firestore/ServerTimestampBehavior.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: DocumentSnapshotProxy
  class DocumentSnapshotProxy;
  // Forward declaring type: FirebaseFirestore
  class FirebaseFirestore;
  // Forward declaring type: DocumentReference
  class DocumentReference;
  // Forward declaring type: FieldPath
  class FieldPath;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: DocumentSnapshot
  class DocumentSnapshot;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::DocumentSnapshot);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::DocumentSnapshot*, "Firebase.Firestore", "DocumentSnapshot");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.DocumentSnapshot
  // [TokenAttribute] Offset: FFFFFFFF
  class DocumentSnapshot : public ::Il2CppObject {
    public:
    public:
    // private readonly Firebase.Firestore.DocumentSnapshotProxy _proxy
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Firestore::DocumentSnapshotProxy* proxy;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::DocumentSnapshotProxy*) == 0x8);
    // private readonly Firebase.Firestore.FirebaseFirestore _firestore
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::Firestore::FirebaseFirestore* firestore;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::FirebaseFirestore*) == 0x8);
    public:
    // Get instance field reference: private readonly Firebase.Firestore.DocumentSnapshotProxy _proxy
    [[deprecated]] ::Firebase::Firestore::DocumentSnapshotProxy*& dyn__proxy();
    // Get instance field reference: private readonly Firebase.Firestore.FirebaseFirestore _firestore
    [[deprecated]] ::Firebase::Firestore::FirebaseFirestore*& dyn__firestore();
    // public Firebase.Firestore.DocumentReference get_Reference()
    // Offset: 0xD51750
    ::Firebase::Firestore::DocumentReference* get_Reference();
    // public System.String get_Id()
    // Offset: 0xD5397C
    ::StringW get_Id();
    // public System.Boolean get_Exists()
    // Offset: 0xD5399C
    bool get_Exists();
    // System.Void .ctor(Firebase.Firestore.DocumentSnapshotProxy proxy, Firebase.Firestore.FirebaseFirestore firestore)
    // Offset: 0xD52858
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DocumentSnapshot* New_ctor(::Firebase::Firestore::DocumentSnapshotProxy* proxy, ::Firebase::Firestore::FirebaseFirestore* firestore) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::DocumentSnapshot::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DocumentSnapshot*, creationType>(proxy, firestore)));
    }
    // public System.Collections.Generic.Dictionary`2<System.String,System.Object> ToDictionary(Firebase.Firestore.ServerTimestampBehavior serverTimestampBehavior)
    // Offset: 0xD539BC
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* ToDictionary(::Firebase::Firestore::ServerTimestampBehavior serverTimestampBehavior);
    // public T ConvertTo(Firebase.Firestore.ServerTimestampBehavior serverTimestampBehavior)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T ConvertTo(::Firebase::Firestore::ServerTimestampBehavior serverTimestampBehavior) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::DocumentSnapshot::ConvertTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertTo", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverTimestampBehavior)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, serverTimestampBehavior);
    }
    // public T GetValue(System.String path, Firebase.Firestore.ServerTimestampBehavior serverTimestampBehavior)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetValue(::StringW path, ::Firebase::Firestore::ServerTimestampBehavior serverTimestampBehavior) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::DocumentSnapshot::GetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(serverTimestampBehavior)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, path, serverTimestampBehavior);
    }
    // public T GetValue(Firebase.Firestore.FieldPath path, Firebase.Firestore.ServerTimestampBehavior serverTimestampBehavior)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T GetValue(::Firebase::Firestore::FieldPath* path, ::Firebase::Firestore::ServerTimestampBehavior serverTimestampBehavior) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::DocumentSnapshot::GetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(serverTimestampBehavior)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, path, serverTimestampBehavior);
    }
    // public System.Boolean TryGetValue(Firebase.Firestore.FieldPath path, out T value, Firebase.Firestore.ServerTimestampBehavior serverTimestampBehavior)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool TryGetValue(::Firebase::Firestore::FieldPath* path, ByRef<T> value, ::Firebase::Firestore::ServerTimestampBehavior serverTimestampBehavior) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::DocumentSnapshot::TryGetValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractIndependentType<T&>(), ::il2cpp_utils::ExtractType(serverTimestampBehavior)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, path, byref(value), serverTimestampBehavior);
    }
    // public System.Boolean Equals(Firebase.Firestore.DocumentSnapshot other)
    // Offset: 0xD53A98
    bool Equals(::Firebase::Firestore::DocumentSnapshot* other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xD53A18
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xD53B7C
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Firebase.Firestore.DocumentSnapshot
  #pragma pack(pop)
  static check_size<sizeof(DocumentSnapshot), 24 + sizeof(::Firebase::Firestore::FirebaseFirestore*)> __Firebase_Firestore_DocumentSnapshotSizeCheck;
  static_assert(sizeof(DocumentSnapshot) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::get_Reference
// Il2CppName: get_Reference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::DocumentReference* (Firebase::Firestore::DocumentSnapshot::*)()>(&Firebase::Firestore::DocumentSnapshot::get_Reference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DocumentSnapshot*), "get_Reference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::DocumentSnapshot::*)()>(&Firebase::Firestore::DocumentSnapshot::get_Id)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DocumentSnapshot*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::get_Exists
// Il2CppName: get_Exists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::DocumentSnapshot::*)()>(&Firebase::Firestore::DocumentSnapshot::get_Exists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DocumentSnapshot*), "get_Exists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::ToDictionary
// Il2CppName: ToDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::StringW, ::Il2CppObject*>* (Firebase::Firestore::DocumentSnapshot::*)(::Firebase::Firestore::ServerTimestampBehavior)>(&Firebase::Firestore::DocumentSnapshot::ToDictionary)> {
  static const MethodInfo* get() {
    static auto* serverTimestampBehavior = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "ServerTimestampBehavior")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DocumentSnapshot*), "ToDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverTimestampBehavior});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::ConvertTo
// Il2CppName: ConvertTo
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::GetValue
// Il2CppName: GetValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::GetValue
// Il2CppName: GetValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::TryGetValue
// Il2CppName: TryGetValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::DocumentSnapshot::*)(::Firebase::Firestore::DocumentSnapshot*)>(&Firebase::Firestore::DocumentSnapshot::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "DocumentSnapshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DocumentSnapshot*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::DocumentSnapshot::*)(::Il2CppObject*)>(&Firebase::Firestore::DocumentSnapshot::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DocumentSnapshot*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::DocumentSnapshot::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::DocumentSnapshot::*)()>(&Firebase::Firestore::DocumentSnapshot::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DocumentSnapshot*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
