// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FirebaseFirestore
  class FirebaseFirestore;
  // Forward declaring type: TransactionManagerProxy
  class TransactionManagerProxy;
  // Forward declaring type: ListenerRegistrationMap`1<T>
  template<typename T>
  class ListenerRegistrationMap_1;
  // Forward declaring type: TransactionCallbackProxy
  class TransactionCallbackProxy;
  // Forward declaring type: FirestoreProxy
  class FirestoreProxy;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: TransactionManager
  class TransactionManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::TransactionManager);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::TransactionManager*, "Firebase.Firestore", "TransactionManager");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.TransactionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class TransactionManager : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private readonly Firebase.Firestore.FirebaseFirestore _firestore
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Firestore::FirebaseFirestore* firestore;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::FirebaseFirestore*) == 0x8);
    // private readonly Firebase.Firestore.TransactionManagerProxy _transactionManagerProxy
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::Firestore::TransactionManagerProxy* transactionManagerProxy;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::TransactionManagerProxy*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private readonly Firebase.Firestore.ListenerRegistrationMap`1<System.Func`2<Firebase.Firestore.TransactionCallbackProxy,System.Threading.Tasks.Task>> _callbacks
    static ::Firebase::Firestore::ListenerRegistrationMap_1<::System::Func_2<::Firebase::Firestore::TransactionCallbackProxy*, ::System::Threading::Tasks::Task*>*>* _get__callbacks();
    // Set static field: static private readonly Firebase.Firestore.ListenerRegistrationMap`1<System.Func`2<Firebase.Firestore.TransactionCallbackProxy,System.Threading.Tasks.Task>> _callbacks
    static void _set__callbacks(::Firebase::Firestore::ListenerRegistrationMap_1<::System::Func_2<::Firebase::Firestore::TransactionCallbackProxy*, ::System::Threading::Tasks::Task*>*>* value);
    // Get instance field reference: private readonly Firebase.Firestore.FirebaseFirestore _firestore
    [[deprecated]] ::Firebase::Firestore::FirebaseFirestore*& dyn__firestore();
    // Get instance field reference: private readonly Firebase.Firestore.TransactionManagerProxy _transactionManagerProxy
    [[deprecated]] ::Firebase::Firestore::TransactionManagerProxy*& dyn__transactionManagerProxy();
    // System.Void .ctor(Firebase.Firestore.FirebaseFirestore firestore, Firebase.Firestore.FirestoreProxy firestoreProxy)
    // Offset: 0xD59880
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransactionManager* New_ctor(::Firebase::Firestore::FirebaseFirestore* firestore, ::Firebase::Firestore::FirestoreProxy* firestoreProxy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::TransactionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransactionManager*, creationType>(firestore, firestoreProxy)));
    }
    // static private System.Void .cctor()
    // Offset: 0xD65724
    static void _cctor();
    // public System.Void Dispose()
    // Offset: 0xD59DD8
    void Dispose();
    // protected override System.Void Finalize()
    // Offset: 0xD65628
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Firebase.Firestore.TransactionManager
  #pragma pack(pop)
  static check_size<sizeof(TransactionManager), 24 + sizeof(::Firebase::Firestore::TransactionManagerProxy*)> __Firebase_Firestore_TransactionManagerSizeCheck;
  static_assert(sizeof(TransactionManager) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::TransactionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::TransactionManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Firestore::TransactionManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::TransactionManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::TransactionManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::TransactionManager::*)()>(&Firebase::Firestore::TransactionManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::TransactionManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::TransactionManager::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::TransactionManager::*)()>(&Firebase::Firestore::TransactionManager::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::TransactionManager*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
