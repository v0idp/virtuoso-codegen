// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Firestore.Converters.AttributedTypeConverter
#include "Firebase/Firestore/Converters/AttributedTypeConverter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
}
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FieldValueProxy
  class FieldValueProxy;
  // Forward declaring type: FirestorePropertyAttribute
  class FirestorePropertyAttribute;
  // Forward declaring type: SerializationContext
  class SerializationContext;
  // Forward declaring type: DeserializationContext
  class DeserializationContext;
}
// Forward declaring namespace: Firebase::Firestore::Converters
namespace Firebase::Firestore::Converters {
  // Forward declaring type: IFirestoreInternalConverter
  class IFirestoreInternalConverter;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*, "Firebase.Firestore.Converters", "AttributedTypeConverter/AttributedProperty");
// Type namespace: Firebase.Firestore.Converters
namespace Firebase::Firestore::Converters {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.Converters.AttributedTypeConverter/Firebase.Firestore.Converters.AttributedProperty
  // [TokenAttribute] Offset: FFFFFFFF
  class AttributedTypeConverter::AttributedProperty : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Reflection.PropertyInfo _propertyInfo
    // Size: 0x8
    // Offset: 0x10
    ::System::Reflection::PropertyInfo* propertyInfo;
    // Field size check
    static_assert(sizeof(::System::Reflection::PropertyInfo*) == 0x8);
    // private Firebase.Firestore.FieldValueProxy _sentinelValue
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::Firestore::FieldValueProxy* sentinelValue;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::FieldValueProxy*) == 0x8);
    // private readonly Firebase.Firestore.Converters.IFirestoreInternalConverter _converter
    // Size: 0x8
    // Offset: 0x20
    ::Firebase::Firestore::Converters::IFirestoreInternalConverter* converter;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::Converters::IFirestoreInternalConverter*) == 0x8);
    // readonly System.String FirestoreName
    // Size: 0x8
    // Offset: 0x28
    ::StringW FirestoreName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private readonly System.Reflection.PropertyInfo _propertyInfo
    [[deprecated("Use field access instead!")]] ::System::Reflection::PropertyInfo*& dyn__propertyInfo();
    // Get instance field reference: private Firebase.Firestore.FieldValueProxy _sentinelValue
    [[deprecated("Use field access instead!")]] ::Firebase::Firestore::FieldValueProxy*& dyn__sentinelValue();
    // Get instance field reference: private readonly Firebase.Firestore.Converters.IFirestoreInternalConverter _converter
    [[deprecated("Use field access instead!")]] ::Firebase::Firestore::Converters::IFirestoreInternalConverter*& dyn__converter();
    // Get instance field reference: readonly System.String FirestoreName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_FirestoreName();
    // System.Boolean get_CanRead()
    // Offset: 0xD495E4
    bool get_CanRead();
    // System.Boolean get_CanWrite()
    // Offset: 0xD49608
    bool get_CanWrite();
    // System.Boolean get_IsNullableValue()
    // Offset: 0xD494EC
    bool get_IsNullableValue();
    // System.Void .ctor(System.Reflection.PropertyInfo property, Firebase.Firestore.FirestorePropertyAttribute attribute)
    // Offset: 0xD491FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AttributedTypeConverter::AttributedProperty* New_ctor(::System::Reflection::PropertyInfo* property, ::Firebase::Firestore::FirestorePropertyAttribute* attribute) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AttributedTypeConverter::AttributedProperty*, creationType>(property, attribute)));
    }
    // Firebase.Firestore.FieldValueProxy GetSerializedValue(Firebase.Firestore.SerializationContext context, System.Object obj)
    // Offset: 0xD4A670
    ::Firebase::Firestore::FieldValueProxy* GetSerializedValue(::Firebase::Firestore::SerializationContext* context, ::Il2CppObject* obj);
    // System.Void SetValue(Firebase.Firestore.DeserializationContext context, Firebase.Firestore.FieldValueProxy value, System.Object target)
    // Offset: 0xD4A298
    void SetValue(::Firebase::Firestore::DeserializationContext* context, ::Firebase::Firestore::FieldValueProxy* value, ::Il2CppObject* target);
  }; // Firebase.Firestore.Converters.AttributedTypeConverter/Firebase.Firestore.Converters.AttributedProperty
  #pragma pack(pop)
  static check_size<sizeof(AttributedTypeConverter::AttributedProperty), 40 + sizeof(::StringW)> __Firebase_Firestore_Converters_AttributedTypeConverter_AttributedPropertySizeCheck;
  static_assert(sizeof(AttributedTypeConverter::AttributedProperty) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::get_CanRead
// Il2CppName: get_CanRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::*)()>(&Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::get_CanRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*), "get_CanRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::get_CanWrite
// Il2CppName: get_CanWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::*)()>(&Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::get_CanWrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*), "get_CanWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::get_IsNullableValue
// Il2CppName: get_IsNullableValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::*)()>(&Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::get_IsNullableValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*), "get_IsNullableValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::GetSerializedValue
// Il2CppName: GetSerializedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::FieldValueProxy* (Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::*)(::Firebase::Firestore::SerializationContext*, ::Il2CppObject*)>(&Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::GetSerializedValue)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "SerializationContext")->byval_arg;
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*), "GetSerializedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::SetValue
// Il2CppName: SetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::*)(::Firebase::Firestore::DeserializationContext*, ::Firebase::Firestore::FieldValueProxy*, ::Il2CppObject*)>(&Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty::SetValue)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "DeserializationContext")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "FieldValueProxy")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*), "SetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, value, target});
  }
};
