// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Firestore.Converters.ConverterBase
#include "Firebase/Firestore/Converters/ConverterBase.hpp"
// Including type: System.TypeCode
#include "System/TypeCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: DeserializationContext
  class DeserializationContext;
  // Forward declaring type: FieldValueProxy
  class FieldValueProxy;
  // Forward declaring type: SerializationContext
  class SerializationContext;
}
// Completed forward declares
// Type namespace: Firebase.Firestore.Converters
namespace Firebase::Firestore::Converters {
  // Forward declaring type: EnumConverter
  class EnumConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::Converters::EnumConverter);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Converters::EnumConverter*, "Firebase.Firestore.Converters", "EnumConverter");
// Type namespace: Firebase.Firestore.Converters
namespace Firebase::Firestore::Converters {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.Converters.EnumConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class EnumConverter : public ::Firebase::Firestore::Converters::ConverterBase {
    public:
    #ifdef USE_CODEGEN_FIELDS
    public:
    #else
    #ifdef CODEGEN_FIELD_ACCESSIBILITY
    CODEGEN_FIELD_ACCESSIBILITY:
    #else
    protected:
    #endif
    #endif
    // private readonly System.TypeCode _typeCode
    // Size: 0x4
    // Offset: 0x18
    ::System::TypeCode typeCode;
    // Field size check
    static_assert(sizeof(::System::TypeCode) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::Type*
    constexpr operator ::System::Type*() const noexcept = delete;
    // Get instance field reference: private readonly System.TypeCode _typeCode
    ::System::TypeCode& dyn__typeCode();
    // private System.Int64 EnumToInt64(System.Object value)
    // Offset: 0xC32B88
    int64_t EnumToInt64(::Il2CppObject* value);
    // private System.Object Int64ToEnumBaseType(System.Int64 value)
    // Offset: 0xC32964
    ::Il2CppObject* Int64ToEnumBaseType(int64_t value);
    // System.Void .ctor(System.Type targetType)
    // Offset: 0xC2CBBC
    // Implemented from: Firebase.Firestore.Converters.ConverterBase
    // Base method: System.Void ConverterBase::.ctor(System.Type targetType)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnumConverter* New_ctor(::System::Type* targetType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Converters::EnumConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnumConverter*, creationType>(targetType)));
    }
    // protected override System.Object DeserializeInteger(Firebase.Firestore.DeserializationContext context, System.Int64 value)
    // Offset: 0xC328D8
    // Implemented from: Firebase.Firestore.Converters.ConverterBase
    // Base method: System.Object ConverterBase::DeserializeInteger(Firebase.Firestore.DeserializationContext context, System.Int64 value)
    ::Il2CppObject* DeserializeInteger(::Firebase::Firestore::DeserializationContext* context, int64_t value);
    // public override Firebase.Firestore.FieldValueProxy Serialize(Firebase.Firestore.SerializationContext context, System.Object value)
    // Offset: 0xC32B70
    // Implemented from: Firebase.Firestore.Converters.ConverterBase
    // Base method: Firebase.Firestore.FieldValueProxy ConverterBase::Serialize(Firebase.Firestore.SerializationContext context, System.Object value)
    ::Firebase::Firestore::FieldValueProxy* Serialize(::Firebase::Firestore::SerializationContext* context, ::Il2CppObject* value);
  }; // Firebase.Firestore.Converters.EnumConverter
  #pragma pack(pop)
  static check_size<sizeof(EnumConverter), 24 + sizeof(::System::TypeCode)> __Firebase_Firestore_Converters_EnumConverterSizeCheck;
  static_assert(sizeof(EnumConverter) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Converters::EnumConverter::EnumToInt64
// Il2CppName: EnumToInt64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Firebase::Firestore::Converters::EnumConverter::*)(::Il2CppObject*)>(&Firebase::Firestore::Converters::EnumConverter::EnumToInt64)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::EnumConverter*), "EnumToInt64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::EnumConverter::Int64ToEnumBaseType
// Il2CppName: Int64ToEnumBaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Firebase::Firestore::Converters::EnumConverter::*)(int64_t)>(&Firebase::Firestore::Converters::EnumConverter::Int64ToEnumBaseType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::EnumConverter*), "Int64ToEnumBaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::EnumConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::Converters::EnumConverter::DeserializeInteger
// Il2CppName: DeserializeInteger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Firebase::Firestore::Converters::EnumConverter::*)(::Firebase::Firestore::DeserializationContext*, int64_t)>(&Firebase::Firestore::Converters::EnumConverter::DeserializeInteger)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "DeserializationContext")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::EnumConverter*), "DeserializeInteger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, value});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::EnumConverter::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::FieldValueProxy* (Firebase::Firestore::Converters::EnumConverter::*)(::Firebase::Firestore::SerializationContext*, ::Il2CppObject*)>(&Firebase::Firestore::Converters::EnumConverter::Serialize)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "SerializationContext")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::EnumConverter*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, value});
  }
};
