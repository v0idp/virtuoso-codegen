// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Firestore.Converters.MapConverterBase
#include "Firebase/Firestore/Converters/MapConverterBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore::Converters
namespace Firebase::Firestore::Converters {
  // Skipping declaration: IFirestoreInternalConverter because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FirestoreDataAttribute
  class FirestoreDataAttribute;
  // Forward declaring type: DeserializationContext
  class DeserializationContext;
  // Forward declaring type: FieldValueProxy
  class FieldValueProxy;
  // Forward declaring type: SerializationContext
  class SerializationContext;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
}
// Completed forward declares
// Type namespace: Firebase.Firestore.Converters
namespace Firebase::Firestore::Converters {
  // Forward declaring type: AttributedTypeConverter
  class AttributedTypeConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::Converters::AttributedTypeConverter);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Converters::AttributedTypeConverter*, "Firebase.Firestore.Converters", "AttributedTypeConverter");
// Type namespace: Firebase.Firestore.Converters
namespace Firebase::Firestore::Converters {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.Converters.AttributedTypeConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class AttributedTypeConverter : public ::Firebase::Firestore::Converters::MapConverterBase {
    public:
    // Nested type: ::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty
    class AttributedProperty;
    // Nested type: ::Firebase::Firestore::Converters::AttributedTypeConverter::$AttributedTypeConverter$c__AnonStorey0
    class $AttributedTypeConverter$c__AnonStorey0;
    // Nested type: ::Firebase::Firestore::Converters::AttributedTypeConverter::$CreateObjectCreator$c__AnonStorey1
    class $CreateObjectCreator$c__AnonStorey1;
    // Nested type: ::Firebase::Firestore::Converters::AttributedTypeConverter::$CreateObjectCreator$c__AnonStorey2
    class $CreateObjectCreator$c__AnonStorey2;
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.String,Firebase.Firestore.Converters.AttributedTypeConverter/Firebase.Firestore.Converters.AttributedProperty> _writableProperties
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*>* writableProperties;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<Firebase.Firestore.Converters.AttributedTypeConverter/Firebase.Firestore.Converters.AttributedProperty> _readableProperties
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*>* readableProperties;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*>*) == 0x8);
    // private readonly System.Func`1<System.Object> _createInstance
    // Size: 0x8
    // Offset: 0x28
    ::System::Func_1<::Il2CppObject*>* createInstance;
    // Field size check
    static_assert(sizeof(::System::Func_1<::Il2CppObject*>*) == 0x8);
    // private readonly Firebase.Firestore.FirestoreDataAttribute _attribute
    // Size: 0x8
    // Offset: 0x30
    ::Firebase::Firestore::FirestoreDataAttribute* attribute;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::FirestoreDataAttribute*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::Type*
    constexpr operator ::System::Type*() const noexcept = delete;
    // Get static field: static private System.Func`2<System.Reflection.ConstructorInfo,System.Boolean> <>f__am$cache0
    static ::System::Func_2<::System::Reflection::ConstructorInfo*, bool>* _get_$$f__am$cache0();
    // Set static field: static private System.Func`2<System.Reflection.ConstructorInfo,System.Boolean> <>f__am$cache0
    static void _set_$$f__am$cache0(::System::Func_2<::System::Reflection::ConstructorInfo*, bool>* value);
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,Firebase.Firestore.Converters.AttributedTypeConverter/Firebase.Firestore.Converters.AttributedProperty> _writableProperties
    [[deprecated]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*>*& dyn__writableProperties();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Firebase.Firestore.Converters.AttributedTypeConverter/Firebase.Firestore.Converters.AttributedProperty> _readableProperties
    [[deprecated]] ::System::Collections::Generic::List_1<::Firebase::Firestore::Converters::AttributedTypeConverter::AttributedProperty*>*& dyn__readableProperties();
    // Get instance field reference: private readonly System.Func`1<System.Object> _createInstance
    [[deprecated]] ::System::Func_1<::Il2CppObject*>*& dyn__createInstance();
    // Get instance field reference: private readonly Firebase.Firestore.FirestoreDataAttribute _attribute
    [[deprecated]] ::Firebase::Firestore::FirestoreDataAttribute*& dyn__attribute();
    // private System.Void .ctor(System.Type targetType, Firebase.Firestore.FirestoreDataAttribute attribute)
    // Offset: 0xD4896C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AttributedTypeConverter* New_ctor(::System::Type* targetType, ::Firebase::Firestore::FirestoreDataAttribute* attribute) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Converters::AttributedTypeConverter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AttributedTypeConverter*, creationType>(targetType, attribute)));
    }
    // static private System.Func`1<System.Object> CreateObjectCreator(System.Type type)
    // Offset: 0xD48F74
    static ::System::Func_1<::Il2CppObject*>* CreateObjectCreator(::System::Type* type);
    // static Firebase.Firestore.Converters.IFirestoreInternalConverter ForType(System.Type targetType)
    // Offset: 0xD4963C
    static ::Firebase::Firestore::Converters::IFirestoreInternalConverter* ForType(::System::Type* targetType);
    // static private System.Boolean <CreateObjectCreator>m__0(System.Reflection.ConstructorInfo c)
    // Offset: 0xD4A7A0
    static bool $CreateObjectCreator$m__0(::System::Reflection::ConstructorInfo* c);
    // public override System.Object DeserializeMap(Firebase.Firestore.DeserializationContext context, Firebase.Firestore.FieldValueProxy mapValue)
    // Offset: 0xD49AF4
    // Implemented from: Firebase.Firestore.Converters.ConverterBase
    // Base method: System.Object ConverterBase::DeserializeMap(Firebase.Firestore.DeserializationContext context, Firebase.Firestore.FieldValueProxy mapValue)
    ::Il2CppObject* DeserializeMap(::Firebase::Firestore::DeserializationContext* context, ::Firebase::Firestore::FieldValueProxy* mapValue);
    // public override System.Void SerializeMap(Firebase.Firestore.SerializationContext context, System.Object value, System.Collections.Generic.IDictionary`2<System.String,Firebase.Firestore.FieldValueProxy> map)
    // Offset: 0xD4A48C
    // Implemented from: Firebase.Firestore.Converters.ConverterBase
    // Base method: System.Void ConverterBase::SerializeMap(Firebase.Firestore.SerializationContext context, System.Object value, System.Collections.Generic.IDictionary`2<System.String,Firebase.Firestore.FieldValueProxy> map)
    void SerializeMap(::Firebase::Firestore::SerializationContext* context, ::Il2CppObject* value, ::System::Collections::Generic::IDictionary_2<::StringW, ::Firebase::Firestore::FieldValueProxy*>* map);
  }; // Firebase.Firestore.Converters.AttributedTypeConverter
  #pragma pack(pop)
  static check_size<sizeof(AttributedTypeConverter), 48 + sizeof(::Firebase::Firestore::FirestoreDataAttribute*)> __Firebase_Firestore_Converters_AttributedTypeConverterSizeCheck;
  static_assert(sizeof(AttributedTypeConverter) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::CreateObjectCreator
// Il2CppName: CreateObjectCreator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<::Il2CppObject*>* (*)(::System::Type*)>(&Firebase::Firestore::Converters::AttributedTypeConverter::CreateObjectCreator)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter*), "CreateObjectCreator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::ForType
// Il2CppName: ForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::Converters::IFirestoreInternalConverter* (*)(::System::Type*)>(&Firebase::Firestore::Converters::AttributedTypeConverter::ForType)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter*), "ForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::$CreateObjectCreator$m__0
// Il2CppName: <CreateObjectCreator>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::Reflection::ConstructorInfo*)>(&Firebase::Firestore::Converters::AttributedTypeConverter::$CreateObjectCreator$m__0)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System.Reflection", "ConstructorInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter*), "<CreateObjectCreator>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::DeserializeMap
// Il2CppName: DeserializeMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Firebase::Firestore::Converters::AttributedTypeConverter::*)(::Firebase::Firestore::DeserializationContext*, ::Firebase::Firestore::FieldValueProxy*)>(&Firebase::Firestore::Converters::AttributedTypeConverter::DeserializeMap)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "DeserializationContext")->byval_arg;
    static auto* mapValue = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "FieldValueProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter*), "DeserializeMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, mapValue});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::AttributedTypeConverter::SerializeMap
// Il2CppName: SerializeMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::Converters::AttributedTypeConverter::*)(::Firebase::Firestore::SerializationContext*, ::Il2CppObject*, ::System::Collections::Generic::IDictionary_2<::StringW, ::Firebase::Firestore::FieldValueProxy*>*)>(&Firebase::Firestore::Converters::AttributedTypeConverter::SerializeMap)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "SerializationContext")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* map = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IDictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("Firebase.Firestore", "FieldValueProxy")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::AttributedTypeConverter*), "SerializeMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context, value, map});
  }
};
