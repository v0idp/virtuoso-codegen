// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: Firebase::Firestore::Converters
namespace Firebase::Firestore::Converters {
  // Forward declaring type: IFirestoreInternalConverter
  class IFirestoreInternalConverter;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FirestoreConverter`1<T>
  template<typename T>
  class FirestoreConverter_1;
}
// Completed forward declares
// Type namespace: Firebase.Firestore.Converters
namespace Firebase::Firestore::Converters {
  // Forward declaring type: CustomConverter
  class CustomConverter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::Converters::CustomConverter);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Converters::CustomConverter*, "Firebase.Firestore.Converters", "CustomConverter");
// Type namespace: Firebase.Firestore.Converters
namespace Firebase::Firestore::Converters {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.Converters.CustomConverter
  // [TokenAttribute] Offset: FFFFFFFF
  class CustomConverter : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Reflection.MethodInfo _method
    static ::System::Reflection::MethodInfo* _get__method();
    // Set static field: static private readonly System.Reflection.MethodInfo _method
    static void _set__method(::System::Reflection::MethodInfo* value);
    // static private System.Void .cctor()
    // Offset: 0xD5100C
    static void _cctor();
    // static Firebase.Firestore.Converters.IFirestoreInternalConverter ForConverterType(System.Type converterType, System.Type targetType)
    // Offset: 0xD49800
    static ::Firebase::Firestore::Converters::IFirestoreInternalConverter* ForConverterType(::System::Type* converterType, ::System::Type* targetType);
    // static Firebase.Firestore.Converters.IFirestoreInternalConverter CreateInstance(Firebase.Firestore.FirestoreConverter`1<T> wrappedConverter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static ::Firebase::Firestore::Converters::IFirestoreInternalConverter* CreateInstance(::Firebase::Firestore::FirestoreConverter_1<T>* wrappedConverter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Converters::CustomConverter::CreateInstance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Firestore.Converters", "CustomConverter", "CreateInstance", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(wrappedConverter)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Firebase::Firestore::Converters::IFirestoreInternalConverter*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, wrappedConverter);
    }
  }; // Firebase.Firestore.Converters.CustomConverter
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Converters::CustomConverter::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Firestore::Converters::CustomConverter::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::CustomConverter*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::CustomConverter::ForConverterType
// Il2CppName: ForConverterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::Converters::IFirestoreInternalConverter* (*)(::System::Type*, ::System::Type*)>(&Firebase::Firestore::Converters::CustomConverter::ForConverterType)> {
  static const MethodInfo* get() {
    static auto* converterType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Converters::CustomConverter*), "ForConverterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{converterType, targetType});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Converters::CustomConverter::CreateInstance
// Il2CppName: CreateInstance
// Cannot write MetadataGetter for generic methods!
