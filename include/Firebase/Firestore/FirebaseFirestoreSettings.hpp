// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ReaderWriterLock
  class ReaderWriterLock;
}
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FirestoreProxy
  class FirestoreProxy;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FirebaseFirestoreSettings
  class FirebaseFirestoreSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::FirebaseFirestoreSettings);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::FirebaseFirestoreSettings*, "Firebase.Firestore", "FirebaseFirestoreSettings");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.FirebaseFirestoreSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class FirebaseFirestoreSettings : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Threading.ReaderWriterLock _lock
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::ReaderWriterLock* lock;
    // Field size check
    static_assert(sizeof(::System::Threading::ReaderWriterLock*) == 0x8);
    // private Firebase.Firestore.FirestoreProxy _firestoreProxy
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::Firestore::FirestoreProxy* firestoreProxy;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::FirestoreProxy*) == 0x8);
    // private System.String _host
    // Size: 0x8
    // Offset: 0x20
    ::StringW host;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _sslEnabled
    // Size: 0x1
    // Offset: 0x28
    bool sslEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _persistenceEnabled
    // Size: 0x1
    // Offset: 0x29
    bool persistenceEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: persistenceEnabled and: cacheSizeBytes
    char __padding4[0x6] = {};
    // private System.Int64 _cacheSizeBytes
    // Size: 0x8
    // Offset: 0x30
    int64_t cacheSizeBytes;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Get static field: static public readonly System.Int64 CacheSizeUnlimited
    static int64_t _get_CacheSizeUnlimited();
    // Set static field: static public readonly System.Int64 CacheSizeUnlimited
    static void _set_CacheSizeUnlimited(int64_t value);
    // Get instance field reference: private readonly System.Threading.ReaderWriterLock _lock
    [[deprecated]] ::System::Threading::ReaderWriterLock*& dyn__lock();
    // Get instance field reference: private Firebase.Firestore.FirestoreProxy _firestoreProxy
    [[deprecated]] ::Firebase::Firestore::FirestoreProxy*& dyn__firestoreProxy();
    // Get instance field reference: private System.String _host
    [[deprecated]] ::StringW& dyn__host();
    // Get instance field reference: private System.Boolean _sslEnabled
    [[deprecated]] bool& dyn__sslEnabled();
    // Get instance field reference: private System.Boolean _persistenceEnabled
    [[deprecated]] bool& dyn__persistenceEnabled();
    // Get instance field reference: private System.Int64 _cacheSizeBytes
    [[deprecated]] int64_t& dyn__cacheSizeBytes();
    // public System.String get_Host()
    // Offset: 0xD5AFA4
    ::StringW get_Host();
    // public System.Boolean get_SslEnabled()
    // Offset: 0xD5B04C
    bool get_SslEnabled();
    // public System.Boolean get_PersistenceEnabled()
    // Offset: 0xD5B0F4
    bool get_PersistenceEnabled();
    // public System.Int64 get_CacheSizeBytes()
    // Offset: 0xD5B19C
    int64_t get_CacheSizeBytes();
    // System.Void .ctor(Firebase.Firestore.FirestoreProxy firestoreProxy)
    // Offset: 0xD59744
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FirebaseFirestoreSettings* New_ctor(::Firebase::Firestore::FirestoreProxy* firestoreProxy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::FirebaseFirestoreSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FirebaseFirestoreSettings*, creationType>(firestoreProxy)));
    }
    // static private System.Void .cctor()
    // Offset: 0xD5B9E8
    static void _cctor();
    // System.Void Dispose()
    // Offset: 0xD59EA8
    void Dispose();
    // private T WithReadLock(System.Func`1<T> func)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T WithReadLock(::System::Func_1<T>* func) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::FirebaseFirestoreSettings::WithReadLock");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithReadLock", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(func)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method, func);
    }
    // System.Void EnsureAppliedToFirestoreProxy()
    // Offset: 0xD5B244
    void EnsureAppliedToFirestoreProxy();
    // private System.String <get_Host>m__0()
    // Offset: 0xD5BA6C
    ::StringW $get_Host$m__0();
    // private System.Boolean <get_SslEnabled>m__1()
    // Offset: 0xD5BA74
    bool $get_SslEnabled$m__1();
    // private System.Boolean <get_PersistenceEnabled>m__2()
    // Offset: 0xD5BA7C
    bool $get_PersistenceEnabled$m__2();
    // private System.Int64 <get_CacheSizeBytes>m__3()
    // Offset: 0xD5BA84
    int64_t $get_CacheSizeBytes$m__3();
    // public override System.String ToString()
    // Offset: 0xD5B6E0
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Firebase.Firestore.FirebaseFirestoreSettings
  #pragma pack(pop)
  static check_size<sizeof(FirebaseFirestoreSettings), 48 + sizeof(int64_t)> __Firebase_Firestore_FirebaseFirestoreSettingsSizeCheck;
  static_assert(sizeof(FirebaseFirestoreSettings) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_Host
// Il2CppName: get_Host
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_Host)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_Host", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_SslEnabled
// Il2CppName: get_SslEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_SslEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_SslEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_PersistenceEnabled
// Il2CppName: get_PersistenceEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_PersistenceEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_PersistenceEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::get_CacheSizeBytes
// Il2CppName: get_CacheSizeBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::get_CacheSizeBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "get_CacheSizeBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::WithReadLock
// Il2CppName: WithReadLock
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::EnsureAppliedToFirestoreProxy
// Il2CppName: EnsureAppliedToFirestoreProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::EnsureAppliedToFirestoreProxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "EnsureAppliedToFirestoreProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::$get_Host$m__0
// Il2CppName: <get_Host>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::$get_Host$m__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "<get_Host>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::$get_SslEnabled$m__1
// Il2CppName: <get_SslEnabled>m__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::$get_SslEnabled$m__1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "<get_SslEnabled>m__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::$get_PersistenceEnabled$m__2
// Il2CppName: <get_PersistenceEnabled>m__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::$get_PersistenceEnabled$m__2)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "<get_PersistenceEnabled>m__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::$get_CacheSizeBytes$m__3
// Il2CppName: <get_CacheSizeBytes>m__3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::$get_CacheSizeBytes$m__3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "<get_CacheSizeBytes>m__3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::FirebaseFirestoreSettings::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::FirebaseFirestoreSettings::*)()>(&Firebase::Firestore::FirebaseFirestoreSettings::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::FirebaseFirestoreSettings*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
