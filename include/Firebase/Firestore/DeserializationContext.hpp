// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: DocumentSnapshot
  class DocumentSnapshot;
  // Forward declaring type: FirebaseFirestore
  class FirebaseFirestore;
  // Forward declaring type: DocumentReference
  class DocumentReference;
}
// Forward declaring namespace: Firebase::Firestore::Converters
namespace Firebase::Firestore::Converters {
  // Forward declaring type: IFirestoreInternalConverter
  class IFirestoreInternalConverter;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: DeserializationContext
  class DeserializationContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::DeserializationContext);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::DeserializationContext*, "Firebase.Firestore", "DeserializationContext");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.DeserializationContext
  // [TokenAttribute] Offset: FFFFFFFF
  class DeserializationContext : public ::Il2CppObject {
    public:
    public:
    // readonly Firebase.Firestore.DocumentSnapshot Snapshot
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Firestore::DocumentSnapshot* Snapshot;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::DocumentSnapshot*) == 0x8);
    public:
    // Creating conversion operator: operator ::Firebase::Firestore::DocumentSnapshot*
    constexpr operator ::Firebase::Firestore::DocumentSnapshot*() const noexcept {
      return Snapshot;
    }
    // Get instance field reference: readonly Firebase.Firestore.DocumentSnapshot Snapshot
    [[deprecated("Use field access instead!")]] ::Firebase::Firestore::DocumentSnapshot*& dyn_Snapshot();
    // Firebase.Firestore.FirebaseFirestore get_Firestore()
    // Offset: 0xD4D028
    ::Firebase::Firestore::FirebaseFirestore* get_Firestore();
    // Firebase.Firestore.DocumentReference get_DocumentReference()
    // Offset: 0xD4A474
    ::Firebase::Firestore::DocumentReference* get_DocumentReference();
    // System.Void .ctor(Firebase.Firestore.DocumentSnapshot snapshot)
    // Offset: 0xD516CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeserializationContext* New_ctor(::Firebase::Firestore::DocumentSnapshot* snapshot) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::DeserializationContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeserializationContext*, creationType>(snapshot)));
    }
    // Firebase.Firestore.Converters.IFirestoreInternalConverter GetConverter(System.Type targetType)
    // Offset: 0xD517DC
    ::Firebase::Firestore::Converters::IFirestoreInternalConverter* GetConverter(::System::Type* targetType);
  }; // Firebase.Firestore.DeserializationContext
  #pragma pack(pop)
  static check_size<sizeof(DeserializationContext), 16 + sizeof(::Firebase::Firestore::DocumentSnapshot*)> __Firebase_Firestore_DeserializationContextSizeCheck;
  static_assert(sizeof(DeserializationContext) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::DeserializationContext::get_Firestore
// Il2CppName: get_Firestore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::FirebaseFirestore* (Firebase::Firestore::DeserializationContext::*)()>(&Firebase::Firestore::DeserializationContext::get_Firestore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DeserializationContext*), "get_Firestore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::DeserializationContext::get_DocumentReference
// Il2CppName: get_DocumentReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::DocumentReference* (Firebase::Firestore::DeserializationContext::*)()>(&Firebase::Firestore::DeserializationContext::get_DocumentReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DeserializationContext*), "get_DocumentReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::DeserializationContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::DeserializationContext::GetConverter
// Il2CppName: GetConverter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::Converters::IFirestoreInternalConverter* (Firebase::Firestore::DeserializationContext::*)(::System::Type*)>(&Firebase::Firestore::DeserializationContext::GetConverter)> {
  static const MethodInfo* get() {
    static auto* targetType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::DeserializationContext*), "GetConverter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetType});
  }
};
