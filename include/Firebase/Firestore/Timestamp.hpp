// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: DateTimeOffset
  struct DateTimeOffset;
}
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: TimestampProxy
  class TimestampProxy;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: Timestamp
  struct Timestamp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Timestamp, "Firebase.Firestore", "Timestamp");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Firebase.Firestore.Timestamp
  // [TokenAttribute] Offset: FFFFFFFF
  struct Timestamp/*, public ::System::ValueType, public ::System::IEquatable_1<::Firebase::Firestore::Timestamp>, public ::System::IComparable_1<::Firebase::Firestore::Timestamp>, public ::System::IComparable*/ {
    public:
    public:
    // private readonly System.Int64 _seconds
    // Size: 0x8
    // Offset: 0x0
    int64_t seconds;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private readonly System.Int32 _nanoseconds
    // Size: 0x4
    // Offset: 0x8
    int nanoseconds;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Timestamp
    constexpr Timestamp(int64_t seconds_ = {}, int nanoseconds_ = {}) noexcept : seconds{seconds_}, nanoseconds{nanoseconds_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Firebase::Firestore::Timestamp>
    operator ::System::IEquatable_1<::Firebase::Firestore::Timestamp>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Firebase::Firestore::Timestamp>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable_1<::Firebase::Firestore::Timestamp>
    operator ::System::IComparable_1<::Firebase::Firestore::Timestamp>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::Firebase::Firestore::Timestamp>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable
    operator ::System::IComparable() noexcept {
      return *reinterpret_cast<::System::IComparable*>(this);
    }
    // Get static field: static private readonly System.DateTime s_unixEpoch
    static ::System::DateTime _get_s_unixEpoch();
    // Set static field: static private readonly System.DateTime s_unixEpoch
    static void _set_s_unixEpoch(::System::DateTime value);
    // Get instance field reference: private readonly System.Int64 _seconds
    [[deprecated("Use field access instead!")]] int64_t& dyn__seconds();
    // Get instance field reference: private readonly System.Int32 _nanoseconds
    [[deprecated("Use field access instead!")]] int& dyn__nanoseconds();
    // System.Void .ctor(System.Int64 seconds, System.Int32 nanoseconds)
    // Offset: 0xD6480C
    // ABORTED: conflicts with another method.  Timestamp(int64_t seconds, int nanoseconds);
    // static private System.Void .cctor()
    // Offset: 0xD64FC4
    static void _cctor();
    // public System.DateTime ToDateTime()
    // Offset: 0xD513CC
    ::System::DateTime ToDateTime();
    // public System.DateTimeOffset ToDateTimeOffset()
    // Offset: 0xD51634
    ::System::DateTimeOffset ToDateTimeOffset();
    // static public Firebase.Firestore.Timestamp FromDateTime(System.DateTime dateTime)
    // Offset: 0xD51194
    static ::Firebase::Firestore::Timestamp FromDateTime(::System::DateTime dateTime);
    // static public Firebase.Firestore.Timestamp FromDateTimeOffset(System.DateTimeOffset dateTimeOffset)
    // Offset: 0xD5154C
    static ::Firebase::Firestore::Timestamp FromDateTimeOffset(::System::DateTimeOffset dateTimeOffset);
    // public System.Boolean Equals(Firebase.Firestore.Timestamp other)
    // Offset: 0xD64994
    bool Equals(::Firebase::Firestore::Timestamp other);
    // public System.Int32 CompareTo(Firebase.Firestore.Timestamp other)
    // Offset: 0xD649D4
    int CompareTo(::Firebase::Firestore::Timestamp other);
    // public System.Int32 CompareTo(System.Object obj)
    // Offset: 0xD64A30
    int CompareTo(::Il2CppObject* obj);
    // Firebase.Firestore.TimestampProxy ConvertToProxy()
    // Offset: 0xD5121C
    ::Firebase::Firestore::TimestampProxy* ConvertToProxy();
    // static Firebase.Firestore.Timestamp ConvertFromProxy(Firebase.Firestore.TimestampProxy obj)
    // Offset: 0xD4D1B8
    static ::Firebase::Firestore::Timestamp ConvertFromProxy(::Firebase::Firestore::TimestampProxy* obj);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xD64900
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xD649B8
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xD64B14
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Firebase.Firestore.Timestamp
  #pragma pack(pop)
  static check_size<sizeof(Timestamp), 8 + sizeof(int)> __Firebase_Firestore_TimestampSizeCheck;
  static_assert(sizeof(Timestamp) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::Timestamp
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Firestore::Timestamp::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::ToDateTime
// Il2CppName: ToDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTime (Firebase::Firestore::Timestamp::*)()>(&Firebase::Firestore::Timestamp::ToDateTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "ToDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::ToDateTimeOffset
// Il2CppName: ToDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::DateTimeOffset (Firebase::Firestore::Timestamp::*)()>(&Firebase::Firestore::Timestamp::ToDateTimeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "ToDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::FromDateTime
// Il2CppName: FromDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::Timestamp (*)(::System::DateTime)>(&Firebase::Firestore::Timestamp::FromDateTime)> {
  static const MethodInfo* get() {
    static auto* dateTime = &::il2cpp_utils::GetClassFromName("System", "DateTime")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "FromDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTime});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::FromDateTimeOffset
// Il2CppName: FromDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::Timestamp (*)(::System::DateTimeOffset)>(&Firebase::Firestore::Timestamp::FromDateTimeOffset)> {
  static const MethodInfo* get() {
    static auto* dateTimeOffset = &::il2cpp_utils::GetClassFromName("System", "DateTimeOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "FromDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dateTimeOffset});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::Timestamp::*)(::Firebase::Firestore::Timestamp)>(&Firebase::Firestore::Timestamp::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "Timestamp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::Timestamp::*)(::Firebase::Firestore::Timestamp)>(&Firebase::Firestore::Timestamp::CompareTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "Timestamp")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::Timestamp::*)(::Il2CppObject*)>(&Firebase::Firestore::Timestamp::CompareTo)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::ConvertToProxy
// Il2CppName: ConvertToProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::TimestampProxy* (Firebase::Firestore::Timestamp::*)()>(&Firebase::Firestore::Timestamp::ConvertToProxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "ConvertToProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::ConvertFromProxy
// Il2CppName: ConvertFromProxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::Timestamp (*)(::Firebase::Firestore::TimestampProxy*)>(&Firebase::Firestore::Timestamp::ConvertFromProxy)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "TimestampProxy")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "ConvertFromProxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::Timestamp::*)(::Il2CppObject*)>(&Firebase::Firestore::Timestamp::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::Timestamp::*)()>(&Firebase::Firestore::Timestamp::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Timestamp::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::Timestamp::*)()>(&Firebase::Firestore::Timestamp::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Timestamp), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
