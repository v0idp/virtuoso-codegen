// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: ServerTimestampBehavior
  struct ServerTimestampBehavior;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::ServerTimestampBehavior, "Firebase.Firestore", "ServerTimestampBehavior");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.ServerTimestampBehavior
  // [TokenAttribute] Offset: FFFFFFFF
  struct ServerTimestampBehavior/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ServerTimestampBehavior
    constexpr ServerTimestampBehavior(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Firebase.Firestore.ServerTimestampBehavior None
    static constexpr const int None = 0;
    // Get static field: static public Firebase.Firestore.ServerTimestampBehavior None
    static ::Firebase::Firestore::ServerTimestampBehavior _get_None();
    // Set static field: static public Firebase.Firestore.ServerTimestampBehavior None
    static void _set_None(::Firebase::Firestore::ServerTimestampBehavior value);
    // static field const value: static public Firebase.Firestore.ServerTimestampBehavior Estimate
    static constexpr const int Estimate = 1;
    // Get static field: static public Firebase.Firestore.ServerTimestampBehavior Estimate
    static ::Firebase::Firestore::ServerTimestampBehavior _get_Estimate();
    // Set static field: static public Firebase.Firestore.ServerTimestampBehavior Estimate
    static void _set_Estimate(::Firebase::Firestore::ServerTimestampBehavior value);
    // static field const value: static public Firebase.Firestore.ServerTimestampBehavior Previous
    static constexpr const int Previous = 2;
    // Get static field: static public Firebase.Firestore.ServerTimestampBehavior Previous
    static ::Firebase::Firestore::ServerTimestampBehavior _get_Previous();
    // Set static field: static public Firebase.Firestore.ServerTimestampBehavior Previous
    static void _set_Previous(::Firebase::Firestore::ServerTimestampBehavior value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated]] int& dyn_value__();
  }; // Firebase.Firestore.ServerTimestampBehavior
  #pragma pack(pop)
  static check_size<sizeof(ServerTimestampBehavior), 0 + sizeof(int)> __Firebase_Firestore_ServerTimestampBehaviorSizeCheck;
  static_assert(sizeof(ServerTimestampBehavior) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
