// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Firebase.Firestore.Internal
namespace Firebase::Firestore::Internal {
  // Forward declaring type: Preconditions
  class Preconditions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::Internal::Preconditions);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Internal::Preconditions*, "Firebase.Firestore.Internal", "Preconditions");
// Type namespace: Firebase.Firestore.Internal
namespace Firebase::Firestore::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.Internal.Preconditions
  // [TokenAttribute] Offset: FFFFFFFF
  class Preconditions : public ::Il2CppObject {
    public:
    // static T CheckNotNull(T argument, System.String paramName)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T CheckNotNull(T argument, ::StringW paramName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Preconditions::CheckNotNull");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Firestore.Internal", "Preconditions", "CheckNotNull", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argument), ::il2cpp_utils::ExtractType(paramName)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, argument, paramName);
    }
    // static System.String CheckNotNullOrEmpty(System.String argument, System.String paramName)
    // Offset: 0xD4B994
    static ::StringW CheckNotNullOrEmpty(::StringW argument, ::StringW paramName);
    // static public System.Void CheckState(System.Boolean condition, System.String message)
    // Offset: 0xD477FC
    static void CheckState(bool condition, ::StringW message);
    // static public System.Void CheckState(System.Boolean condition, System.String format, T arg0)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static void CheckState(bool condition, ::StringW format, T arg0) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Preconditions::CheckState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Firestore.Internal", "Preconditions", "CheckState", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, condition, format, arg0);
    }
    // static public System.Void CheckState(System.Boolean condition, System.String format, T1 arg0, T2 arg1)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2>
    static void CheckState(bool condition, ::StringW format, T1 arg0, T2 arg1) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Preconditions::CheckState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Firestore.Internal", "Preconditions", "CheckState", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, condition, format, arg0, arg1);
    }
    // static public System.Void CheckState(System.Boolean condition, System.String format, T1 arg0, T2 arg1, T3 arg2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T1, class T2, class T3>
    static void CheckState(bool condition, ::StringW format, T1 arg0, T2 arg1, T3 arg2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Preconditions::CheckState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Firestore.Internal", "Preconditions", "CheckState", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(condition), ::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, condition, format, arg0, arg1, arg2);
    }
    // static System.Void CheckArgument(System.Boolean condition, System.String paramName, System.String message)
    // Offset: 0xD55D80
    static void CheckArgument(bool condition, ::StringW paramName, ::StringW message);
  }; // Firebase.Firestore.Internal.Preconditions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Preconditions::CheckNotNull
// Il2CppName: CheckNotNull
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Preconditions::CheckNotNullOrEmpty
// Il2CppName: CheckNotNullOrEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::StringW)>(&Firebase::Firestore::Internal::Preconditions::CheckNotNullOrEmpty)> {
  static const MethodInfo* get() {
    static auto* argument = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Preconditions*), "CheckNotNullOrEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{argument, paramName});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Preconditions::CheckState
// Il2CppName: CheckState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::StringW)>(&Firebase::Firestore::Internal::Preconditions::CheckState)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Preconditions*), "CheckState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition, message});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Preconditions::CheckState
// Il2CppName: CheckState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Preconditions::CheckState
// Il2CppName: CheckState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Preconditions::CheckState
// Il2CppName: CheckState
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Preconditions::CheckArgument
// Il2CppName: CheckArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::StringW, ::StringW)>(&Firebase::Firestore::Internal::Preconditions::CheckArgument)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Preconditions*), "CheckArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition, paramName, message});
  }
};
