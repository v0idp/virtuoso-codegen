// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: SourceProxy
  struct SourceProxy;
  // Forward declaring type: Source
  struct Source;
}
// Completed forward declares
// Type namespace: Firebase.Firestore.Internal
namespace Firebase::Firestore::Internal {
  // Forward declaring type: Enums
  class Enums;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::Internal::Enums);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Internal::Enums*, "Firebase.Firestore.Internal", "Enums");
// Type namespace: Firebase.Firestore.Internal
namespace Firebase::Firestore::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.Internal.Enums
  // [TokenAttribute] Offset: FFFFFFFF
  class Enums : public ::Il2CppObject {
    public:
    // static public Firebase.Firestore.SourceProxy Convert(Firebase.Firestore.Source source)
    // Offset: 0xD52508
    static ::Firebase::Firestore::SourceProxy Convert(::Firebase::Firestore::Source source);
  }; // Firebase.Firestore.Internal.Enums
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Enums::Convert
// Il2CppName: Convert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::SourceProxy (*)(::Firebase::Firestore::Source)>(&Firebase::Firestore::Internal::Enums::Convert)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "Source")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Enums*), "Convert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
