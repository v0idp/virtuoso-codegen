// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Firestore.Internal.Util
#include "Firebase/Firestore/Internal/Util.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Firebase::Firestore::Internal::Util::$MapResult$c__AnonStorey0_2, "Firebase.Firestore.Internal", "Util/<MapResult>c__AnonStorey0`2");
// Type namespace: Firebase.Firestore.Internal
namespace Firebase::Firestore::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: Firebase.Firestore.Internal.Util/Firebase.Firestore.Internal.<MapResult>c__AnonStorey0`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename T, typename U>
  class Util::$MapResult$c__AnonStorey0_2 : public ::Il2CppObject {
    public:
    public:
    // System.Func`2<T,U> mapFunc
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_2<T, U>* mapFunc;
    // Field size check
    static_assert(sizeof(::System::Func_2<T, U>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Func_2<T, U>*
    constexpr operator ::System::Func_2<T, U>*() const noexcept {
      return mapFunc;
    }
    // Autogenerated instance field getter
    // Get instance field: System.Func`2<T,U> mapFunc
    [[deprecated("Use field access instead!")]] ::System::Func_2<T, U>*& dyn_mapFunc() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Util::$MapResult$c__AnonStorey0_2::dyn_mapFunc");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "mapFunc"))->offset;
      return *reinterpret_cast<::System::Func_2<T, U>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Util::$MapResult$c__AnonStorey0_2<T, U>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Util::$MapResult$c__AnonStorey0_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Util::$MapResult$c__AnonStorey0_2<T, U>*, creationType>()));
    }
    // U <>m__0(System.Threading.Tasks.Task`1<T> completedTask)
    // Offset: 0xFFFFFFFFFFFFFFFF
    U $$m__0(::System::Threading::Tasks::Task_1<T>* completedTask) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Util::$MapResult$c__AnonStorey0_2::<>m__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completedTask)})));
      return ::il2cpp_utils::RunMethodRethrow<U, false>(this, ___internal__method, completedTask);
    }
  }; // Firebase.Firestore.Internal.Util/Firebase.Firestore.Internal.<MapResult>c__AnonStorey0`2
  // Could not write size check! Type: Firebase.Firestore.Internal.Util/Firebase.Firestore.Internal.<MapResult>c__AnonStorey0`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
