// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore::Internal
namespace Firebase::Firestore::Internal {
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: AggregateException
  class AggregateException;
}
// Completed forward declares
// Type namespace: Firebase.Firestore.Internal
namespace Firebase::Firestore::Internal {
  // Forward declaring type: Util
  class Util;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::Internal::Util);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::Internal::Util*, "Firebase.Firestore.Internal", "Util");
// Type namespace: Firebase.Firestore.Internal
namespace Firebase::Firestore::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.Internal.Util
  // [TokenAttribute] Offset: FFFFFFFF
  class Util : public ::Il2CppObject {
    public:
    // Nested type: ::Firebase::Firestore::Internal::Util::$MapResult$c__AnonStorey0_2<T, U>
    template<typename T, typename U>
    class $MapResult$c__AnonStorey0_2;
    // Nested type: ::Firebase::Firestore::Internal::Util::$MapResult$c__AnonStorey1_1<U>
    template<typename U>
    class $MapResult$c__AnonStorey1_1;
    // static System.Void Unreachable()
    // Offset: 0xD65CE0
    static void Unreachable();
    // static System.Void HardAssert(System.Boolean condition, System.String message)
    // Offset: 0xD51BE0
    static void HardAssert(bool condition, ::StringW message);
    // static T NotNull(T obj, System.String message)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static T NotNull(T obj, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Util::NotNull");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Firestore.Internal", "Util", "NotNull", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(message)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, obj, message);
    }
    // static System.Threading.Tasks.Task`1<U> MapResult(System.Threading.Tasks.Task`1<T> task, System.Func`2<T,U> mapFunc)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T, class U>
    static ::System::Threading::Tasks::Task_1<U>* MapResult(::System::Threading::Tasks::Task_1<T>* task, ::System::Func_2<T, U>* mapFunc) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Util::MapResult");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Firestore.Internal", "Util", "MapResult", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(mapFunc)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<U>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, task, mapFunc);
    }
    // static System.Threading.Tasks.Task`1<U> MapResult(System.Threading.Tasks.Task task, U result)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class U>
    static ::System::Threading::Tasks::Task_1<U>* MapResult(::System::Threading::Tasks::Task* task, U result) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::Internal::Util::MapResult");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Firestore.Internal", "Util", "MapResult", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(result)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<U>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<U>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, task, result);
    }
    // static System.Void FlattenAndThrowException(System.Threading.Tasks.Task completedTask)
    // Offset: 0xD65CE4
    static void FlattenAndThrowException(::System::Threading::Tasks::Task* completedTask);
    // static System.Exception FlattenException(System.AggregateException aggregateException)
    // Offset: 0xD65DA8
    static ::System::Exception* FlattenException(::System::AggregateException* aggregateException);
    // static System.Void OnPInvokeManagedException(System.Exception exception, System.String methodName)
    // Offset: 0xD5262C
    static void OnPInvokeManagedException(::System::Exception* exception, ::StringW methodName);
  }; // Firebase.Firestore.Internal.Util
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Util::Unreachable
// Il2CppName: Unreachable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Firestore::Internal::Util::Unreachable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Util*), "Unreachable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Util::HardAssert
// Il2CppName: HardAssert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::StringW)>(&Firebase::Firestore::Internal::Util::HardAssert)> {
  static const MethodInfo* get() {
    static auto* condition = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Util*), "HardAssert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{condition, message});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Util::NotNull
// Il2CppName: NotNull
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Util::MapResult
// Il2CppName: MapResult
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Util::MapResult
// Il2CppName: MapResult
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Util::FlattenAndThrowException
// Il2CppName: FlattenAndThrowException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Threading::Tasks::Task*)>(&Firebase::Firestore::Internal::Util::FlattenAndThrowException)> {
  static const MethodInfo* get() {
    static auto* completedTask = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Util*), "FlattenAndThrowException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{completedTask});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Util::FlattenException
// Il2CppName: FlattenException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::AggregateException*)>(&Firebase::Firestore::Internal::Util::FlattenException)> {
  static const MethodInfo* get() {
    static auto* aggregateException = &::il2cpp_utils::GetClassFromName("System", "AggregateException")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Util*), "FlattenException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aggregateException});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::Internal::Util::OnPInvokeManagedException
// Il2CppName: OnPInvokeManagedException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Exception*, ::StringW)>(&Firebase::Firestore::Internal::Util::OnPInvokeManagedException)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::Internal::Util*), "OnPInvokeManagedException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception, methodName});
  }
};
