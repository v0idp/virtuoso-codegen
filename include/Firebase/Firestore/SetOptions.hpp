// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Firestore
namespace Firebase::Firestore {
  // Forward declaring type: FieldPath
  class FieldPath;
  // Forward declaring type: SetOptionsProxy
  class SetOptionsProxy;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Completed forward declares
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Forward declaring type: SetOptions
  class SetOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Firestore::SetOptions);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::SetOptions*, "Firebase.Firestore", "SetOptions");
// Type namespace: Firebase.Firestore
namespace Firebase::Firestore {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Firestore.SetOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class SetOptions : public ::Il2CppObject {
    public:
    // Nested type: ::Firebase::Firestore::SetOptions::Type
    struct Type;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Firebase.Firestore.SetOptions/Firebase.Firestore.Type
    // [TokenAttribute] Offset: FFFFFFFF
    struct Type/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Type
      constexpr Type(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Firebase.Firestore.SetOptions/Firebase.Firestore.Type Overwrite
      static constexpr const int Overwrite = 0;
      // Get static field: static public Firebase.Firestore.SetOptions/Firebase.Firestore.Type Overwrite
      static ::Firebase::Firestore::SetOptions::Type _get_Overwrite();
      // Set static field: static public Firebase.Firestore.SetOptions/Firebase.Firestore.Type Overwrite
      static void _set_Overwrite(::Firebase::Firestore::SetOptions::Type value);
      // static field const value: static public Firebase.Firestore.SetOptions/Firebase.Firestore.Type Merge
      static constexpr const int Merge = 1;
      // Get static field: static public Firebase.Firestore.SetOptions/Firebase.Firestore.Type Merge
      static ::Firebase::Firestore::SetOptions::Type _get_Merge();
      // Set static field: static public Firebase.Firestore.SetOptions/Firebase.Firestore.Type Merge
      static void _set_Merge(::Firebase::Firestore::SetOptions::Type value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated]] int& dyn_value__();
    }; // Firebase.Firestore.SetOptions/Firebase.Firestore.Type
    #pragma pack(pop)
    static check_size<sizeof(SetOptions::Type), 0 + sizeof(int)> __Firebase_Firestore_SetOptions_TypeSizeCheck;
    static_assert(sizeof(SetOptions::Type) == 0x4);
    public:
    // private readonly Firebase.Firestore.SetOptionsProxy _proxy
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Firestore::SetOptionsProxy* proxy;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::SetOptionsProxy*) == 0x8);
    // private Firebase.Firestore.SetOptions/Firebase.Firestore.Type setType
    // Size: 0x4
    // Offset: 0x18
    ::Firebase::Firestore::SetOptions::Type setType;
    // Field size check
    static_assert(sizeof(::Firebase::Firestore::SetOptions::Type) == 0x4);
    // Padding between fields: setType and: fields
    char __padding1[0x4] = {};
    // private Firebase.Firestore.FieldPath[] fields
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Firebase::Firestore::FieldPath*> fields;
    // Field size check
    static_assert(sizeof(::ArrayW<::Firebase::Firestore::FieldPath*>) == 0x8);
    public:
    // Get static field: static private System.Func`2<Firebase.Firestore.FieldPath,System.String> <>f__am$cache1
    static ::System::Func_2<::Firebase::Firestore::FieldPath*, ::StringW>* _get_$$f__am$cache1();
    // Set static field: static private System.Func`2<Firebase.Firestore.FieldPath,System.String> <>f__am$cache1
    static void _set_$$f__am$cache1(::System::Func_2<::Firebase::Firestore::FieldPath*, ::StringW>* value);
    // Get static field: static private System.Func`3<System.Int32,Firebase.Firestore.FieldPath,System.Int32> <>f__am$cache2
    static ::System::Func_3<int, ::Firebase::Firestore::FieldPath*, int>* _get_$$f__am$cache2();
    // Set static field: static private System.Func`3<System.Int32,Firebase.Firestore.FieldPath,System.Int32> <>f__am$cache2
    static void _set_$$f__am$cache2(::System::Func_3<int, ::Firebase::Firestore::FieldPath*, int>* value);
    // Get instance field reference: private readonly Firebase.Firestore.SetOptionsProxy _proxy
    [[deprecated]] ::Firebase::Firestore::SetOptionsProxy*& dyn__proxy();
    // Get instance field reference: private Firebase.Firestore.SetOptions/Firebase.Firestore.Type setType
    [[deprecated]] ::Firebase::Firestore::SetOptions::Type& dyn_setType();
    // Get instance field reference: private Firebase.Firestore.FieldPath[] fields
    [[deprecated]] ::ArrayW<::Firebase::Firestore::FieldPath*>& dyn_fields();
    // Firebase.Firestore.SetOptionsProxy get_Proxy()
    // Offset: 0xD63BF4
    ::Firebase::Firestore::SetOptionsProxy* get_Proxy();
    // static public Firebase.Firestore.SetOptions get_Overwrite()
    // Offset: 0xD521CC
    static ::Firebase::Firestore::SetOptions* get_Overwrite();
    // private System.Void .ctor(Firebase.Firestore.SetOptionsProxy proxy)
    // Offset: 0xD63B60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetOptions* New_ctor(::Firebase::Firestore::SetOptionsProxy* proxy) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Firestore::SetOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetOptions*, creationType>(proxy)));
    }
    // private System.Boolean Equals(Firebase.Firestore.SetOptions other)
    // Offset: 0xD63F84
    bool Equals(::Firebase::Firestore::SetOptions* other);
    // static private System.String <ToString>m__1(Firebase.Firestore.FieldPath f)
    // Offset: 0xD64120
    static ::StringW $ToString$m__1(::Firebase::Firestore::FieldPath* f);
    // static private System.Int32 <GetHashCode>m__2(System.Int32 current, Firebase.Firestore.FieldPath f)
    // Offset: 0xD6413C
    static int $GetHashCode$m__2(int current, ::Firebase::Firestore::FieldPath* f);
    // public override System.String ToString()
    // Offset: 0xD63C94
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xD63F14
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xD64008
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Firebase.Firestore.SetOptions
  #pragma pack(pop)
  static check_size<sizeof(SetOptions), 32 + sizeof(::ArrayW<::Firebase::Firestore::FieldPath*>)> __Firebase_Firestore_SetOptionsSizeCheck;
  static_assert(sizeof(SetOptions) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Firestore::SetOptions::Type, "Firebase.Firestore", "SetOptions/Type");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::get_Proxy
// Il2CppName: get_Proxy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::SetOptionsProxy* (Firebase::Firestore::SetOptions::*)()>(&Firebase::Firestore::SetOptions::get_Proxy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::SetOptions*), "get_Proxy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::get_Overwrite
// Il2CppName: get_Overwrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Firestore::SetOptions* (*)()>(&Firebase::Firestore::SetOptions::get_Overwrite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::SetOptions*), "get_Overwrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::SetOptions::*)(::Firebase::Firestore::SetOptions*)>(&Firebase::Firestore::SetOptions::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "SetOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::SetOptions*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::$ToString$m__1
// Il2CppName: <ToString>m__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::Firebase::Firestore::FieldPath*)>(&Firebase::Firestore::SetOptions::$ToString$m__1)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "FieldPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::SetOptions*), "<ToString>m__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::$GetHashCode$m__2
// Il2CppName: <GetHashCode>m__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, ::Firebase::Firestore::FieldPath*)>(&Firebase::Firestore::SetOptions::$GetHashCode$m__2)> {
  static const MethodInfo* get() {
    static auto* current = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* f = &::il2cpp_utils::GetClassFromName("Firebase.Firestore", "FieldPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::SetOptions*), "<GetHashCode>m__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{current, f});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Firestore::SetOptions::*)()>(&Firebase::Firestore::SetOptions::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::SetOptions*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Firestore::SetOptions::*)(::Il2CppObject*)>(&Firebase::Firestore::SetOptions::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::SetOptions*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Firestore::SetOptions::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Firestore::SetOptions::*)()>(&Firebase::Firestore::SetOptions::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Firestore::SetOptions*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
