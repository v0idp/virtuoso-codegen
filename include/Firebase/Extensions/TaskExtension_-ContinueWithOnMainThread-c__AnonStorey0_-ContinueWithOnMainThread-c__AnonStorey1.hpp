// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Extensions.TaskExtension/Firebase.Extensions.<ContinueWithOnMainThread>c__AnonStorey0
#include "Firebase/Extensions/TaskExtension_-ContinueWithOnMainThread-c__AnonStorey0.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1*, "Firebase.Extensions", "TaskExtension/<ContinueWithOnMainThread>c__AnonStorey0/<ContinueWithOnMainThread>c__AnonStorey1");
// Type namespace: Firebase.Extensions
namespace Firebase::Extensions {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Extensions.TaskExtension/Firebase.Extensions.<ContinueWithOnMainThread>c__AnonStorey0/Firebase.Extensions.<ContinueWithOnMainThread>c__AnonStorey1
  // [TokenAttribute] Offset: FFFFFFFF
  class TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1 : public ::Il2CppObject {
    public:
    public:
    // System.Threading.Tasks.Task t
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::Tasks::Task* t;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task*) == 0x8);
    // Firebase.Extensions.TaskExtension/Firebase.Extensions.<ContinueWithOnMainThread>c__AnonStorey0 <>f__ref$0
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0* $$f__ref$0;
    // Field size check
    static_assert(sizeof(::Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0*) == 0x8);
    public:
    // Get instance field reference: System.Threading.Tasks.Task t
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task*& dyn_t();
    // Get instance field reference: Firebase.Extensions.TaskExtension/Firebase.Extensions.<ContinueWithOnMainThread>c__AnonStorey0 <>f__ref$0
    [[deprecated("Use field access instead!")]] ::Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0*& dyn_$$f__ref$0();
    // public System.Void .ctor()
    // Offset: 0x190CB64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1*, creationType>()));
    }
    // System.Boolean <>m__0()
    // Offset: 0x190CB6C
    bool $$m__0();
  }; // Firebase.Extensions.TaskExtension/Firebase.Extensions.<ContinueWithOnMainThread>c__AnonStorey0/Firebase.Extensions.<ContinueWithOnMainThread>c__AnonStorey1
  #pragma pack(pop)
  static check_size<sizeof(TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1), 24 + sizeof(::Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0*)> __Firebase_Extensions_TaskExtension_$ContinueWithOnMainThread$c__AnonStorey0_$ContinueWithOnMainThread$c__AnonStorey1SizeCheck;
  static_assert(sizeof(TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1::$$m__0
// Il2CppName: <>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1::*)()>(&Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1::$$m__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Extensions::TaskExtension::$ContinueWithOnMainThread$c__AnonStorey0::$ContinueWithOnMainThread$c__AnonStorey1*), "<>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
