// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Storage
namespace Firebase::Storage {
  // Forward declaring type: StorageReferenceInternal
  class StorageReferenceInternal;
  // Forward declaring type: ControllerInternal
  class ControllerInternal;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: EventArgs
  class EventArgs;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: WeakReference
  class WeakReference;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Forward declaring type: MonitorControllerInternal
  class MonitorControllerInternal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::MonitorControllerInternal);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::MonitorControllerInternal*, "Firebase.Storage", "MonitorControllerInternal");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.MonitorControllerInternal
  // [TokenAttribute] Offset: FFFFFFFF
  class MonitorControllerInternal : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate
    class MonitorControllerEventDelegate;
    // Nested type: ::Firebase::Storage::MonitorControllerInternal::$Create$c__AnonStorey0
    class $Create$c__AnonStorey0;
    // Nested type: ::Firebase::Storage::MonitorControllerInternal::$OnPaused$c__AnonStorey1
    class $OnPaused$c__AnonStorey1;
    // Nested type: ::Firebase::Storage::MonitorControllerInternal::$OnProgress$c__AnonStorey2
    class $OnProgress$c__AnonStorey2;
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: swigCMemOwn and: Paused
    char __padding1[0x7] = {};
    // private System.EventHandler`1<System.EventArgs> Paused
    // Size: 0x8
    // Offset: 0x28
    ::System::EventHandler_1<::System::EventArgs*>* Paused;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::System::EventArgs*>*) == 0x8);
    // private System.EventHandler`1<System.EventArgs> Progress
    // Size: 0x8
    // Offset: 0x30
    ::System::EventHandler_1<::System::EventArgs*>* Progress;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::System::EventArgs*>*) == 0x8);
    // private System.Action forwardToPausedEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* forwardToPausedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action forwardToProgressEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* forwardToProgressEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private Firebase.Storage.StorageReferenceInternal storageReference
    // Size: 0x8
    // Offset: 0x48
    ::Firebase::Storage::StorageReferenceInternal* storageReference;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::StorageReferenceInternal*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.IntPtr,System.WeakReference> cPtrsToProxies
    static ::System::Collections::Generic::Dictionary_2<::System::IntPtr, ::System::WeakReference*>* _get_cPtrsToProxies();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.IntPtr,System.WeakReference> cPtrsToProxies
    static void _set_cPtrsToProxies(::System::Collections::Generic::Dictionary_2<::System::IntPtr, ::System::WeakReference*>* value);
    // Get static field: static private Firebase.Storage.MonitorControllerInternal/Firebase.Storage.MonitorControllerEventDelegate <>f__mg$cache0
    static ::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate* _get_$$f__mg$cache0();
    // Set static field: static private Firebase.Storage.MonitorControllerInternal/Firebase.Storage.MonitorControllerEventDelegate <>f__mg$cache0
    static void _set_$$f__mg$cache0(::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate* value);
    // Get static field: static private Firebase.Storage.MonitorControllerInternal/Firebase.Storage.MonitorControllerEventDelegate <>f__mg$cache1
    static ::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate* _get_$$f__mg$cache1();
    // Set static field: static private Firebase.Storage.MonitorControllerInternal/Firebase.Storage.MonitorControllerEventDelegate <>f__mg$cache1
    static void _set_$$f__mg$cache1(::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate* value);
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated("Use field access instead!")]] bool& dyn_swigCMemOwn();
    // Get instance field reference: private System.EventHandler`1<System.EventArgs> Paused
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::System::EventArgs*>*& dyn_Paused();
    // Get instance field reference: private System.EventHandler`1<System.EventArgs> Progress
    [[deprecated("Use field access instead!")]] ::System::EventHandler_1<::System::EventArgs*>*& dyn_Progress();
    // Get instance field reference: private System.Action forwardToPausedEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_forwardToPausedEvent();
    // Get instance field reference: private System.Action forwardToProgressEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_forwardToProgressEvent();
    // Get instance field reference: private Firebase.Storage.StorageReferenceInternal storageReference
    [[deprecated("Use field access instead!")]] ::Firebase::Storage::StorageReferenceInternal*& dyn_storageReference();
    // Firebase.Storage.ControllerInternal get_Controller()
    // Offset: 0x18369CC
    ::Firebase::Storage::ControllerInternal* get_Controller();
    // public System.Int64 get_BytesTransferred()
    // Offset: 0x1836B3C
    int64_t get_BytesTransferred();
    // public System.Int64 get_TotalByteCount()
    // Offset: 0x1836C60
    int64_t get_TotalByteCount();
    // public System.Void add_Progress(System.EventHandler`1<System.EventArgs> value)
    // Offset: 0x1835FC8
    void add_Progress(::System::EventHandler_1<::System::EventArgs*>* value);
    // public System.Void remove_Progress(System.EventHandler`1<System.EventArgs> value)
    // Offset: 0x1836068
    void remove_Progress(::System::EventHandler_1<::System::EventArgs*>* value);
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x1835958
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonitorControllerInternal* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::MonitorControllerInternal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonitorControllerInternal*, creationType>(cPtr, cMemoryOwn)));
    }
    // System.Void .ctor(Firebase.Storage.StorageReferenceInternal storage_reference)
    // Offset: 0x18359BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonitorControllerInternal* New_ctor(::Firebase::Storage::StorageReferenceInternal* storage_reference) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::MonitorControllerInternal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonitorControllerInternal*, creationType>(storage_reference)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1836D84
    static void _cctor();
    // static System.Runtime.InteropServices.HandleRef getCPtr(Firebase.Storage.MonitorControllerInternal obj)
    // Offset: 0x1835B6C
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::Firebase::Storage::MonitorControllerInternal* obj);
    // public System.Void Dispose()
    // Offset: 0x1835C48
    void Dispose();
    // static Firebase.Storage.MonitorControllerInternal Create(Firebase.Storage.StorageReferenceInternal storageReference)
    // Offset: 0x1836108
    static ::Firebase::Storage::MonitorControllerInternal* Create(::Firebase::Storage::StorageReferenceInternal* storageReference);
    // static private System.Void OnPaused(System.IntPtr controllerPtr)
    // Offset: 0x18357F8
    static void OnPaused(::System::IntPtr controllerPtr);
    // static private System.Void OnProgress(System.IntPtr controllerPtr)
    // Offset: 0x18358A8
    static void OnProgress(::System::IntPtr controllerPtr);
    // static private Firebase.Storage.MonitorControllerInternal ProxyFromCPtr(System.IntPtr controllerPtr)
    // Offset: 0x1836644
    static ::Firebase::Storage::MonitorControllerInternal* ProxyFromCPtr(::System::IntPtr controllerPtr);
    // public System.Void RegisterCancellationToken(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x18367F8
    void RegisterCancellationToken(::System::Threading::CancellationToken cancellationToken);
    // private System.Void SetPausedEvent(Firebase.Storage.MonitorControllerInternal/Firebase.Storage.MonitorControllerEventDelegate arg0, System.IntPtr event_data)
    // Offset: 0x18364CC
    void SetPausedEvent(::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate* arg0, ::System::IntPtr event_data);
    // private System.Void SetProgressEvent(Firebase.Storage.MonitorControllerInternal/Firebase.Storage.MonitorControllerEventDelegate arg0, System.IntPtr event_data)
    // Offset: 0x1836580
    void SetProgressEvent(::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate* arg0, ::System::IntPtr event_data);
    // private System.Void <RegisterCancellationToken>m__0()
    // Offset: 0x1836E0C
    void $RegisterCancellationToken$m__0();
    // protected override System.Void Finalize()
    // Offset: 0x1835BD8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Firebase.Storage.MonitorControllerInternal
  #pragma pack(pop)
  static check_size<sizeof(MonitorControllerInternal), 72 + sizeof(::Firebase::Storage::StorageReferenceInternal*)> __Firebase_Storage_MonitorControllerInternalSizeCheck;
  static_assert(sizeof(MonitorControllerInternal) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::get_Controller
// Il2CppName: get_Controller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::ControllerInternal* (Firebase::Storage::MonitorControllerInternal::*)()>(&Firebase::Storage::MonitorControllerInternal::get_Controller)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "get_Controller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::get_BytesTransferred
// Il2CppName: get_BytesTransferred
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Firebase::Storage::MonitorControllerInternal::*)()>(&Firebase::Storage::MonitorControllerInternal::get_BytesTransferred)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "get_BytesTransferred", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::get_TotalByteCount
// Il2CppName: get_TotalByteCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (Firebase::Storage::MonitorControllerInternal::*)()>(&Firebase::Storage::MonitorControllerInternal::get_TotalByteCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "get_TotalByteCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::add_Progress
// Il2CppName: add_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MonitorControllerInternal::*)(::System::EventHandler_1<::System::EventArgs*>*)>(&Firebase::Storage::MonitorControllerInternal::add_Progress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "EventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "add_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::remove_Progress
// Il2CppName: remove_Progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MonitorControllerInternal::*)(::System::EventHandler_1<::System::EventArgs*>*)>(&Firebase::Storage::MonitorControllerInternal::remove_Progress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "EventHandler`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "EventArgs")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "remove_Progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Storage::MonitorControllerInternal::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::Firebase::Storage::MonitorControllerInternal*)>(&Firebase::Storage::MonitorControllerInternal::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MonitorControllerInternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MonitorControllerInternal::*)()>(&Firebase::Storage::MonitorControllerInternal::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::MonitorControllerInternal* (*)(::Firebase::Storage::StorageReferenceInternal*)>(&Firebase::Storage::MonitorControllerInternal::Create)> {
  static const MethodInfo* get() {
    static auto* storageReference = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "StorageReferenceInternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storageReference});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::OnPaused
// Il2CppName: OnPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Firebase::Storage::MonitorControllerInternal::OnPaused)> {
  static const MethodInfo* get() {
    static auto* controllerPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "OnPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerPtr});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::OnProgress
// Il2CppName: OnProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Firebase::Storage::MonitorControllerInternal::OnProgress)> {
  static const MethodInfo* get() {
    static auto* controllerPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "OnProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerPtr});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::ProxyFromCPtr
// Il2CppName: ProxyFromCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::MonitorControllerInternal* (*)(::System::IntPtr)>(&Firebase::Storage::MonitorControllerInternal::ProxyFromCPtr)> {
  static const MethodInfo* get() {
    static auto* controllerPtr = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "ProxyFromCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerPtr});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::RegisterCancellationToken
// Il2CppName: RegisterCancellationToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MonitorControllerInternal::*)(::System::Threading::CancellationToken)>(&Firebase::Storage::MonitorControllerInternal::RegisterCancellationToken)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "RegisterCancellationToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::SetPausedEvent
// Il2CppName: SetPausedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MonitorControllerInternal::*)(::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate*, ::System::IntPtr)>(&Firebase::Storage::MonitorControllerInternal::SetPausedEvent)> {
  static const MethodInfo* get() {
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MonitorControllerInternal/MonitorControllerEventDelegate")->byval_arg;
    static auto* event_data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "SetPausedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg0, event_data});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::SetProgressEvent
// Il2CppName: SetProgressEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MonitorControllerInternal::*)(::Firebase::Storage::MonitorControllerInternal::MonitorControllerEventDelegate*, ::System::IntPtr)>(&Firebase::Storage::MonitorControllerInternal::SetProgressEvent)> {
  static const MethodInfo* get() {
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MonitorControllerInternal/MonitorControllerEventDelegate")->byval_arg;
    static auto* event_data = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "SetProgressEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arg0, event_data});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::$RegisterCancellationToken$m__0
// Il2CppName: <RegisterCancellationToken>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MonitorControllerInternal::*)()>(&Firebase::Storage::MonitorControllerInternal::$RegisterCancellationToken$m__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "<RegisterCancellationToken>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MonitorControllerInternal::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MonitorControllerInternal::*)()>(&Firebase::Storage::MonitorControllerInternal::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MonitorControllerInternal*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
