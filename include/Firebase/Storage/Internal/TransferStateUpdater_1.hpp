// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IProgress`1<T>
  template<typename T>
  class IProgress_1;
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Forward declaring namespace: Firebase::Storage::Internal
namespace Firebase::Storage::Internal {
  // Forward declaring type: TransferState
  class TransferState;
}
// Forward declaring namespace: Firebase::Storage
namespace Firebase::Storage {
  // Forward declaring type: MonitorControllerInternal
  class MonitorControllerInternal;
  // Forward declaring type: StorageReference
  class StorageReference;
  // Forward declaring type: StorageMetadata
  class StorageMetadata;
}
// Completed forward declares
// Type namespace: Firebase.Storage.Internal
namespace Firebase::Storage::Internal {
  // Forward declaring type: TransferStateUpdater`1<T>
  template<typename T>
  class TransferStateUpdater_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Firebase::Storage::Internal::TransferStateUpdater_1, "Firebase.Storage.Internal", "TransferStateUpdater`1");
// Type namespace: Firebase.Storage.Internal
namespace Firebase::Storage::Internal {
  // WARNING Size may be invalid!
  // Autogenerated type: Firebase.Storage.Internal.TransferStateUpdater`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class TransferStateUpdater_1 : public ::Il2CppObject {
    public:
    public:
    // private System.IProgress`1<T> handler
    // Size: 0x8
    // Offset: 0x0
    ::System::IProgress_1<T>* handler;
    // Field size check
    static_assert(sizeof(::System::IProgress_1<T>*) == 0x8);
    // private Firebase.Storage.Internal.TransferState transferState
    // Size: 0x8
    // Offset: 0x0
    ::Firebase::Storage::Internal::TransferState* transferState;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::Internal::TransferState*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6E35AC
    // private T <ProgressState>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T ProgressState;
    // [DebuggerBrowsableAttribute] Offset: 0x6E35E8
    // private Firebase.Storage.MonitorControllerInternal <MonitorController>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::Firebase::Storage::MonitorControllerInternal* MonitorController;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::MonitorControllerInternal*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.IProgress`1<T> handler
    [[deprecated("Use field access instead!")]] ::System::IProgress_1<T>*& dyn_handler() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::dyn_handler");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "handler"))->offset;
      return *reinterpret_cast<::System::IProgress_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Firebase.Storage.Internal.TransferState transferState
    [[deprecated("Use field access instead!")]] ::Firebase::Storage::Internal::TransferState*& dyn_transferState() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::dyn_transferState");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "transferState"))->offset;
      return *reinterpret_cast<::Firebase::Storage::Internal::TransferState**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T <ProgressState>k__BackingField
    [[deprecated("Use field access instead!")]] T& dyn_$ProgressState$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::dyn_$ProgressState$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ProgressState>k__BackingField"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Firebase.Storage.MonitorControllerInternal <MonitorController>k__BackingField
    [[deprecated("Use field access instead!")]] ::Firebase::Storage::MonitorControllerInternal*& dyn_$MonitorController$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::dyn_$MonitorController$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<MonitorController>k__BackingField"))->offset;
      return *reinterpret_cast<::Firebase::Storage::MonitorControllerInternal**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_ProgressState()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_ProgressState() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::get_ProgressState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ProgressState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // private System.Void set_ProgressState(T value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_ProgressState(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::set_ProgressState");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ProgressState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // Firebase.Storage.MonitorControllerInternal get_MonitorController()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Firebase::Storage::MonitorControllerInternal* get_MonitorController() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::get_MonitorController");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MonitorController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Firebase::Storage::MonitorControllerInternal*, false>(this, ___internal__method);
    }
    // private System.Void set_MonitorController(Firebase.Storage.MonitorControllerInternal value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_MonitorController(::Firebase::Storage::MonitorControllerInternal* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::set_MonitorController");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_MonitorController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(Firebase.Storage.StorageReference storageReference, System.IProgress`1<T> progressHandler, T progressState, Firebase.Storage.Internal.TransferState progressStateBackingStore)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransferStateUpdater_1<T>* New_ctor(::Firebase::Storage::StorageReference* storageReference, ::System::IProgress_1<T>* progressHandler, T progressState, ::Firebase::Storage::Internal::TransferState* progressStateBackingStore) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransferStateUpdater_1<T>*, creationType>(storageReference, progressHandler, progressState, progressStateBackingStore)));
    }
    // public System.Void SetMetadata(Firebase.Storage.StorageMetadata metadata)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetMetadata(::Firebase::Storage::StorageMetadata* metadata) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::SetMetadata");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMetadata", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(metadata)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, metadata);
    }
    // private System.Void <TransferStateUpdater>m__0(System.Object sender, System.EventArgs eventArgs)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $TransferStateUpdater$m__0(::Il2CppObject* sender, ::System::EventArgs* eventArgs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::Internal::TransferStateUpdater_1::<TransferStateUpdater>m__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<TransferStateUpdater>m__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(eventArgs)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sender, eventArgs);
    }
  }; // Firebase.Storage.Internal.TransferStateUpdater`1
  // Could not write size check! Type: Firebase.Storage.Internal.TransferStateUpdater`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
