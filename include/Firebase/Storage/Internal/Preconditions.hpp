// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Firebase.Storage.Internal
namespace Firebase::Storage::Internal {
  // Forward declaring type: Preconditions
  class Preconditions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::Internal::Preconditions);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::Internal::Preconditions*, "Firebase.Storage.Internal", "Preconditions");
// Type namespace: Firebase.Storage.Internal
namespace Firebase::Storage::Internal {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.Internal.Preconditions
  // [TokenAttribute] Offset: FFFFFFFF
  class Preconditions : public ::Il2CppObject {
    public:
    // static public System.Void CheckArgument(System.Boolean expression, System.String errorMessage)
    // Offset: 0x1836E28
    static void CheckArgument(bool expression, ::StringW errorMessage);
  }; // Firebase.Storage.Internal.Preconditions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::Internal::Preconditions::CheckArgument
// Il2CppName: CheckArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ::StringW)>(&Firebase::Storage::Internal::Preconditions::CheckArgument)> {
  static const MethodInfo* get() {
    static auto* expression = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* errorMessage = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::Internal::Preconditions*), "CheckArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expression, errorMessage});
  }
};
