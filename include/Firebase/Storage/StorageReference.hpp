// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Storage
namespace Firebase::Storage {
  // Forward declaring type: FirebaseStorage
  class FirebaseStorage;
  // Forward declaring type: StorageReferenceInternal
  class StorageReferenceInternal;
  // Forward declaring type: MetadataInternal
  class MetadataInternal;
  // Forward declaring type: MonitorControllerInternal
  class MonitorControllerInternal;
  // Forward declaring type: StorageMetadata
  class StorageMetadata;
  // Forward declaring type: MetadataChange
  class MetadataChange;
  // Forward declaring type: UploadState
  class UploadState;
  // Forward declaring type: DownloadState
  class DownloadState;
}
// Forward declaring namespace: Firebase::Storage::Internal
namespace Firebase::Storage::Internal {
  // Forward declaring type: ModuleLogger
  class ModuleLogger;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: IProgress`1<T>
  template<typename T>
  class IProgress_1;
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Forward declaring type: StorageReference
  class StorageReference;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::StorageReference);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::StorageReference*, "Firebase.Storage", "StorageReference");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.StorageReference
  // [TokenAttribute] Offset: FFFFFFFF
  class StorageReference : public ::Il2CppObject {
    public:
    // Nested type: ::Firebase::Storage::StorageReference::TaskCompletionStatus
    class TaskCompletionStatus;
    // Nested type: ::Firebase::Storage::StorageReference::$PutFileUsingMonitorControllerAsync$c__AnonStorey3
    class $PutFileUsingMonitorControllerAsync$c__AnonStorey3;
    // Nested type: ::Firebase::Storage::StorageReference::$PutFileAsync$c__AnonStorey4
    class $PutFileAsync$c__AnonStorey4;
    // Nested type: ::Firebase::Storage::StorageReference::$PutFileAsync$c__AnonStorey6
    class $PutFileAsync$c__AnonStorey6;
    // Nested type: ::Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11
    class $GetFileUsingMonitorControllerAsync$c__AnonStorey11;
    // Nested type: ::Firebase::Storage::StorageReference::$DeleteAsync$c__AnonStorey15
    class $DeleteAsync$c__AnonStorey15;
    public:
    // private readonly Firebase.Storage.FirebaseStorage firebaseStorage
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Storage::FirebaseStorage* firebaseStorage;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::FirebaseStorage*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6E33BC
    // private Firebase.Storage.Internal.ModuleLogger <Logger>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::Storage::Internal::ModuleLogger* Logger;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::Internal::ModuleLogger*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6E33F8
    // private Firebase.Storage.StorageReferenceInternal <Internal>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Firebase::Storage::StorageReferenceInternal* Internal;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::StorageReferenceInternal*) == 0x8);
    public:
    // Get static field: static private System.Func`2<System.Threading.Tasks.Task,System.Threading.Tasks.Task> <>f__am$cache0
    static ::System::Func_2<::System::Threading::Tasks::Task*, ::System::Threading::Tasks::Task*>* _get_$$f__am$cache0();
    // Set static field: static private System.Func`2<System.Threading.Tasks.Task,System.Threading.Tasks.Task> <>f__am$cache0
    static void _set_$$f__am$cache0(::System::Func_2<::System::Threading::Tasks::Task*, ::System::Threading::Tasks::Task*>* value);
    // Get instance field reference: private readonly Firebase.Storage.FirebaseStorage firebaseStorage
    [[deprecated]] ::Firebase::Storage::FirebaseStorage*& dyn_firebaseStorage();
    // Get instance field reference: private Firebase.Storage.Internal.ModuleLogger <Logger>k__BackingField
    [[deprecated]] ::Firebase::Storage::Internal::ModuleLogger*& dyn_$Logger$k__BackingField();
    // Get instance field reference: private Firebase.Storage.StorageReferenceInternal <Internal>k__BackingField
    [[deprecated]] ::Firebase::Storage::StorageReferenceInternal*& dyn_$Internal$k__BackingField();
    // Firebase.Storage.Internal.ModuleLogger get_Logger()
    // Offset: 0x1837E60
    ::Firebase::Storage::Internal::ModuleLogger* get_Logger();
    // private System.Void set_Logger(Firebase.Storage.Internal.ModuleLogger value)
    // Offset: 0x1837E68
    void set_Logger(::Firebase::Storage::Internal::ModuleLogger* value);
    // public System.String get_Path()
    // Offset: 0x1837E70
    ::StringW get_Path();
    // public System.String get_Bucket()
    // Offset: 0x1837F2C
    ::StringW get_Bucket();
    // Firebase.Storage.StorageReferenceInternal get_Internal()
    // Offset: 0x183902C
    ::Firebase::Storage::StorageReferenceInternal* get_Internal();
    // private System.Void set_Internal(Firebase.Storage.StorageReferenceInternal value)
    // Offset: 0x1839034
    void set_Internal(::Firebase::Storage::StorageReferenceInternal* value);
    // System.Void .ctor(Firebase.Storage.FirebaseStorage storage, Firebase.Storage.StorageReferenceInternal storageReferenceInternal)
    // Offset: 0x1831690
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StorageReference* New_ctor(::Firebase::Storage::FirebaseStorage* storage, ::Firebase::Storage::StorageReferenceInternal* storageReferenceInternal) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::StorageReference::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StorageReference*, creationType>(storage, storageReferenceInternal)));
    }
    // public Firebase.Storage.StorageReference Child(System.String pathString)
    // Offset: 0x1837FE8
    ::Firebase::Storage::StorageReference* Child(::StringW pathString);
    // System.Threading.Tasks.Task`1<Firebase.Storage.MetadataInternal> PutFileUsingMonitorControllerAsync(System.String path, Firebase.Storage.MetadataInternal metadata, Firebase.Storage.MonitorControllerInternal monitorController, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1838158
    ::System::Threading::Tasks::Task_1<::Firebase::Storage::MetadataInternal*>* PutFileUsingMonitorControllerAsync(::StringW path, ::Firebase::Storage::MetadataInternal* metadata, ::Firebase::Storage::MonitorControllerInternal* monitorController, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<Firebase.Storage.StorageMetadata> PutFileAsync(System.String filePath, Firebase.Storage.MetadataChange customMetadata, System.IProgress`1<Firebase.Storage.UploadState> progressHandler, System.Threading.CancellationToken cancelToken, System.Uri previousSessionUri)
    // Offset: 0x1838418
    ::System::Threading::Tasks::Task_1<::Firebase::Storage::StorageMetadata*>* PutFileAsync(::StringW filePath, ::Firebase::Storage::MetadataChange* customMetadata, ::System::IProgress_1<::Firebase::Storage::UploadState*>* progressHandler, ::System::Threading::CancellationToken cancelToken, ::System::Uri* previousSessionUri);
    // private System.Threading.Tasks.Task`1<System.Int64> GetFileUsingMonitorControllerAsync(System.String path, Firebase.Storage.MonitorControllerInternal monitorController, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x18388AC
    ::System::Threading::Tasks::Task_1<int64_t>* GetFileUsingMonitorControllerAsync(::StringW path, ::Firebase::Storage::MonitorControllerInternal* monitorController, ::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task GetFileAsync(System.String destinationFilePath, System.IProgress`1<Firebase.Storage.DownloadState> progressHandler, System.Threading.CancellationToken cancelToken)
    // Offset: 0x1838B40
    ::System::Threading::Tasks::Task* GetFileAsync(::StringW destinationFilePath, ::System::IProgress_1<::Firebase::Storage::DownloadState*>* progressHandler, ::System::Threading::CancellationToken cancelToken);
    // public System.Threading.Tasks.Task DeleteAsync()
    // Offset: 0x1838D04
    ::System::Threading::Tasks::Task* DeleteAsync();
    // private O CompleteTask(System.Threading.Tasks.Task`1<I> task, System.Threading.Tasks.TaskCompletionSource`1<O> completionSource, System.Func`1<O> getResult, System.String operationDescription, System.Boolean setCompletionSourceResult)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class I, class O>
    O CompleteTask(::System::Threading::Tasks::Task_1<I>* task, ::System::Threading::Tasks::TaskCompletionSource_1<O>* completionSource, ::System::Func_1<O>* getResult, ::StringW operationDescription, bool setCompletionSourceResult) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::StorageReference::CompleteTask");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompleteTask", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<I>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<O>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(task), ::il2cpp_utils::ExtractType(completionSource), ::il2cpp_utils::ExtractType(getResult), ::il2cpp_utils::ExtractType(operationDescription), ::il2cpp_utils::ExtractType(setCompletionSourceResult)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<I>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<O>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<O, false>(this, ___generic__method, task, completionSource, getResult, operationDescription, setCompletionSourceResult);
    }
    // private System.Threading.Tasks.Task <GetFileAsync>m__0(System.Threading.Tasks.Task`1<System.Int64> task)
    // Offset: 0x183903C
    ::System::Threading::Tasks::Task* $GetFileAsync$m__0(::System::Threading::Tasks::Task_1<int64_t>* task);
    // static private System.Threading.Tasks.Task <DeleteAsync>m__1(System.Threading.Tasks.Task task)
    // Offset: 0x183945C
    static ::System::Threading::Tasks::Task* $DeleteAsync$m__1(::System::Threading::Tasks::Task* task);
    // public override System.String ToString()
    // Offset: 0x1838ED8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0x1838F54
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1839000
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // Firebase.Storage.StorageReference
  #pragma pack(pop)
  static check_size<sizeof(StorageReference), 32 + sizeof(::Firebase::Storage::StorageReferenceInternal*)> __Firebase_Storage_StorageReferenceSizeCheck;
  static_assert(sizeof(StorageReference) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::get_Logger
// Il2CppName: get_Logger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::Internal::ModuleLogger* (Firebase::Storage::StorageReference::*)()>(&Firebase::Storage::StorageReference::get_Logger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "get_Logger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::set_Logger
// Il2CppName: set_Logger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageReference::*)(::Firebase::Storage::Internal::ModuleLogger*)>(&Firebase::Storage::StorageReference::set_Logger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Firebase.Storage.Internal", "ModuleLogger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "set_Logger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::get_Path
// Il2CppName: get_Path
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Storage::StorageReference::*)()>(&Firebase::Storage::StorageReference::get_Path)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "get_Path", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::get_Bucket
// Il2CppName: get_Bucket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Storage::StorageReference::*)()>(&Firebase::Storage::StorageReference::get_Bucket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "get_Bucket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::get_Internal
// Il2CppName: get_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::StorageReferenceInternal* (Firebase::Storage::StorageReference::*)()>(&Firebase::Storage::StorageReference::get_Internal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "get_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::set_Internal
// Il2CppName: set_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageReference::*)(::Firebase::Storage::StorageReferenceInternal*)>(&Firebase::Storage::StorageReference::set_Internal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "StorageReferenceInternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "set_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::Child
// Il2CppName: Child
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::StorageReference* (Firebase::Storage::StorageReference::*)(::StringW)>(&Firebase::Storage::StorageReference::Child)> {
  static const MethodInfo* get() {
    static auto* pathString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "Child", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pathString});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::PutFileUsingMonitorControllerAsync
// Il2CppName: PutFileUsingMonitorControllerAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Firebase::Storage::MetadataInternal*>* (Firebase::Storage::StorageReference::*)(::StringW, ::Firebase::Storage::MetadataInternal*, ::Firebase::Storage::MonitorControllerInternal*, ::System::Threading::CancellationToken)>(&Firebase::Storage::StorageReference::PutFileUsingMonitorControllerAsync)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* metadata = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MetadataInternal")->byval_arg;
    static auto* monitorController = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MonitorControllerInternal")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "PutFileUsingMonitorControllerAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, metadata, monitorController, cancellationToken});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::PutFileAsync
// Il2CppName: PutFileAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Firebase::Storage::StorageMetadata*>* (Firebase::Storage::StorageReference::*)(::StringW, ::Firebase::Storage::MetadataChange*, ::System::IProgress_1<::Firebase::Storage::UploadState*>*, ::System::Threading::CancellationToken, ::System::Uri*)>(&Firebase::Storage::StorageReference::PutFileAsync)> {
  static const MethodInfo* get() {
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* customMetadata = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MetadataChange")->byval_arg;
    static auto* progressHandler = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "IProgress`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Firebase.Storage", "UploadState")})->byval_arg;
    static auto* cancelToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    static auto* previousSessionUri = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "PutFileAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filePath, customMetadata, progressHandler, cancelToken, previousSessionUri});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::GetFileUsingMonitorControllerAsync
// Il2CppName: GetFileUsingMonitorControllerAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<int64_t>* (Firebase::Storage::StorageReference::*)(::StringW, ::Firebase::Storage::MonitorControllerInternal*, ::System::Threading::CancellationToken)>(&Firebase::Storage::StorageReference::GetFileUsingMonitorControllerAsync)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* monitorController = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MonitorControllerInternal")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "GetFileUsingMonitorControllerAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, monitorController, cancellationToken});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::GetFileAsync
// Il2CppName: GetFileAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Firebase::Storage::StorageReference::*)(::StringW, ::System::IProgress_1<::Firebase::Storage::DownloadState*>*, ::System::Threading::CancellationToken)>(&Firebase::Storage::StorageReference::GetFileAsync)> {
  static const MethodInfo* get() {
    static auto* destinationFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* progressHandler = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "IProgress`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Firebase.Storage", "DownloadState")})->byval_arg;
    static auto* cancelToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "GetFileAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destinationFilePath, progressHandler, cancelToken});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::DeleteAsync
// Il2CppName: DeleteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Firebase::Storage::StorageReference::*)()>(&Firebase::Storage::StorageReference::DeleteAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "DeleteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::CompleteTask
// Il2CppName: CompleteTask
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::$GetFileAsync$m__0
// Il2CppName: <GetFileAsync>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Firebase::Storage::StorageReference::*)(::System::Threading::Tasks::Task_1<int64_t>*)>(&Firebase::Storage::StorageReference::$GetFileAsync$m__0)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int64")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "<GetFileAsync>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::$DeleteAsync$m__1
// Il2CppName: <DeleteAsync>m__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (*)(::System::Threading::Tasks::Task*)>(&Firebase::Storage::StorageReference::$DeleteAsync$m__1)> {
  static const MethodInfo* get() {
    static auto* task = &::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "<DeleteAsync>m__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{task});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Storage::StorageReference::*)()>(&Firebase::Storage::StorageReference::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Storage::StorageReference::*)(::Il2CppObject*)>(&Firebase::Storage::StorageReference::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Storage::StorageReference::*)()>(&Firebase::Storage::StorageReference::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
