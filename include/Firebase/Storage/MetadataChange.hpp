// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Storage
namespace Firebase::Storage {
  // Forward declaring type: StorageMetadata
  class StorageMetadata;
}
// Completed forward declares
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Forward declaring type: MetadataChange
  class MetadataChange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::MetadataChange);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::MetadataChange*, "Firebase.Storage", "MetadataChange");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.MetadataChange
  // [TokenAttribute] Offset: FFFFFFFF
  class MetadataChange : public ::Il2CppObject {
    public:
    public:
    // private readonly Firebase.Storage.StorageMetadata metadata
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Storage::StorageMetadata* metadata;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::StorageMetadata*) == 0x8);
    public:
    // Creating conversion operator: operator ::Firebase::Storage::StorageMetadata*
    constexpr operator ::Firebase::Storage::StorageMetadata*() const noexcept {
      return metadata;
    }
    // Get instance field reference: private readonly Firebase.Storage.StorageMetadata metadata
    [[deprecated("Use field access instead!")]] ::Firebase::Storage::StorageMetadata*& dyn_metadata();
    // public System.Void set_ContentType(System.String value)
    // Offset: 0x1834B44
    void set_ContentType(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x1834980
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MetadataChange* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::MetadataChange::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MetadataChange*, creationType>()));
    }
    // Firebase.Storage.StorageMetadata Build()
    // Offset: 0x1834A90
    ::Firebase::Storage::StorageMetadata* Build();
    // static Firebase.Storage.StorageMetadata Build(Firebase.Storage.MetadataChange metadataChange)
    // Offset: 0x1834B38
    static ::Firebase::Storage::StorageMetadata* Build(::Firebase::Storage::MetadataChange* metadataChange);
  }; // Firebase.Storage.MetadataChange
  #pragma pack(pop)
  static check_size<sizeof(MetadataChange), 16 + sizeof(::Firebase::Storage::StorageMetadata*)> __Firebase_Storage_MetadataChangeSizeCheck;
  static_assert(sizeof(MetadataChange) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::MetadataChange::set_ContentType
// Il2CppName: set_ContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::MetadataChange::*)(::StringW)>(&Firebase::Storage::MetadataChange::set_ContentType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MetadataChange*), "set_ContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MetadataChange::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::MetadataChange::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::StorageMetadata* (Firebase::Storage::MetadataChange::*)()>(&Firebase::Storage::MetadataChange::Build)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MetadataChange*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::MetadataChange::Build
// Il2CppName: Build
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::StorageMetadata* (*)(::Firebase::Storage::MetadataChange*)>(&Firebase::Storage::MetadataChange::Build)> {
  static const MethodInfo* get() {
    static auto* metadataChange = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MetadataChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::MetadataChange*), "Build", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{metadataChange});
  }
};
