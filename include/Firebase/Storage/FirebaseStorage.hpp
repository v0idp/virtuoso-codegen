// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Storage
namespace Firebase::Storage {
  // Forward declaring type: FirebaseStorageInternal
  class FirebaseStorageInternal;
  // Forward declaring type: StorageReference
  class StorageReference;
}
// Forward declaring namespace: Firebase
namespace Firebase {
  // Forward declaring type: FirebaseApp
  class FirebaseApp;
}
// Forward declaring namespace: Firebase::Storage::Internal
namespace Firebase::Storage::Internal {
  // Forward declaring type: ModuleLogger
  class ModuleLogger;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Completed forward declares
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Forward declaring type: FirebaseStorage
  class FirebaseStorage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::FirebaseStorage);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::FirebaseStorage*, "Firebase.Storage", "FirebaseStorage");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.FirebaseStorage
  // [TokenAttribute] Offset: FFFFFFFF
  class FirebaseStorage : public ::Il2CppObject {
    public:
    public:
    // private Firebase.Storage.FirebaseStorageInternal storageInternal
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Storage::FirebaseStorageInternal* storageInternal;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::FirebaseStorageInternal*) == 0x8);
    // private readonly Firebase.FirebaseApp firebaseApp
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::FirebaseApp* firebaseApp;
    // Field size check
    static_assert(sizeof(::Firebase::FirebaseApp*) == 0x8);
    // private System.String instanceKey
    // Size: 0x8
    // Offset: 0x20
    ::StringW instanceKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6E3750
    // private Firebase.Storage.Internal.ModuleLogger <Logger>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Firebase::Storage::Internal::ModuleLogger* Logger;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::Internal::ModuleLogger*) == 0x8);
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,Firebase.Storage.FirebaseStorage> storageByInstanceKey
    static ::System::Collections::Generic::Dictionary_2<::StringW, ::Firebase::Storage::FirebaseStorage*>* _get_storageByInstanceKey();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.String,Firebase.Storage.FirebaseStorage> storageByInstanceKey
    static void _set_storageByInstanceKey(::System::Collections::Generic::Dictionary_2<::StringW, ::Firebase::Storage::FirebaseStorage*>* value);
    // Get static field: static private readonly Firebase.Storage.Internal.ModuleLogger logger
    static ::Firebase::Storage::Internal::ModuleLogger* _get_logger();
    // Set static field: static private readonly Firebase.Storage.Internal.ModuleLogger logger
    static void _set_logger(::Firebase::Storage::Internal::ModuleLogger* value);
    // Get instance field reference: private Firebase.Storage.FirebaseStorageInternal storageInternal
    [[deprecated]] ::Firebase::Storage::FirebaseStorageInternal*& dyn_storageInternal();
    // Get instance field reference: private readonly Firebase.FirebaseApp firebaseApp
    [[deprecated]] ::Firebase::FirebaseApp*& dyn_firebaseApp();
    // Get instance field reference: private System.String instanceKey
    [[deprecated]] ::StringW& dyn_instanceKey();
    // Get instance field reference: private Firebase.Storage.Internal.ModuleLogger <Logger>k__BackingField
    [[deprecated]] ::Firebase::Storage::Internal::ModuleLogger*& dyn_$Logger$k__BackingField();
    // Firebase.Storage.Internal.ModuleLogger get_Logger()
    // Offset: 0x18313A4
    ::Firebase::Storage::Internal::ModuleLogger* get_Logger();
    // private System.Void set_Logger(Firebase.Storage.Internal.ModuleLogger value)
    // Offset: 0x18313AC
    void set_Logger(::Firebase::Storage::Internal::ModuleLogger* value);
    // static public Firebase.Storage.FirebaseStorage get_DefaultInstance()
    // Offset: 0x18313B4
    static ::Firebase::Storage::FirebaseStorage* get_DefaultInstance();
    // public Firebase.Storage.StorageReference get_RootReference()
    // Offset: 0x1831534
    ::Firebase::Storage::StorageReference* get_RootReference();
    // private System.Void .ctor(Firebase.Storage.FirebaseStorageInternal storage, Firebase.FirebaseApp app)
    // Offset: 0x1830840
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FirebaseStorage* New_ctor(::Firebase::Storage::FirebaseStorageInternal* storage, ::Firebase::FirebaseApp* app) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::FirebaseStorage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FirebaseStorage*, creationType>(storage, app)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1831E64
    static void _cctor();
    // private System.Void Dispose()
    // Offset: 0x1831010
    void Dispose();
    // private System.Void OnAppDisposed(System.Object sender, System.EventArgs eventArgs)
    // Offset: 0x1831290
    void OnAppDisposed(::Il2CppObject* sender, ::System::EventArgs* eventArgs);
    // private System.Void ThrowIfNull()
    // Offset: 0x1831314
    void ThrowIfNull();
    // static public Firebase.Storage.FirebaseStorage GetInstance(Firebase.FirebaseApp app, System.String url)
    // Offset: 0x1831450
    static ::Firebase::Storage::FirebaseStorage* GetInstance(::Firebase::FirebaseApp* app, ::StringW url);
    // static private Firebase.Storage.FirebaseStorage FindByKey(System.String instanceKey)
    // Offset: 0x1831B14
    static ::Firebase::Storage::FirebaseStorage* FindByKey(::StringW instanceKey);
    // static private Firebase.Storage.FirebaseStorage GetInstanceInternal(Firebase.FirebaseApp app, System.String bucketUrl)
    // Offset: 0x183175C
    static ::Firebase::Storage::FirebaseStorage* GetInstanceInternal(::Firebase::FirebaseApp* app, ::StringW bucketUrl);
    // protected override System.Void Finalize()
    // Offset: 0x1830F50
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Firebase.Storage.FirebaseStorage
  #pragma pack(pop)
  static check_size<sizeof(FirebaseStorage), 40 + sizeof(::Firebase::Storage::Internal::ModuleLogger*)> __Firebase_Storage_FirebaseStorageSizeCheck;
  static_assert(sizeof(FirebaseStorage) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::get_Logger
// Il2CppName: get_Logger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::Internal::ModuleLogger* (Firebase::Storage::FirebaseStorage::*)()>(&Firebase::Storage::FirebaseStorage::get_Logger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "get_Logger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::set_Logger
// Il2CppName: set_Logger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::FirebaseStorage::*)(::Firebase::Storage::Internal::ModuleLogger*)>(&Firebase::Storage::FirebaseStorage::set_Logger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Firebase.Storage.Internal", "ModuleLogger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "set_Logger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::get_DefaultInstance
// Il2CppName: get_DefaultInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::FirebaseStorage* (*)()>(&Firebase::Storage::FirebaseStorage::get_DefaultInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "get_DefaultInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::get_RootReference
// Il2CppName: get_RootReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::StorageReference* (Firebase::Storage::FirebaseStorage::*)()>(&Firebase::Storage::FirebaseStorage::get_RootReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "get_RootReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Storage::FirebaseStorage::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::FirebaseStorage::*)()>(&Firebase::Storage::FirebaseStorage::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::OnAppDisposed
// Il2CppName: OnAppDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::FirebaseStorage::*)(::Il2CppObject*, ::System::EventArgs*)>(&Firebase::Storage::FirebaseStorage::OnAppDisposed)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* eventArgs = &::il2cpp_utils::GetClassFromName("System", "EventArgs")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "OnAppDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, eventArgs});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::ThrowIfNull
// Il2CppName: ThrowIfNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::FirebaseStorage::*)()>(&Firebase::Storage::FirebaseStorage::ThrowIfNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "ThrowIfNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::GetInstance
// Il2CppName: GetInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::FirebaseStorage* (*)(::Firebase::FirebaseApp*, ::StringW)>(&Firebase::Storage::FirebaseStorage::GetInstance)> {
  static const MethodInfo* get() {
    static auto* app = &::il2cpp_utils::GetClassFromName("Firebase", "FirebaseApp")->byval_arg;
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "GetInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{app, url});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::FindByKey
// Il2CppName: FindByKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::FirebaseStorage* (*)(::StringW)>(&Firebase::Storage::FirebaseStorage::FindByKey)> {
  static const MethodInfo* get() {
    static auto* instanceKey = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "FindByKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceKey});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::GetInstanceInternal
// Il2CppName: GetInstanceInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::FirebaseStorage* (*)(::Firebase::FirebaseApp*, ::StringW)>(&Firebase::Storage::FirebaseStorage::GetInstanceInternal)> {
  static const MethodInfo* get() {
    static auto* app = &::il2cpp_utils::GetClassFromName("Firebase", "FirebaseApp")->byval_arg;
    static auto* bucketUrl = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "GetInstanceInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{app, bucketUrl});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::FirebaseStorage::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::FirebaseStorage::*)()>(&Firebase::Storage::FirebaseStorage::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::FirebaseStorage*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
