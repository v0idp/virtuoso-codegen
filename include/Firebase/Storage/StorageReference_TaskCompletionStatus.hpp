// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Storage.StorageReference
#include "Firebase/Storage/StorageReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: Firebase::Storage::Internal
namespace Firebase::Storage::Internal {
  // Forward declaring type: ModuleLogger
  class ModuleLogger;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::StorageReference::TaskCompletionStatus);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::StorageReference::TaskCompletionStatus*, "Firebase.Storage", "StorageReference/TaskCompletionStatus");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.StorageReference/Firebase.Storage.TaskCompletionStatus
  // [TokenAttribute] Offset: FFFFFFFF
  class StorageReference::TaskCompletionStatus : public ::Il2CppObject {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x6E3444
    // private System.Boolean <IsSuccessful>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool IsSuccessful;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [DebuggerBrowsableAttribute] Offset: 0x6E3480
    // private System.Boolean <IsCanceled>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool IsCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsCanceled and: Exception
    char __padding1[0x6] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x6E34BC
    // private System.Exception <Exception>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::System::Exception* Exception;
    // Field size check
    static_assert(sizeof(::System::Exception*) == 0x8);
    public:
    // Get instance field reference: private System.Boolean <IsSuccessful>k__BackingField
    [[deprecated]] bool& dyn_$IsSuccessful$k__BackingField();
    // Get instance field reference: private System.Boolean <IsCanceled>k__BackingField
    [[deprecated]] bool& dyn_$IsCanceled$k__BackingField();
    // Get instance field reference: private System.Exception <Exception>k__BackingField
    [[deprecated]] ::System::Exception*& dyn_$Exception$k__BackingField();
    // public System.Boolean get_IsSuccessful()
    // Offset: 0x183B9E0
    bool get_IsSuccessful();
    // private System.Void set_IsSuccessful(System.Boolean value)
    // Offset: 0x183B9E8
    void set_IsSuccessful(bool value);
    // public System.Boolean get_IsCanceled()
    // Offset: 0x183B9F4
    bool get_IsCanceled();
    // private System.Void set_IsCanceled(System.Boolean value)
    // Offset: 0x183B9FC
    void set_IsCanceled(bool value);
    // public System.Exception get_Exception()
    // Offset: 0x183BA08
    ::System::Exception* get_Exception();
    // private System.Void set_Exception(System.Exception value)
    // Offset: 0x183BA10
    void set_Exception(::System::Exception* value);
    // public System.Void .ctor(System.Threading.Tasks.Task task, System.String operationDescription, Firebase.Storage.Internal.ModuleLogger logger)
    // Offset: 0x18390CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StorageReference::TaskCompletionStatus* New_ctor(::System::Threading::Tasks::Task* task, ::StringW operationDescription, ::Firebase::Storage::Internal::ModuleLogger* logger) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::StorageReference::TaskCompletionStatus::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StorageReference::TaskCompletionStatus*, creationType>(task, operationDescription, logger)));
    }
    // public System.Threading.Tasks.Task ToTask()
    // Offset: 0x1839350
    ::System::Threading::Tasks::Task* ToTask();
  }; // Firebase.Storage.StorageReference/Firebase.Storage.TaskCompletionStatus
  #pragma pack(pop)
  static check_size<sizeof(StorageReference::TaskCompletionStatus), 24 + sizeof(::System::Exception*)> __Firebase_Storage_StorageReference_TaskCompletionStatusSizeCheck;
  static_assert(sizeof(StorageReference::TaskCompletionStatus) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::TaskCompletionStatus::get_IsSuccessful
// Il2CppName: get_IsSuccessful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Storage::StorageReference::TaskCompletionStatus::*)()>(&Firebase::Storage::StorageReference::TaskCompletionStatus::get_IsSuccessful)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference::TaskCompletionStatus*), "get_IsSuccessful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::TaskCompletionStatus::set_IsSuccessful
// Il2CppName: set_IsSuccessful
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageReference::TaskCompletionStatus::*)(bool)>(&Firebase::Storage::StorageReference::TaskCompletionStatus::set_IsSuccessful)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference::TaskCompletionStatus*), "set_IsSuccessful", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::TaskCompletionStatus::get_IsCanceled
// Il2CppName: get_IsCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Storage::StorageReference::TaskCompletionStatus::*)()>(&Firebase::Storage::StorageReference::TaskCompletionStatus::get_IsCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference::TaskCompletionStatus*), "get_IsCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::TaskCompletionStatus::set_IsCanceled
// Il2CppName: set_IsCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageReference::TaskCompletionStatus::*)(bool)>(&Firebase::Storage::StorageReference::TaskCompletionStatus::set_IsCanceled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference::TaskCompletionStatus*), "set_IsCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::TaskCompletionStatus::get_Exception
// Il2CppName: get_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (Firebase::Storage::StorageReference::TaskCompletionStatus::*)()>(&Firebase::Storage::StorageReference::TaskCompletionStatus::get_Exception)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference::TaskCompletionStatus*), "get_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::TaskCompletionStatus::set_Exception
// Il2CppName: set_Exception
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageReference::TaskCompletionStatus::*)(::System::Exception*)>(&Firebase::Storage::StorageReference::TaskCompletionStatus::set_Exception)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference::TaskCompletionStatus*), "set_Exception", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::TaskCompletionStatus::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::TaskCompletionStatus::ToTask
// Il2CppName: ToTask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Firebase::Storage::StorageReference::TaskCompletionStatus::*)()>(&Firebase::Storage::StorageReference::TaskCompletionStatus::ToTask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference::TaskCompletionStatus*), "ToTask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
