// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: Firebase.Storage.ErrorInternal
#include "Firebase/Storage/ErrorInternal.hpp"
// Including type: System.Net.HttpStatusCode
#include "System/Net/HttpStatusCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
}
// Completed forward declares
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Forward declaring type: StorageException
  class StorageException;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::StorageException);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::StorageException*, "Firebase.Storage", "StorageException");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.StorageException
  // [TokenAttribute] Offset: FFFFFFFF
  class StorageException : public ::System::Exception {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x6E34F8
    // private System.Int32 <ErrorCode>k__BackingField
    // Size: 0x4
    // Offset: 0x88
    int ErrorCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x6E3534
    // private System.Int32 <HttpResultCode>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    int HttpResultCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<Firebase.Storage.ErrorInternal,System.Tuple`2<System.Int32,System.Net.HttpStatusCode>> errorToStorageErrorAndHttpStatusCode
    static ::System::Collections::Generic::Dictionary_2<::Firebase::Storage::ErrorInternal, ::System::Tuple_2<int, ::System::Net::HttpStatusCode>*>* _get_errorToStorageErrorAndHttpStatusCode();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<Firebase.Storage.ErrorInternal,System.Tuple`2<System.Int32,System.Net.HttpStatusCode>> errorToStorageErrorAndHttpStatusCode
    static void _set_errorToStorageErrorAndHttpStatusCode(::System::Collections::Generic::Dictionary_2<::Firebase::Storage::ErrorInternal, ::System::Tuple_2<int, ::System::Net::HttpStatusCode>*>* value);
    // Get static field: static private readonly System.Tuple`2<System.Int32,System.Net.HttpStatusCode> unknownError
    static ::System::Tuple_2<int, ::System::Net::HttpStatusCode>* _get_unknownError();
    // Set static field: static private readonly System.Tuple`2<System.Int32,System.Net.HttpStatusCode> unknownError
    static void _set_unknownError(::System::Tuple_2<int, ::System::Net::HttpStatusCode>* value);
    // Get instance field reference: private System.Int32 <ErrorCode>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ErrorCode$k__BackingField();
    // Get instance field reference: private System.Int32 <HttpResultCode>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$HttpResultCode$k__BackingField();
    // public System.Int32 get_ErrorCode()
    // Offset: 0x1837500
    int get_ErrorCode();
    // private System.Void set_ErrorCode(System.Int32 value)
    // Offset: 0x1837508
    void set_ErrorCode(int value);
    // private System.Void set_HttpResultCode(System.Int32 value)
    // Offset: 0x1837510
    void set_HttpResultCode(int value);
    // System.Void .ctor(System.Int32 errorCode, System.Int32 httpResultCode, System.String errorMessage)
    // Offset: 0x1836E78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StorageException* New_ctor(int errorCode, int httpResultCode, ::StringW errorMessage) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::StorageException::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StorageException*, creationType>(errorCode, httpResultCode, errorMessage)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1837518
    static void _cctor();
    // static Firebase.Storage.StorageException CreateFromException(System.Exception exception)
    // Offset: 0x18370B4
    static ::Firebase::Storage::StorageException* CreateFromException(::System::Exception* exception);
    // static System.String GetErrorMessageForCode(System.Int32 errorCode)
    // Offset: 0x1836F54
    static ::StringW GetErrorMessageForCode(int errorCode);
  }; // Firebase.Storage.StorageException
  #pragma pack(pop)
  static check_size<sizeof(StorageException), 140 + sizeof(int)> __Firebase_Storage_StorageExceptionSizeCheck;
  static_assert(sizeof(StorageException) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::StorageException::get_ErrorCode
// Il2CppName: get_ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Firebase::Storage::StorageException::*)()>(&Firebase::Storage::StorageException::get_ErrorCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageException*), "get_ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageException::set_ErrorCode
// Il2CppName: set_ErrorCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageException::*)(int)>(&Firebase::Storage::StorageException::set_ErrorCode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageException*), "set_ErrorCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageException::set_HttpResultCode
// Il2CppName: set_HttpResultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageException::*)(int)>(&Firebase::Storage::StorageException::set_HttpResultCode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageException*), "set_HttpResultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageException::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::StorageException::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Storage::StorageException::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageException*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageException::CreateFromException
// Il2CppName: CreateFromException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::StorageException* (*)(::System::Exception*)>(&Firebase::Storage::StorageException::CreateFromException)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageException*), "CreateFromException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageException::GetErrorMessageForCode
// Il2CppName: GetErrorMessageForCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int)>(&Firebase::Storage::StorageException::GetErrorMessageForCode)> {
  static const MethodInfo* get() {
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageException*), "GetErrorMessageForCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{errorCode});
  }
};
