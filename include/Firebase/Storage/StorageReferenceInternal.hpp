// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Runtime.InteropServices.HandleRef
#include "System/Runtime/InteropServices/HandleRef.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: Firebase::Storage
namespace Firebase::Storage {
  // Forward declaring type: MonitorControllerInternal
  class MonitorControllerInternal;
  // Forward declaring type: MetadataInternal
  class MetadataInternal;
}
// Completed forward declares
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Forward declaring type: StorageReferenceInternal
  class StorageReferenceInternal;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::StorageReferenceInternal);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::StorageReferenceInternal*, "Firebase.Storage", "StorageReferenceInternal");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.StorageReferenceInternal
  // [TokenAttribute] Offset: FFFFFFFF
  class StorageReferenceInternal : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Runtime.InteropServices.HandleRef swigCPtr
    // Size: 0x10
    // Offset: 0x10
    ::System::Runtime::InteropServices::HandleRef swigCPtr;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::HandleRef) == 0x10);
    // protected System.Boolean swigCMemOwn
    // Size: 0x1
    // Offset: 0x20
    bool swigCMemOwn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Runtime.InteropServices.HandleRef swigCPtr
    [[deprecated]] ::System::Runtime::InteropServices::HandleRef& dyn_swigCPtr();
    // Get instance field reference: protected System.Boolean swigCMemOwn
    [[deprecated]] bool& dyn_swigCMemOwn();
    // public System.String get_Bucket()
    // Offset: 0x1837F44
    ::StringW get_Bucket();
    // public System.String get_FullPath()
    // Offset: 0x1837E88
    ::StringW get_FullPath();
    // System.Void .ctor(System.IntPtr cPtr, System.Boolean cMemoryOwn)
    // Offset: 0x1832338
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StorageReferenceInternal* New_ctor(::System::IntPtr cPtr, bool cMemoryOwn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::StorageReferenceInternal::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StorageReferenceInternal*, creationType>(cPtr, cMemoryOwn)));
    }
    // static System.Runtime.InteropServices.HandleRef getCPtr(Firebase.Storage.StorageReferenceInternal obj)
    // Offset: 0x1835A80
    static ::System::Runtime::InteropServices::HandleRef getCPtr(::Firebase::Storage::StorageReferenceInternal* obj);
    // public System.Void Dispose()
    // Offset: 0x18395E8
    void Dispose();
    // Firebase.Storage.StorageReferenceInternal Child(System.String path)
    // Offset: 0x1838074
    ::Firebase::Storage::StorageReferenceInternal* Child(::StringW path);
    // public System.Threading.Tasks.Task DeleteAsync()
    // Offset: 0x1838E0C
    ::System::Threading::Tasks::Task* DeleteAsync();
    // System.Threading.Tasks.Task`1<System.Int64> GetFileUsingMonitorControllerAsync(System.String path, Firebase.Storage.MonitorControllerInternal monitor_controller)
    // Offset: 0x18389F8
    ::System::Threading::Tasks::Task_1<int64_t>* GetFileUsingMonitorControllerAsync(::StringW path, ::Firebase::Storage::MonitorControllerInternal* monitor_controller);
    // System.Threading.Tasks.Task`1<Firebase.Storage.MetadataInternal> PutFileUsingMonitorControllerAsync(System.String path, Firebase.Storage.MetadataInternal metadata, Firebase.Storage.MonitorControllerInternal monitor_controller)
    // Offset: 0x18382AC
    ::System::Threading::Tasks::Task_1<::Firebase::Storage::MetadataInternal*>* PutFileUsingMonitorControllerAsync(::StringW path, ::Firebase::Storage::MetadataInternal* metadata, ::Firebase::Storage::MonitorControllerInternal* monitor_controller);
    // protected override System.Void Finalize()
    // Offset: 0x1839578
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Firebase.Storage.StorageReferenceInternal
  #pragma pack(pop)
  static check_size<sizeof(StorageReferenceInternal), 32 + sizeof(bool)> __Firebase_Storage_StorageReferenceInternalSizeCheck;
  static_assert(sizeof(StorageReferenceInternal) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::get_Bucket
// Il2CppName: get_Bucket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Storage::StorageReferenceInternal::*)()>(&Firebase::Storage::StorageReferenceInternal::get_Bucket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "get_Bucket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::get_FullPath
// Il2CppName: get_FullPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::Storage::StorageReferenceInternal::*)()>(&Firebase::Storage::StorageReferenceInternal::get_FullPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "get_FullPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::getCPtr
// Il2CppName: getCPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Runtime::InteropServices::HandleRef (*)(::Firebase::Storage::StorageReferenceInternal*)>(&Firebase::Storage::StorageReferenceInternal::getCPtr)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "StorageReferenceInternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "getCPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageReferenceInternal::*)()>(&Firebase::Storage::StorageReferenceInternal::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::Child
// Il2CppName: Child
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Storage::StorageReferenceInternal* (Firebase::Storage::StorageReferenceInternal::*)(::StringW)>(&Firebase::Storage::StorageReferenceInternal::Child)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "Child", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::DeleteAsync
// Il2CppName: DeleteAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (Firebase::Storage::StorageReferenceInternal::*)()>(&Firebase::Storage::StorageReferenceInternal::DeleteAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "DeleteAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::GetFileUsingMonitorControllerAsync
// Il2CppName: GetFileUsingMonitorControllerAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<int64_t>* (Firebase::Storage::StorageReferenceInternal::*)(::StringW, ::Firebase::Storage::MonitorControllerInternal*)>(&Firebase::Storage::StorageReferenceInternal::GetFileUsingMonitorControllerAsync)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* monitor_controller = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MonitorControllerInternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "GetFileUsingMonitorControllerAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, monitor_controller});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::PutFileUsingMonitorControllerAsync
// Il2CppName: PutFileUsingMonitorControllerAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::Firebase::Storage::MetadataInternal*>* (Firebase::Storage::StorageReferenceInternal::*)(::StringW, ::Firebase::Storage::MetadataInternal*, ::Firebase::Storage::MonitorControllerInternal*)>(&Firebase::Storage::StorageReferenceInternal::PutFileUsingMonitorControllerAsync)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* metadata = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MetadataInternal")->byval_arg;
    static auto* monitor_controller = &::il2cpp_utils::GetClassFromName("Firebase.Storage", "MonitorControllerInternal")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "PutFileUsingMonitorControllerAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, metadata, monitor_controller});
  }
};
// Writing MetadataGetter for method: Firebase::Storage::StorageReferenceInternal::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Storage::StorageReferenceInternal::*)()>(&Firebase::Storage::StorageReferenceInternal::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReferenceInternal*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
