// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Storage.StorageReference
#include "Firebase/Storage/StorageReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Storage
namespace Firebase::Storage {
  // Forward declaring type: MonitorControllerInternal
  class MonitorControllerInternal;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11*, "Firebase.Storage", "StorageReference/<GetFileUsingMonitorControllerAsync>c__AnonStorey11");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.StorageReference/Firebase.Storage.<GetFileUsingMonitorControllerAsync>c__AnonStorey11
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11 : public ::Il2CppObject {
    public:
    public:
    // Firebase.Storage.MonitorControllerInternal monitorController
    // Size: 0x8
    // Offset: 0x10
    ::Firebase::Storage::MonitorControllerInternal* monitorController;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::MonitorControllerInternal*) == 0x8);
    public:
    // Creating conversion operator: operator ::Firebase::Storage::MonitorControllerInternal*
    constexpr operator ::Firebase::Storage::MonitorControllerInternal*() const noexcept {
      return monitorController;
    }
    // Get instance field reference: Firebase.Storage.MonitorControllerInternal monitorController
    [[deprecated("Use field access instead!")]] ::Firebase::Storage::MonitorControllerInternal*& dyn_monitorController();
    // public System.Void .ctor()
    // Offset: 0x18389F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11*, creationType>()));
    }
    // System.Threading.Tasks.Task`1<System.Int64> <>m__0(System.Threading.Tasks.Task`1<System.Int64> completedTask)
    // Offset: 0x183B824
    ::System::Threading::Tasks::Task_1<int64_t>* $$m__0(::System::Threading::Tasks::Task_1<int64_t>* completedTask);
  }; // Firebase.Storage.StorageReference/Firebase.Storage.<GetFileUsingMonitorControllerAsync>c__AnonStorey11
  #pragma pack(pop)
  static check_size<sizeof(StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11), 16 + sizeof(::Firebase::Storage::MonitorControllerInternal*)> __Firebase_Storage_StorageReference_$GetFileUsingMonitorControllerAsync$c__AnonStorey11SizeCheck;
  static_assert(sizeof(StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11::$$m__0
// Il2CppName: <>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<int64_t>* (Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11::*)(::System::Threading::Tasks::Task_1<int64_t>*)>(&Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11::$$m__0)> {
  static const MethodInfo* get() {
    static auto* completedTask = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Threading.Tasks", "Task`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int64")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Storage::StorageReference::$GetFileUsingMonitorControllerAsync$c__AnonStorey11*), "<>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{completedTask});
  }
};
