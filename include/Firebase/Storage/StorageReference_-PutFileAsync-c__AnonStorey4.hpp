// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Storage.StorageReference
#include "Firebase/Storage/StorageReference.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Forward declaring namespace: Firebase::Storage
namespace Firebase::Storage {
  // Forward declaring type: StorageMetadata
  class StorageMetadata;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Storage::StorageReference::$PutFileAsync$c__AnonStorey4);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Storage::StorageReference::$PutFileAsync$c__AnonStorey4*, "Firebase.Storage", "StorageReference/<PutFileAsync>c__AnonStorey4");
// Type namespace: Firebase.Storage
namespace Firebase::Storage {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Storage.StorageReference/Firebase.Storage.<PutFileAsync>c__AnonStorey4
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class StorageReference::$PutFileAsync$c__AnonStorey4 : public ::Il2CppObject {
    public:
    public:
    // System.Threading.Tasks.TaskCompletionSource`1<Firebase.Storage.StorageMetadata> result
    // Size: 0x8
    // Offset: 0x10
    ::System::Threading::Tasks::TaskCompletionSource_1<::Firebase::Storage::StorageMetadata*>* result;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::TaskCompletionSource_1<::Firebase::Storage::StorageMetadata*>*) == 0x8);
    // Firebase.Storage.StorageReference $this
    // Size: 0x8
    // Offset: 0x18
    ::Firebase::Storage::StorageReference* $this;
    // Field size check
    static_assert(sizeof(::Firebase::Storage::StorageReference*) == 0x8);
    public:
    // Get instance field reference: System.Threading.Tasks.TaskCompletionSource`1<Firebase.Storage.StorageMetadata> result
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::TaskCompletionSource_1<::Firebase::Storage::StorageMetadata*>*& dyn_result();
    // Get instance field reference: Firebase.Storage.StorageReference $this
    [[deprecated("Use field access instead!")]] ::Firebase::Storage::StorageReference*& dyn_$this();
    // public System.Void .ctor()
    // Offset: 0x1838814
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StorageReference::$PutFileAsync$c__AnonStorey4* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Storage::StorageReference::$PutFileAsync$c__AnonStorey4::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StorageReference::$PutFileAsync$c__AnonStorey4*, creationType>()));
    }
  }; // Firebase.Storage.StorageReference/Firebase.Storage.<PutFileAsync>c__AnonStorey4
  #pragma pack(pop)
  static check_size<sizeof(StorageReference::$PutFileAsync$c__AnonStorey4), 24 + sizeof(::Firebase::Storage::StorageReference*)> __Firebase_Storage_StorageReference_$PutFileAsync$c__AnonStorey4SizeCheck;
  static_assert(sizeof(StorageReference::$PutFileAsync$c__AnonStorey4) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Storage::StorageReference::$PutFileAsync$c__AnonStorey4::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
