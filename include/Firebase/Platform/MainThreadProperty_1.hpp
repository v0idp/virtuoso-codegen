// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: Firebase.Platform
namespace Firebase::Platform {
  // Forward declaring type: MainThreadProperty`1<T>
  template<typename T>
  class MainThreadProperty_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Firebase::Platform::MainThreadProperty_1, "Firebase.Platform", "MainThreadProperty`1");
// Type namespace: Firebase.Platform
namespace Firebase::Platform {
  // WARNING Size may be invalid!
  // Autogenerated type: Firebase.Platform.MainThreadProperty`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class MainThreadProperty_1 : public ::Il2CppObject {
    public:
    public:
    // private System.Func`1<T> getPropertyDelegate
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_1<T>* getPropertyDelegate;
    // Field size check
    static_assert(sizeof(::System::Func_1<T>*) == 0x8);
    // private System.Int32 lastGetPropertyTickCount
    // Size: 0x4
    // Offset: 0x0
    int lastGetPropertyTickCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private T cachedValue
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T cachedValue;
    public:
    // Autogenerated instance field getter
    // Get instance field: private System.Func`1<T> getPropertyDelegate
    [[deprecated]] ::System::Func_1<T>*& dyn_getPropertyDelegate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::MainThreadProperty_1::dyn_getPropertyDelegate");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "getPropertyDelegate"))->offset;
      return *reinterpret_cast<::System::Func_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 lastGetPropertyTickCount
    [[deprecated]] int& dyn_lastGetPropertyTickCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::MainThreadProperty_1::dyn_lastGetPropertyTickCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastGetPropertyTickCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T cachedValue
    [[deprecated]] T& dyn_cachedValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::MainThreadProperty_1::dyn_cachedValue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "cachedValue"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_Value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::MainThreadProperty_1::get_Value");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Func`1<T> getPropertyDelegate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainThreadProperty_1<T>* New_ctor(::System::Func_1<T>* getPropertyDelegate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::MainThreadProperty_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainThreadProperty_1<T>*, creationType>(getPropertyDelegate)));
    }
    // private T <get_Value>m__0()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T $get_Value$m__0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::MainThreadProperty_1::<get_Value>m__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_Value>m__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
  }; // Firebase.Platform.MainThreadProperty`1
  // Could not write size check! Type: Firebase.Platform.MainThreadProperty`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
