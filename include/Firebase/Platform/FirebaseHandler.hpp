// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Platform
namespace Firebase::Platform {
  // Forward declaring type: FirebaseMonoBehaviour
  class FirebaseMonoBehaviour;
  // Forward declaring type: IFirebaseAppUtils
  class IFirebaseAppUtils;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: EventArgs
  class EventArgs;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: Firebase
namespace Firebase {
  // Forward declaring type: Dispatcher
  class Dispatcher;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: Firebase.Platform
namespace Firebase::Platform {
  // Forward declaring type: FirebaseHandler
  class FirebaseHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Platform::FirebaseHandler);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Platform::FirebaseHandler*, "Firebase.Platform", "FirebaseHandler");
// Type namespace: Firebase.Platform
namespace Firebase::Platform {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Platform.FirebaseHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class FirebaseHandler : public ::Il2CppObject {
    public:
    // Nested type: ::Firebase::Platform::FirebaseHandler::ApplicationFocusChangedEventArgs
    class ApplicationFocusChangedEventArgs;
    // Nested type: ::Firebase::Platform::FirebaseHandler::$CreatePartialOnMainThread$c__AnonStorey0
    class $CreatePartialOnMainThread$c__AnonStorey0;
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x6F7D54
    // private System.Boolean <IsPlayMode>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool IsPlayMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsPlayMode and: Updated
    char __padding0[0x7] = {};
    // private System.EventHandler`1<System.EventArgs> Updated
    // Size: 0x8
    // Offset: 0x18
    ::System::EventHandler_1<::System::EventArgs*>* Updated;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::System::EventArgs*>*) == 0x8);
    // System.Action UpdatedEventWrapper
    // Size: 0x8
    // Offset: 0x20
    ::System::Action* UpdatedEventWrapper;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.EventHandler`1<Firebase.Platform.FirebaseHandler/Firebase.Platform.ApplicationFocusChangedEventArgs> ApplicationFocusChanged
    // Size: 0x8
    // Offset: 0x28
    ::System::EventHandler_1<::Firebase::Platform::FirebaseHandler::ApplicationFocusChangedEventArgs*>* ApplicationFocusChanged;
    // Field size check
    static_assert(sizeof(::System::EventHandler_1<::Firebase::Platform::FirebaseHandler::ApplicationFocusChangedEventArgs*>*) == 0x8);
    public:
    // Get static field: static private Firebase.Platform.FirebaseMonoBehaviour firebaseMonoBehaviour
    static ::Firebase::Platform::FirebaseMonoBehaviour* _get_firebaseMonoBehaviour();
    // Set static field: static private Firebase.Platform.FirebaseMonoBehaviour firebaseMonoBehaviour
    static void _set_firebaseMonoBehaviour(::Firebase::Platform::FirebaseMonoBehaviour* value);
    // [DebuggerBrowsableAttribute] Offset: 0x6F7CDC
    // Get static field: static private Firebase.Platform.IFirebaseAppUtils <AppUtils>k__BackingField
    static ::Firebase::Platform::IFirebaseAppUtils* _get_$AppUtils$k__BackingField();
    // Set static field: static private Firebase.Platform.IFirebaseAppUtils <AppUtils>k__BackingField
    static void _set_$AppUtils$k__BackingField(::Firebase::Platform::IFirebaseAppUtils* value);
    // Get static field: static private System.Int32 tickCount
    static int _get_tickCount();
    // Set static field: static private System.Int32 tickCount
    static void _set_tickCount(int value);
    // [DebuggerBrowsableAttribute] Offset: 0x6F7D18
    // Get static field: static private Firebase.Dispatcher <ThreadDispatcher>k__BackingField
    static ::Firebase::Dispatcher* _get_$ThreadDispatcher$k__BackingField();
    // Set static field: static private Firebase.Dispatcher <ThreadDispatcher>k__BackingField
    static void _set_$ThreadDispatcher$k__BackingField(::Firebase::Dispatcher* value);
    // Get static field: static private Firebase.Platform.FirebaseHandler firebaseHandler
    static ::Firebase::Platform::FirebaseHandler* _get_firebaseHandler();
    // Set static field: static private Firebase.Platform.FirebaseHandler firebaseHandler
    static void _set_firebaseHandler(::Firebase::Platform::FirebaseHandler* value);
    // Get static field: static private System.Func`1<System.Boolean> <>f__am$cache0
    static ::System::Func_1<bool>* _get_$$f__am$cache0();
    // Set static field: static private System.Func`1<System.Boolean> <>f__am$cache0
    static void _set_$$f__am$cache0(::System::Func_1<bool>* value);
    // Get instance field reference: private System.Boolean <IsPlayMode>k__BackingField
    [[deprecated]] bool& dyn_$IsPlayMode$k__BackingField();
    // Get instance field reference: private System.EventHandler`1<System.EventArgs> Updated
    [[deprecated]] ::System::EventHandler_1<::System::EventArgs*>*& dyn_Updated();
    // Get instance field reference: System.Action UpdatedEventWrapper
    [[deprecated]] ::System::Action*& dyn_UpdatedEventWrapper();
    // Get instance field reference: private System.EventHandler`1<Firebase.Platform.FirebaseHandler/Firebase.Platform.ApplicationFocusChangedEventArgs> ApplicationFocusChanged
    [[deprecated]] ::System::EventHandler_1<::Firebase::Platform::FirebaseHandler::ApplicationFocusChangedEventArgs*>*& dyn_ApplicationFocusChanged();
    // static public Firebase.Platform.IFirebaseAppUtils get_AppUtils()
    // Offset: 0x18C9380
    static ::Firebase::Platform::IFirebaseAppUtils* get_AppUtils();
    // static private System.Void set_AppUtils(Firebase.Platform.IFirebaseAppUtils value)
    // Offset: 0x18C93E4
    static void set_AppUtils(::Firebase::Platform::IFirebaseAppUtils* value);
    // static public System.Int32 get_TickCount()
    // Offset: 0x18C944C
    static int get_TickCount();
    // static private Firebase.Dispatcher get_ThreadDispatcher()
    // Offset: 0x18C94B0
    static ::Firebase::Dispatcher* get_ThreadDispatcher();
    // static private System.Void set_ThreadDispatcher(Firebase.Dispatcher value)
    // Offset: 0x18C9514
    static void set_ThreadDispatcher(::Firebase::Dispatcher* value);
    // public System.Boolean get_IsPlayMode()
    // Offset: 0x18C957C
    bool get_IsPlayMode();
    // public System.Void set_IsPlayMode(System.Boolean value)
    // Offset: 0x18C9584
    void set_IsPlayMode(bool value);
    // static Firebase.Platform.FirebaseHandler get_DefaultInstance()
    // Offset: 0x18C9638
    static ::Firebase::Platform::FirebaseHandler* get_DefaultInstance();
    // static private System.Void .cctor()
    // Offset: 0x18C9234
    static void _cctor();
    // System.Void StartMonoBehaviour()
    // Offset: 0x18C8F10
    void StartMonoBehaviour();
    // System.Void StopMonoBehaviour()
    // Offset: 0x18C90A4
    void StopMonoBehaviour();
    // static public TResult RunOnMainThread(System.Func`1<TResult> f)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static TResult RunOnMainThread(::System::Func_1<TResult>* f) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::FirebaseHandler::RunOnMainThread");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Platform", "FirebaseHandler", "RunOnMainThread", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TResult, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, f);
    }
    // static public System.Threading.Tasks.Task`1<TResult> RunOnMainThreadAsync(System.Func`1<TResult> f)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TResult>
    static ::System::Threading::Tasks::Task_1<TResult>* RunOnMainThreadAsync(::System::Func_1<TResult>* f) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::FirebaseHandler::RunOnMainThreadAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Firebase.Platform", "FirebaseHandler", "RunOnMainThreadAsync", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, f);
    }
    // static System.Void CreatePartialOnMainThread(Firebase.Platform.IFirebaseAppUtils appUtils)
    // Offset: 0x18C969C
    static void CreatePartialOnMainThread(::Firebase::Platform::IFirebaseAppUtils* appUtils);
    // static System.Void Create(Firebase.Platform.IFirebaseAppUtils appUtils)
    // Offset: 0x18C97CC
    static void Create(::Firebase::Platform::IFirebaseAppUtils* appUtils);
    // System.Void Update()
    // Offset: 0x18C8780
    void Update();
    // System.Void OnApplicationFocus(System.Boolean hasFocus)
    // Offset: 0x18C99FC
    void OnApplicationFocus(bool hasFocus);
    // static System.Void OnMonoBehaviourDestroyed(Firebase.Platform.FirebaseMonoBehaviour behaviour)
    // Offset: 0x18C9B0C
    static void OnMonoBehaviourDestroyed(::Firebase::Platform::FirebaseMonoBehaviour* behaviour);
    // static private System.Boolean <StopMonoBehaviour>m__0()
    // Offset: 0x18C9BE4
    static bool $StopMonoBehaviour$m__0();
    // private System.Void <Update>m__1()
    // Offset: 0x18C9D8C
    void $Update$m__1();
    // private System.Void .ctor()
    // Offset: 0x18C931C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FirebaseHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Platform::FirebaseHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FirebaseHandler*, creationType>()));
    }
  }; // Firebase.Platform.FirebaseHandler
  #pragma pack(pop)
  static check_size<sizeof(FirebaseHandler), 40 + sizeof(::System::EventHandler_1<::Firebase::Platform::FirebaseHandler::ApplicationFocusChangedEventArgs*>*)> __Firebase_Platform_FirebaseHandlerSizeCheck;
  static_assert(sizeof(FirebaseHandler) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::get_AppUtils
// Il2CppName: get_AppUtils
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Platform::IFirebaseAppUtils* (*)()>(&Firebase::Platform::FirebaseHandler::get_AppUtils)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "get_AppUtils", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::set_AppUtils
// Il2CppName: set_AppUtils
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::Platform::IFirebaseAppUtils*)>(&Firebase::Platform::FirebaseHandler::set_AppUtils)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Firebase.Platform", "IFirebaseAppUtils")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "set_AppUtils", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::get_TickCount
// Il2CppName: get_TickCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Firebase::Platform::FirebaseHandler::get_TickCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "get_TickCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::get_ThreadDispatcher
// Il2CppName: get_ThreadDispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Dispatcher* (*)()>(&Firebase::Platform::FirebaseHandler::get_ThreadDispatcher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "get_ThreadDispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::set_ThreadDispatcher
// Il2CppName: set_ThreadDispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::Dispatcher*)>(&Firebase::Platform::FirebaseHandler::set_ThreadDispatcher)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Firebase", "Dispatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "set_ThreadDispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::get_IsPlayMode
// Il2CppName: get_IsPlayMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Firebase::Platform::FirebaseHandler::*)()>(&Firebase::Platform::FirebaseHandler::get_IsPlayMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "get_IsPlayMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::set_IsPlayMode
// Il2CppName: set_IsPlayMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Platform::FirebaseHandler::*)(bool)>(&Firebase::Platform::FirebaseHandler::set_IsPlayMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "set_IsPlayMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::get_DefaultInstance
// Il2CppName: get_DefaultInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Firebase::Platform::FirebaseHandler* (*)()>(&Firebase::Platform::FirebaseHandler::get_DefaultInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "get_DefaultInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Platform::FirebaseHandler::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::StartMonoBehaviour
// Il2CppName: StartMonoBehaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Platform::FirebaseHandler::*)()>(&Firebase::Platform::FirebaseHandler::StartMonoBehaviour)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "StartMonoBehaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::StopMonoBehaviour
// Il2CppName: StopMonoBehaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Platform::FirebaseHandler::*)()>(&Firebase::Platform::FirebaseHandler::StopMonoBehaviour)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "StopMonoBehaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::RunOnMainThread
// Il2CppName: RunOnMainThread
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::RunOnMainThreadAsync
// Il2CppName: RunOnMainThreadAsync
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::CreatePartialOnMainThread
// Il2CppName: CreatePartialOnMainThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::Platform::IFirebaseAppUtils*)>(&Firebase::Platform::FirebaseHandler::CreatePartialOnMainThread)> {
  static const MethodInfo* get() {
    static auto* appUtils = &::il2cpp_utils::GetClassFromName("Firebase.Platform", "IFirebaseAppUtils")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "CreatePartialOnMainThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appUtils});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::Create
// Il2CppName: Create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::Platform::IFirebaseAppUtils*)>(&Firebase::Platform::FirebaseHandler::Create)> {
  static const MethodInfo* get() {
    static auto* appUtils = &::il2cpp_utils::GetClassFromName("Firebase.Platform", "IFirebaseAppUtils")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "Create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appUtils});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Platform::FirebaseHandler::*)()>(&Firebase::Platform::FirebaseHandler::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Platform::FirebaseHandler::*)(bool)>(&Firebase::Platform::FirebaseHandler::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* hasFocus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hasFocus});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::OnMonoBehaviourDestroyed
// Il2CppName: OnMonoBehaviourDestroyed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::Platform::FirebaseMonoBehaviour*)>(&Firebase::Platform::FirebaseHandler::OnMonoBehaviourDestroyed)> {
  static const MethodInfo* get() {
    static auto* behaviour = &::il2cpp_utils::GetClassFromName("Firebase.Platform", "FirebaseMonoBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "OnMonoBehaviourDestroyed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviour});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::$StopMonoBehaviour$m__0
// Il2CppName: <StopMonoBehaviour>m__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Firebase::Platform::FirebaseHandler::$StopMonoBehaviour$m__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "<StopMonoBehaviour>m__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::$Update$m__1
// Il2CppName: <Update>m__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::Platform::FirebaseHandler::*)()>(&Firebase::Platform::FirebaseHandler::$Update$m__1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseHandler*), "<Update>m__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
