// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Firebase::Platform
namespace Firebase::Platform {
  // Forward declaring type: MainThreadProperty`1<T>
  template<typename T>
  class MainThreadProperty_1;
  // Forward declaring type: PlatformLogLevel
  struct PlatformLogLevel;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: StackTraceLogType
  struct StackTraceLogType;
}
// Completed forward declares
// Type namespace: Firebase.Platform
namespace Firebase::Platform {
  // Forward declaring type: FirebaseLogger
  class FirebaseLogger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::Platform::FirebaseLogger);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::Platform::FirebaseLogger*, "Firebase.Platform", "FirebaseLogger");
// Type namespace: Firebase.Platform
namespace Firebase::Platform {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.Platform.FirebaseLogger
  // [TokenAttribute] Offset: FFFFFFFF
  class FirebaseLogger : public ::Il2CppObject {
    public:
    // Get static field: static private Firebase.Platform.MainThreadProperty`1<System.Boolean> incompatibleStackUnwindingEnabled
    static ::Firebase::Platform::MainThreadProperty_1<bool>* _get_incompatibleStackUnwindingEnabled();
    // Set static field: static private Firebase.Platform.MainThreadProperty`1<System.Boolean> incompatibleStackUnwindingEnabled
    static void _set_incompatibleStackUnwindingEnabled(::Firebase::Platform::MainThreadProperty_1<bool>* value);
    // Get static field: static private System.Func`1<System.Boolean> <>f__mg$cache0
    static ::System::Func_1<bool>* _get_$$f__mg$cache0();
    // Set static field: static private System.Func`1<System.Boolean> <>f__mg$cache0
    static void _set_$$f__mg$cache0(::System::Func_1<bool>* value);
    // static System.Boolean get_CanRedirectNativeLogs()
    // Offset: 0x18CA06C
    static bool get_CanRedirectNativeLogs();
    // static private System.Void .cctor()
    // Offset: 0x18CA1F8
    static void _cctor();
    // static private System.Boolean IsStackTraceLogTypeIncompatibleWithNativeLogs(UnityEngine.StackTraceLogType logType)
    // Offset: 0x18C9DE8
    static bool IsStackTraceLogTypeIncompatibleWithNativeLogs(::UnityEngine::StackTraceLogType logType);
    // static private System.Boolean CurrentStackTraceLogTypeIsIncompatibleWithNativeLogs()
    // Offset: 0x18C9DF4
    static bool CurrentStackTraceLogTypeIsIncompatibleWithNativeLogs();
    // static System.Void LogMessage(Firebase.Platform.PlatformLogLevel logLevel, System.String message)
    // Offset: 0x18C7DD8
    static void LogMessage(::Firebase::Platform::PlatformLogLevel logLevel, ::StringW message);
  }; // Firebase.Platform.FirebaseLogger
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::Platform::FirebaseLogger::get_CanRedirectNativeLogs
// Il2CppName: get_CanRedirectNativeLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Firebase::Platform::FirebaseLogger::get_CanRedirectNativeLogs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseLogger*), "get_CanRedirectNativeLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseLogger::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::Platform::FirebaseLogger::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseLogger*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseLogger::IsStackTraceLogTypeIncompatibleWithNativeLogs
// Il2CppName: IsStackTraceLogTypeIncompatibleWithNativeLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::StackTraceLogType)>(&Firebase::Platform::FirebaseLogger::IsStackTraceLogTypeIncompatibleWithNativeLogs)> {
  static const MethodInfo* get() {
    static auto* logType = &::il2cpp_utils::GetClassFromName("UnityEngine", "StackTraceLogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseLogger*), "IsStackTraceLogTypeIncompatibleWithNativeLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logType});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseLogger::CurrentStackTraceLogTypeIsIncompatibleWithNativeLogs
// Il2CppName: CurrentStackTraceLogTypeIsIncompatibleWithNativeLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&Firebase::Platform::FirebaseLogger::CurrentStackTraceLogTypeIsIncompatibleWithNativeLogs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseLogger*), "CurrentStackTraceLogTypeIsIncompatibleWithNativeLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::Platform::FirebaseLogger::LogMessage
// Il2CppName: LogMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Firebase::Platform::PlatformLogLevel, ::StringW)>(&Firebase::Platform::FirebaseLogger::LogMessage)> {
  static const MethodInfo* get() {
    static auto* logLevel = &::il2cpp_utils::GetClassFromName("Firebase.Platform", "PlatformLogLevel")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::Platform::FirebaseLogger*), "LogMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logLevel, message});
  }
};
