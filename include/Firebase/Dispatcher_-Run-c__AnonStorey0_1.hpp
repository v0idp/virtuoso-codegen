// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Firebase.Dispatcher
#include "Firebase/Dispatcher.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: EventWaitHandle
  class EventWaitHandle;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Firebase::Dispatcher::$Run$c__AnonStorey0_1, "Firebase", "Dispatcher/<Run>c__AnonStorey0`1");
// Type namespace: Firebase
namespace Firebase {
  // WARNING Size may be invalid!
  // Autogenerated type: Firebase.Dispatcher/Firebase.<Run>c__AnonStorey0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename TResult>
  class Dispatcher::$Run$c__AnonStorey0_1 : public ::Il2CppObject {
    public:
    public:
    // System.Func`1<TResult> callback
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_1<TResult>* callback;
    // Field size check
    static_assert(sizeof(::System::Func_1<TResult>*) == 0x8);
    // Firebase.Dispatcher/Firebase.CallbackStorage`1<TResult> result
    // Size: 0x8
    // Offset: 0x0
    ::Firebase::Dispatcher::CallbackStorage_1<TResult>* result;
    // Field size check
    static_assert(sizeof(::Firebase::Dispatcher::CallbackStorage_1<TResult>*) == 0x8);
    // System.Threading.EventWaitHandle waitHandle
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::EventWaitHandle* waitHandle;
    // Field size check
    static_assert(sizeof(::System::Threading::EventWaitHandle*) == 0x8);
    public:
    // Autogenerated instance field getter
    // Get instance field: System.Func`1<TResult> callback
    [[deprecated]] ::System::Func_1<TResult>*& dyn_callback() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Dispatcher::$Run$c__AnonStorey0_1::dyn_callback");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
      return *reinterpret_cast<::System::Func_1<TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: Firebase.Dispatcher/Firebase.CallbackStorage`1<TResult> result
    [[deprecated]] ::Firebase::Dispatcher::CallbackStorage_1<TResult>*& dyn_result() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Dispatcher::$Run$c__AnonStorey0_1::dyn_result");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "result"))->offset;
      return *reinterpret_cast<::Firebase::Dispatcher::CallbackStorage_1<TResult>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: System.Threading.EventWaitHandle waitHandle
    [[deprecated]] ::System::Threading::EventWaitHandle*& dyn_waitHandle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Dispatcher::$Run$c__AnonStorey0_1::dyn_waitHandle");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waitHandle"))->offset;
      return *reinterpret_cast<::System::Threading::EventWaitHandle**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // System.Void <>m__0()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void $$m__0() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Dispatcher::$Run$c__AnonStorey0_1::<>m__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dispatcher::$Run$c__AnonStorey0_1<TResult>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::Dispatcher::$Run$c__AnonStorey0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dispatcher::$Run$c__AnonStorey0_1<TResult>*, creationType>()));
    }
  }; // Firebase.Dispatcher/Firebase.<Run>c__AnonStorey0`1
  // Could not write size check! Type: Firebase.Dispatcher/Firebase.<Run>c__AnonStorey0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
