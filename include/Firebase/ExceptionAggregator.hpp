// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: Firebase
namespace Firebase {
  // Forward declaring type: ExceptionAggregator
  class ExceptionAggregator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::ExceptionAggregator);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::ExceptionAggregator*, "Firebase", "ExceptionAggregator");
// Type namespace: Firebase
namespace Firebase {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.ExceptionAggregator
  // [TokenAttribute] Offset: FFFFFFFF
  class ExceptionAggregator : public ::Il2CppObject {
    public:
    // Get static field: static private System.Collections.Generic.List`1<System.Exception> threadLocalExceptions
    static ::System::Collections::Generic::List_1<::System::Exception*>* _get_threadLocalExceptions();
    // Set static field: static private System.Collections.Generic.List`1<System.Exception> threadLocalExceptions
    static void _set_threadLocalExceptions(::System::Collections::Generic::List_1<::System::Exception*>* value);
    // static private System.Collections.Generic.List`1<System.Exception> get_Exceptions()
    // Offset: 0x18C7828
    static ::System::Collections::Generic::List_1<::System::Exception*>* get_Exceptions();
    // static public System.Exception GetAndClearPendingExceptions()
    // Offset: 0x18C78CC
    static ::System::Exception* GetAndClearPendingExceptions();
    // static public System.Void ThrowAndClearPendingExceptions()
    // Offset: 0x18C79C8
    static void ThrowAndClearPendingExceptions();
    // static public System.Exception LogException(System.Exception exception)
    // Offset: 0x18C7A08
    static ::System::Exception* LogException(::System::Exception* exception);
    // static public System.Void Wrap(System.Action action)
    // Offset: 0x18C775C
    static void Wrap(::System::Action* action);
  }; // Firebase.ExceptionAggregator
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::ExceptionAggregator::get_Exceptions
// Il2CppName: get_Exceptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::System::Exception*>* (*)()>(&Firebase::ExceptionAggregator::get_Exceptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::ExceptionAggregator*), "get_Exceptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::ExceptionAggregator::GetAndClearPendingExceptions
// Il2CppName: GetAndClearPendingExceptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)()>(&Firebase::ExceptionAggregator::GetAndClearPendingExceptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::ExceptionAggregator*), "GetAndClearPendingExceptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::ExceptionAggregator::ThrowAndClearPendingExceptions
// Il2CppName: ThrowAndClearPendingExceptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Firebase::ExceptionAggregator::ThrowAndClearPendingExceptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::ExceptionAggregator*), "ThrowAndClearPendingExceptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::ExceptionAggregator::LogException
// Il2CppName: LogException
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Exception* (*)(::System::Exception*)>(&Firebase::ExceptionAggregator::LogException)> {
  static const MethodInfo* get() {
    static auto* exception = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::ExceptionAggregator*), "LogException", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{exception});
  }
};
// Writing MetadataGetter for method: Firebase::ExceptionAggregator::Wrap
// Il2CppName: Wrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action*)>(&Firebase::ExceptionAggregator::Wrap)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::ExceptionAggregator*), "Wrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
