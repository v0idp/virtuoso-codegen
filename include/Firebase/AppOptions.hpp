// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: Firebase
namespace Firebase {
  // Forward declaring type: AppOptionsInternal
  class AppOptionsInternal;
}
// Completed forward declares
// Type namespace: Firebase
namespace Firebase {
  // Forward declaring type: AppOptions
  class AppOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Firebase::AppOptions);
DEFINE_IL2CPP_ARG_TYPE(::Firebase::AppOptions*, "Firebase", "AppOptions");
// Type namespace: Firebase
namespace Firebase {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Firebase.AppOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class AppOptions : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x6EA7B4
    // private System.Uri <DatabaseUrl>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::System::Uri* DatabaseUrl;
    // Field size check
    static_assert(sizeof(::System::Uri*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6EA7F0
    // private System.String <AppId>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW AppId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6EA82C
    // private System.String <ApiKey>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW ApiKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6EA868
    // private System.String <MessageSenderId>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW MessageSenderId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6EA8A4
    // private System.String <StorageBucket>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW StorageBucket;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6EA8E0
    // private System.String <ProjectId>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW ProjectId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x6EA91C
    // private System.String <PackageName>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::StringW PackageName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private System.Uri <DatabaseUrl>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Uri*& dyn_$DatabaseUrl$k__BackingField();
    // Get instance field reference: private System.String <AppId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$AppId$k__BackingField();
    // Get instance field reference: private System.String <ApiKey>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ApiKey$k__BackingField();
    // Get instance field reference: private System.String <MessageSenderId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$MessageSenderId$k__BackingField();
    // Get instance field reference: private System.String <StorageBucket>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$StorageBucket$k__BackingField();
    // Get instance field reference: private System.String <ProjectId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ProjectId$k__BackingField();
    // Get instance field reference: private System.String <PackageName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$PackageName$k__BackingField();
    // public System.Void set_DatabaseUrl(System.Uri value)
    // Offset: 0x1882988
    void set_DatabaseUrl(::System::Uri* value);
    // public System.Void set_AppId(System.String value)
    // Offset: 0x1882990
    void set_AppId(::StringW value);
    // public System.Void set_ApiKey(System.String value)
    // Offset: 0x1882998
    void set_ApiKey(::StringW value);
    // public System.Void set_MessageSenderId(System.String value)
    // Offset: 0x18829A0
    void set_MessageSenderId(::StringW value);
    // public System.String get_StorageBucket()
    // Offset: 0x18829A8
    ::StringW get_StorageBucket();
    // public System.Void set_StorageBucket(System.String value)
    // Offset: 0x18829B0
    void set_StorageBucket(::StringW value);
    // public System.Void set_ProjectId(System.String value)
    // Offset: 0x18829B8
    void set_ProjectId(::StringW value);
    // System.Void set_PackageName(System.String value)
    // Offset: 0x18829C0
    void set_PackageName(::StringW value);
    // System.Void .ctor(Firebase.AppOptionsInternal other)
    // Offset: 0x18824E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AppOptions* New_ctor(::Firebase::AppOptionsInternal* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Firebase::AppOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AppOptions*, creationType>(other)));
    }
    // public System.Void Dispose()
    // Offset: 0x1882984
    void Dispose();
  }; // Firebase.AppOptions
  #pragma pack(pop)
  static check_size<sizeof(AppOptions), 64 + sizeof(::StringW)> __Firebase_AppOptionsSizeCheck;
  static_assert(sizeof(AppOptions) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Firebase::AppOptions::set_DatabaseUrl
// Il2CppName: set_DatabaseUrl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::AppOptions::*)(::System::Uri*)>(&Firebase::AppOptions::set_DatabaseUrl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Uri")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "set_DatabaseUrl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::AppOptions::set_AppId
// Il2CppName: set_AppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::AppOptions::*)(::StringW)>(&Firebase::AppOptions::set_AppId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "set_AppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::AppOptions::set_ApiKey
// Il2CppName: set_ApiKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::AppOptions::*)(::StringW)>(&Firebase::AppOptions::set_ApiKey)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "set_ApiKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::AppOptions::set_MessageSenderId
// Il2CppName: set_MessageSenderId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::AppOptions::*)(::StringW)>(&Firebase::AppOptions::set_MessageSenderId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "set_MessageSenderId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::AppOptions::get_StorageBucket
// Il2CppName: get_StorageBucket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Firebase::AppOptions::*)()>(&Firebase::AppOptions::get_StorageBucket)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "get_StorageBucket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Firebase::AppOptions::set_StorageBucket
// Il2CppName: set_StorageBucket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::AppOptions::*)(::StringW)>(&Firebase::AppOptions::set_StorageBucket)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "set_StorageBucket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::AppOptions::set_ProjectId
// Il2CppName: set_ProjectId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::AppOptions::*)(::StringW)>(&Firebase::AppOptions::set_ProjectId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "set_ProjectId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::AppOptions::set_PackageName
// Il2CppName: set_PackageName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::AppOptions::*)(::StringW)>(&Firebase::AppOptions::set_PackageName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "set_PackageName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Firebase::AppOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Firebase::AppOptions::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Firebase::AppOptions::*)()>(&Firebase::AppOptions::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Firebase::AppOptions*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
